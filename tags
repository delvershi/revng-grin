!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABI	lib/StackAnalysis/ABIIR.h	/^  std::unique_ptr<FunctionABI> ABI;$/;"	m	class:StackAnalysis::ABIIRInstruction
ABI	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  FunctionABI ABI;$/;"	m	class:StackAnalysis::IntraproceduralFunctionSummary
ABIAnalysis	lib/StackAnalysis/FunctionABI.cpp	/^namespace ABIAnalysis {$/;"	n	namespace:StackAnalysis	file:
ABIAnalysis	lib/StackAnalysis/FunctionABI.h	/^namespace ABIAnalysis {$/;"	n	namespace:StackAnalysis
ABIDATAFLOWS_H	lib/StackAnalysis/ABIDataFlows-header.h	2;"	d
ABIDETECTIONPASS_H	include/revng/StackAnalysis/ABIDetectionPass.h	2;"	d
ABIDetectionPass	include/revng/StackAnalysis/ABIDetectionPass.h	/^  ABIDetectionPass() : llvm::ModulePass(ID) {}$/;"	f	class:StackAnalysis::ABIDetectionPass
ABIDetectionPass	include/revng/StackAnalysis/ABIDetectionPass.h	/^class ABIDetectionPass : public llvm::ModulePass {$/;"	c	namespace:StackAnalysis
ABIFunction	lib/StackAnalysis/ABIIR.h	/^  ABIFunction(llvm::BasicBlock *Entry) :$/;"	f	class:StackAnalysis::ABIFunction
ABIFunction	lib/StackAnalysis/ABIIR.h	/^class ABIFunction {$/;"	c	namespace:StackAnalysis
ABIIRBasicBlock	lib/StackAnalysis/ABIIR.h	/^  ABIIRBasicBlock(llvm::BasicBlock *BB) : BB(BB), IsReturn(false) {}$/;"	f	class:StackAnalysis::ABIIRBasicBlock
ABIIRBasicBlock	lib/StackAnalysis/ABIIR.h	/^class ABIIRBasicBlock {$/;"	c	namespace:StackAnalysis
ABIIRInstruction	lib/StackAnalysis/ABIIR.h	/^  ABIIRInstruction(Opcode O, ASSlot Target) :$/;"	f	class:StackAnalysis::ABIIRInstruction
ABIIRInstruction	lib/StackAnalysis/ABIIR.h	/^  ABIIRInstruction(Opcode O, FunctionCall Call) :$/;"	f	class:StackAnalysis::ABIIRInstruction
ABIIRInstruction	lib/StackAnalysis/ABIIR.h	/^  ABIIRInstruction(Opcode O,$/;"	f	class:StackAnalysis::ABIIRInstruction
ABIIRInstruction	lib/StackAnalysis/ABIIR.h	/^class ABIIRInstruction {$/;"	c	namespace:StackAnalysis
ABIIR_H	lib/StackAnalysis/ABIIR.h	2;"	d
ABIRegister	include/revng/Support/revng.h	/^  ABIRegister(llvm::StringRef Name) :$/;"	f	class:ABIRegister
ABIRegister	include/revng/Support/revng.h	/^  ABIRegister(llvm::StringRef Name, llvm::StringRef QemuName) :$/;"	f	class:ABIRegister
ABIRegister	include/revng/Support/revng.h	/^  ABIRegister(llvm::StringRef Name, unsigned MContextIndex) :$/;"	f	class:ABIRegister
ABIRegister	include/revng/Support/revng.h	/^class ABIRegister {$/;"	c
ABIRegisters	include/revng/Support/revng.h	/^  llvm::SmallVector<ABIRegister, 20> ABIRegisters;$/;"	m	class:Architecture
AS	lib/StackAnalysis/ASSlot.h	/^  ASID AS;$/;"	m	class:StackAnalysis::ASSlot
ASID	lib/StackAnalysis/ASSlot.h	/^  explicit ASID(uint32_t ID) : ID(ID) { revng_assert(ID < LastID); }$/;"	f	class:StackAnalysis::ASID
ASID	lib/StackAnalysis/ASSlot.h	/^class ASID {$/;"	c	namespace:StackAnalysis
ASOContent	lib/StackAnalysis/Element.h	/^  Container ASOContent;$/;"	m	class:StackAnalysis::Intraprocedural::AddressSpace
ASSLOT_H	lib/StackAnalysis/ASSlot.h	2;"	d
ASSlot	lib/StackAnalysis/ASSlot.h	/^  ASSlot(ASID ID, int32_t Offset) : AS(ID), Offset(Offset) {}$/;"	f	class:StackAnalysis::ASSlot
ASSlot	lib/StackAnalysis/ASSlot.h	/^class ASSlot {$/;"	c	namespace:StackAnalysis
Abort	tools/revng-lift/InstructionTranslator.h	/^    Abort, \/\/\/< An error occurred during translation, call abort and stop$/;"	e	enum:InstructionTranslator::TranslationResult
Absolute	include/revng/Support/MemoryAccess.h	/^  enum { Invalid, CPUState, RegisterAndOffset, Absolute } Type;$/;"	e	enum:MemoryAccess::__anon6
AbsoluteValue	tools/revng-lift/BinaryFile.h	/^  AbsoluteValue,$/;"	e	enum:LabelType::Values
Active	tools/revng-lift/OSRA.cpp	/^  const unsigned Active = std::numeric_limits<unsigned>::max();$/;"	m	class:Reacher	file:
AddSubFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  AddSubOffsetFolder AddSubFolder;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
AddSubOffsetFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  AddSubOffsetFolder(const Module &M) :$/;"	f	class:AddSubOffsetFolder
AddSubOffsetFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^class AddSubOffsetFolder : public CRTPOffsetFolder<AddSubOffsetFolder> {$/;"	c	file:
Addend	include/revng/Support/revng.h	/^  enum OffsetType { None, Addend, TargetValue };$/;"	e	enum:RelocationDescription::OffsetType
Address	tools/revng-lift/BinaryFile.cpp	/^  uint64_t Address;$/;"	m	class:DwarfReader	file:
Address	tools/revng-lift/BinaryFile.cpp	/^  uint64_t Address;$/;"	m	class:FilePortion	file:
Address	tools/revng-lift/BinaryFile.h	/^    uint64_t Address;$/;"	m	struct:BinaryFile::__anon9
Address	tools/revng-lift/BinaryFile.h	/^  uint64_t Address;$/;"	m	class:Label
AddressSet	tools/revng-lift/JumpTargetManager.h	/^  std::vector<llvm::Constant *> AddressSet;$/;"	m	class:JumpTargetManager
AddressSpace	lib/StackAnalysis/Element.h	/^  AddressSpace(ASID ID) : ID(ID) {}$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
AddressSpace	lib/StackAnalysis/Element.h	/^class AddressSpace {$/;"	c	namespace:StackAnalysis::Intraprocedural
AffectingLoads	tools/revng-lift/OSRA.cpp	/^    SmallVector<const LoadInst *, 3> AffectingLoads;$/;"	m	struct:OSRA::ComparisonOperand	file:
AmbigousInstruction	include/revng/Support/revng.h	/^  AmbigousInstruction = 8, \/\/\/< Fallthrough of multiple instructions in the$/;"	e	enum:JTReason::Values
Analyses	lib/StackAnalysis/FunctionABI.cpp	/^  Tuple Analyses;$/;"	m	class:StackAnalysis::AnalysesWrapper	file:
AnalysesList	lib/StackAnalysis/FunctionABI.cpp	/^class AnalysesList {$/;"	c	namespace:StackAnalysis::ABIAnalysis	file:
AnalysesWrapper	lib/StackAnalysis/FunctionABI.cpp	/^class AnalysesWrapper {$/;"	c	namespace:StackAnalysis	file:
AnalysesWrapperHelpers	lib/StackAnalysis/FunctionABI.cpp	/^struct AnalysesWrapperHelpers {$/;"	s	namespace:StackAnalysis	file:
AnalysesWrapperHelpers	lib/StackAnalysis/FunctionABI.cpp	/^struct AnalysesWrapperHelpers<Tuple, T, Diff, EarlyExit, 0> {$/;"	s	namespace:StackAnalysis	file:
Analysis	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  Analysis(llvm::Function *F,$/;"	f	class:RDA::Analysis
Analysis	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^class Analysis$/;"	c	namespace:RDA
Analysis	lib/StackAnalysis/FunctionABI.cpp	/^  Analysis(ABIIRBasicBlock *FunctionEntry) :$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
Analysis	lib/StackAnalysis/FunctionABI.cpp	/^class Analysis$/;"	c	namespace:StackAnalysis::ABIAnalysis	file:
Analysis	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  Analysis(ABIIRBasicBlock *FunctionEntry) :$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
Analysis	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^class Analysis : public MonotoneFramework<ABIIRBasicBlock *,$/;"	c	namespace:StackAnalysis::IncoherentCallsAnalysis	file:
Analysis	lib/StackAnalysis/Intraprocedural.h	/^  Analysis(llvm::BasicBlock *Entry,$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
Analysis	lib/StackAnalysis/Intraprocedural.h	/^class Analysis : public MonotoneFramework<llvm::BasicBlock *,$/;"	c	namespace:StackAnalysis::Intraprocedural
Analysis	lib/Support/ExampleAnalysis.cpp	/^  Analysis(Label *Entry) : MonotoneFramework(Entry) {}$/;"	f	class:ExampleAnalysis::Analysis
Analysis	lib/Support/ExampleAnalysis.cpp	/^class Analysis : public MonotoneFramework<Label *,$/;"	c	namespace:ExampleAnalysis	file:
AnalyzeABI	lib/StackAnalysis/InterproceduralAnalysis.h	/^  bool AnalyzeABI;$/;"	m	class:StackAnalysis::InterproceduralAnalysis
AnalyzeABI	lib/StackAnalysis/Intraprocedural.h	/^  bool AnalyzeABI;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
And	tools/revng-lift/OSRA.h	/^      And, \/\/\/< Intersection of the ranges$/;"	e	enum:OSRAPass::BoundedValue::MergeType
AndMerge	tools/revng-lift/OSRA.cpp	/^const BoundedValue::MergeType AndMerge = BoundedValue::And;$/;"	v
Annotator	include/revng/Support/DebugHelper.h	/^  std::unique_ptr<DebugAnnotationWriter> Annotator;$/;"	m	class:DebugHelper
AnyPC	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::BasicBlock *AnyPC;$/;"	m	class:GeneratedCodeBasicInfo
AnyPC	tools/revng-lift/JumpTargetManager.h	/^  llvm::BasicBlock *AnyPC;$/;"	m	class:JumpTargetManager
AnyPCBlock	include/revng/Support/revng.h	/^  AnyPCBlock,$/;"	e	enum:BlockType
Approximate	tools/revng-lift/SET.cpp	/^  bool Approximate;$/;"	m	class:OperationsStack	file:
Approximate	tools/revng-lift/SET.h	/^    bool Approximate; \/\/\/< Is the destination list approximate or exhaustive?$/;"	m	struct:SETPass::JumpInfo
Arch	tools/revng-lift/ExternalJumpsHandler.h	/^  const Architecture &Arch;$/;"	m	class:ExternalJumpsHandler
Architecture	include/revng/Support/revng.h	/^  Architecture() :$/;"	f	class:Architecture
Architecture	include/revng/Support/revng.h	/^  Architecture(unsigned Type,$/;"	f	class:Architecture
Architecture	include/revng/Support/revng.h	/^class Architecture {$/;"	c
Argument	include/revng/StackAnalysis/FunctionsSummary.h	/^    FunctionCallRegisterArgument Argument;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionCallRegisterDescription
Argument	include/revng/StackAnalysis/FunctionsSummary.h	/^    FunctionRegisterArgument Argument;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionRegisterDescription
ArgumentType	tools/revng-lift/InstructionTranslator.cpp	/^enum ArgumentType { In, Out, Const };$/;"	g	namespace:PTC	file:
AsmFunctionType	tools/revng-lift/ExternalJumpsHandler.h	/^  llvm::FunctionType *AsmFunctionType;$/;"	m	class:ExternalJumpsHandler
BASICBLOCKINSTRUCTIONPAIR_H	lib/StackAnalysis/BasicBlockInstructionPair.h	2;"	d
BB	include/revng/BasicAnalyses/CustomCFG.h	/^  llvm::BasicBlock *BB;$/;"	m	class:CustomCFGNode
BB	lib/StackAnalysis/ABIIR.h	/^  llvm::BasicBlock *BB;$/;"	m	class:StackAnalysis::ABIIRBasicBlock
BB	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  llvm::BasicBlock *BB;$/;"	m	class:StackAnalysis::BasicBlockInstructionPair
BB	lib/StackAnalysis/Intraprocedural.cpp	/^  BasicBlock *BB;$/;"	m	class:StackAnalysis::Intraprocedural::BasicBlockState	file:
BB	tools/revng-lift/JumpTargetManager.h	/^    llvm::BasicBlock *BB;$/;"	m	class:JumpTargetManager::JumpTarget
BBMap	lib/StackAnalysis/ABIIR.h	/^  std::map<llvm::BasicBlock *, ABIIRBasicBlock> BBMap;$/;"	m	class:StackAnalysis::ABIFunction
BBMap	tools/revng-lift/OSRA.cpp	/^  mutable std::map<const BasicBlock *, std::vector<MapValue>> BBMap;$/;"	m	class:BVMap	file:
BFSVisitorBase	include/revng/Support/IRHelpers.h	/^struct BFSVisitorBase {$/;"	s
BINARYFILE_H	tools/revng-lift/BinaryFile.h	2;"	d
BOOST_AUTO_TEST_CASE	tests/Unit/IRHelpers.cpp	/^BOOST_AUTO_TEST_CASE(TestBackwardBFSVisitor) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/IRHelpers.cpp	/^BOOST_AUTO_TEST_CASE(TestForwardBFSVisitor) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(ClobberingStore) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(ConditionalDefinition) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(IfStatement) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(LoadReachingAnotherLoad) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(Loop) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(LoopClobbering) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(MultipleLoadsReachingAnotherLoad) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(OneStoreOneLoad) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(RepeatedIfStatement) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(SelfReachingLoad) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/ReachingDefinitionsPass.cpp	/^BOOST_AUTO_TEST_CASE(StoreToDifferentCSV) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/classsentinel.cpp	/^BOOST_AUTO_TEST_CASE(Sentinel) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/lazysmallbitvector.cpp	/^BOOST_AUTO_TEST_CASE(TestBitwiseOperators) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/lazysmallbitvector.cpp	/^BOOST_AUTO_TEST_CASE(TestCopy) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/lazysmallbitvector.cpp	/^BOOST_AUTO_TEST_CASE(TestEmpty) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/lazysmallbitvector.cpp	/^BOOST_AUTO_TEST_CASE(TestEquality) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/lazysmallbitvector.cpp	/^BOOST_AUTO_TEST_CASE(TestIterator) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/lazysmallbitvector.cpp	/^BOOST_AUTO_TEST_CASE(TestSetAndRead) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/lazysmallbitvector.cpp	/^BOOST_AUTO_TEST_CASE(TestZero) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/stackanalysis.cpp	/^BOOST_AUTO_TEST_CASE(TestASSlot) {$/;"	f
BOOST_AUTO_TEST_CASE	tests/Unit/stackanalysis.cpp	/^BOOST_AUTO_TEST_CASE(TestAddressSpaceID) {$/;"	f
BOOST_TEST_MODULE	tests/Unit/IRHelpers.cpp	9;"	d	file:
BOOST_TEST_MODULE	tests/Unit/ReachingDefinitionsPass.cpp	9;"	d	file:
BOOST_TEST_MODULE	tests/Unit/classsentinel.cpp	9;"	d	file:
BOOST_TEST_MODULE	tests/Unit/lazysmallbitvector.cpp	15;"	d	file:
BOOST_TEST_MODULE	tests/Unit/stackanalysis.cpp	9;"	d	file:
BV	tools/revng-lift/OSRA.h	/^    const BoundedValue *BV;$/;"	m	class:OSRAPass::OSR
BVMap	tools/revng-lift/OSRA.cpp	/^  BVMap() :$/;"	f	class:BVMap
BVMap	tools/revng-lift/OSRA.cpp	/^class BVMap {$/;"	c	file:
BVs	tools/revng-lift/OSRA.cpp	/^  BVMap &BVs;$/;"	m	class:OSRA	file:
BVs	tools/revng-lift/OSRA.h	/^  BVMap *BVs;$/;"	m	class:OSRAPass
BackwardBFSVisitor	include/revng/Support/IRHelpers.h	/^struct BackwardBFSVisitor$/;"	s
BadReturnAddress	include/revng/Runtime/commonconstants.h	/^  BadReturnAddress, \/\/\/< Expected and actual return address after function call$/;"	e	enum:__anon5
Base	include/revng/Support/MemoryAccess.h	/^  llvm::Value *Base;$/;"	m	class:MemoryAccess
Base	tools/revng-lift/OSRA.h	/^    uint64_t Base;$/;"	m	class:OSRAPass::OSR
BaseAddress	tools/revng-lift/BinaryFile.h	/^  uint64_t BaseAddress;$/;"	m	class:BinaryFile
BaseRelative	include/revng/Support/revng.h	/^  enum RelocationType { Invalid, BaseRelative, LabelOnly, SymbolRelative };$/;"	e	enum:RelocationDescription::RelocationType
BaseRelativeValue	tools/revng-lift/BinaryFile.h	/^  BaseRelativeValue,$/;"	e	enum:LabelType::Values
BasicBlockInstructionPair	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  BasicBlockInstructionPair() : BB(nullptr), I(nullptr) {}$/;"	f	class:StackAnalysis::BasicBlockInstructionPair
BasicBlockInstructionPair	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  BasicBlockInstructionPair(llvm::BasicBlock *BB, llvm::Instruction *I) :$/;"	f	class:StackAnalysis::BasicBlockInstructionPair
BasicBlockInstructionPair	lib/StackAnalysis/BasicBlockInstructionPair.h	/^class BasicBlockInstructionPair {$/;"	c	namespace:StackAnalysis
BasicBlockState	lib/StackAnalysis/Intraprocedural.cpp	/^  BasicBlockState(BasicBlock *BB,$/;"	f	class:StackAnalysis::Intraprocedural::BasicBlockState
BasicBlockState	lib/StackAnalysis/Intraprocedural.cpp	/^class BasicBlockState {$/;"	c	namespace:StackAnalysis::Intraprocedural	file:
BasicBlockVisitor	tools/revng-lift/JumpTargetManager.cpp	/^  BasicBlockVisitor(const SwitchInst *Dispatcher) :$/;"	f	class:BasicBlockVisitor
BasicBlockVisitor	tools/revng-lift/JumpTargetManager.cpp	/^class BasicBlockVisitor {$/;"	c	file:
BasicBlocks	include/revng/StackAnalysis/FunctionsSummary.h	/^    std::map<llvm::BasicBlock *, BranchType::Values> BasicBlocks;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionDescription
Begin	include/revng/Support/Range.h	/^  Iterator Begin;$/;"	m	class:Range
BigEndian	include/revng/Support/revng.h	/^  enum EndianessType { LittleEndian, BigEndian };$/;"	e	enum:Architecture::EndianessType
BigEndian	tools/revng-lift/BinaryFile.h	/^  enum Endianess { OriginalEndianess, BigEndian, LittleEndian };$/;"	e	enum:BinaryFile::Endianess
Binary	tools/revng-lift/CodeGenerator.h	/^  BinaryFile &Binary;$/;"	m	class:CodeGenerator
Binary	tools/revng-lift/JumpTargetManager.h	/^  const BinaryFile &Binary;$/;"	m	class:JumpTargetManager
BinaryFile	tools/revng-lift/BinaryFile.cpp	/^BinaryFile::BinaryFile(std::string FilePath, uint64_t BaseAddress) :$/;"	f	class:BinaryFile
BinaryFile	tools/revng-lift/BinaryFile.h	/^class BinaryFile {$/;"	c
BinaryHandle	tools/revng-lift/BinaryFile.h	/^  llvm::object::OwningBinary<llvm::object::Binary> BinaryHandle;$/;"	m	class:BinaryFile
BinaryTerm	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  BinaryTerm() : Opcode(0), Operands({ { nullptr, nullptr } }) {}$/;"	f	class:BinaryTerm
BinaryTerm	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  BinaryTerm(unsigned Opcode) :$/;"	f	class:BinaryTerm
BinaryTerm	tools/revng-lift/SimplifyComparisonsPass.cpp	/^class BinaryTerm : public Term {$/;"	c	file:
BitVector	include/revng/ADT/LazySmallBitVector.h	/^  LSBV *BitVector;$/;"	m	class:LazySmallBitVectorIterator
BitsPerPointer	include/revng/ADT/LazySmallBitVector.h	/^  static const unsigned BitsPerPointer = sizeof(uintptr_t) * CHAR_BIT;$/;"	m	class:LazySmallBitVector
BlackList	include/revng/Dump/CollectCFG.h	/^  std::set<BasicBlock *> BlackList;$/;"	m	class:CollectCFG
BlackListTrait	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^struct BlackListTrait<const GeneratedCodeBasicInfo &, llvm::BasicBlock *>$/;"	s
BlackListTrait	include/revng/Support/IRHelpers.h	/^struct BlackListTrait : BlackListTraitBase<C> {};$/;"	s
BlackListTrait	include/revng/Support/IRHelpers.h	/^struct BlackListTrait<C, C> : BlackListTraitBase<C> {$/;"	s
BlackListTrait	include/revng/Support/IRHelpers.h	/^struct BlackListTrait<const NullBlackList &, B>$/;"	s
BlackListTrait	include/revng/Support/IRHelpers.h	/^struct BlackListTrait<const std::set<B> &, B>$/;"	s
BlackListTrait	tools/revng-lift/JumpTargetManager.h	/^struct BlackListTrait<const JumpTargetManager &, llvm::BasicBlock *>$/;"	s
BlackListTraitBase	include/revng/Support/IRHelpers.h	/^  BlackListTraitBase(C Obj) : Obj(Obj) {}$/;"	f	struct:BlackListTraitBase
BlackListTraitBase	include/revng/Support/IRHelpers.h	/^struct BlackListTraitBase {$/;"	s
BlockBlackList	tools/revng-lift/OSRA.cpp	/^  std::set<BasicBlock *> *BlockBlackList;$/;"	m	class:BVMap	file:
BlockBlackList	tools/revng-lift/OSRA.cpp	/^  std::set<BasicBlock *> BlockBlackList;$/;"	m	class:OSRA	file:
BlockType	include/revng/Support/revng.h	/^enum BlockType {$/;"	g
BlockTypeMDName	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^static const char *BlockTypeMDName = "revng.block.type";$/;"	v
Blocks	include/revng/BasicAnalyses/CustomCFG.h	/^  std::map<const llvm::BasicBlock *, CustomCFGNode> Blocks;$/;"	m	class:CustomCFG
Blocks	tools/revng-lift/InstructionTranslator.h	/^  std::vector<llvm::BasicBlock *> Blocks;$/;"	m	class:InstructionTranslator
Both	tests/Unit/ReachingDefinitionsPass.cpp	/^enum TestType { Regular, Conditional, Both };$/;"	e	enum:TestType	file:
Bottom	tools/revng-lift/OSRA.h	/^    uint8_t Bottom;$/;"	m	class:OSRAPass::BoundedValue
Bound	tools/revng-lift/OSRA.h	/^    enum Bound { Lower, Upper };$/;"	g	class:OSRAPass::BoundedValue
BoundedValue	tools/revng-lift/OSRA.h	/^    BoundedValue() :$/;"	f	class:OSRAPass::BoundedValue
BoundedValue	tools/revng-lift/OSRA.h	/^    BoundedValue(const llvm::Value *V) :$/;"	f	class:OSRAPass::BoundedValue
BoundedValue	tools/revng-lift/OSRA.h	/^  class BoundedValue {$/;"	c	class:OSRAPass
BoundedValueHelpers	tools/revng-lift/OSRA.cpp	/^class BoundedValueHelpers {$/;"	c	file:
Bounds	tools/revng-lift/OSRA.h	/^      Bounds(llvm::Type *T, container TheBounds, const OSR &TheOSR) :$/;"	f	class:OSRAPass::OSR::Bounds
Bounds	tools/revng-lift/OSRA.h	/^    BoundsVector Bounds;$/;"	m	class:OSRAPass::BoundedValue
Bounds	tools/revng-lift/OSRA.h	/^    class Bounds {$/;"	c	class:OSRAPass::OSR
BoundsIterator	tools/revng-lift/OSRA.h	/^      BoundsIterator(llvm::Type *T, const OSR &TheOSR, inner_iterator Start) :$/;"	f	class:OSRAPass::OSR::BoundsIterator
BoundsIterator	tools/revng-lift/OSRA.h	/^    class BoundsIterator {$/;"	c	class:OSRAPass::OSR
Branch	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  Branch() : BasicBlockInstructionPair() {}$/;"	f	class:StackAnalysis::Branch
Branch	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  Branch(llvm::BasicBlock *BB, llvm::Instruction *I) :$/;"	f	class:StackAnalysis::Branch
Branch	lib/StackAnalysis/BasicBlockInstructionPair.h	/^class Branch : public BasicBlockInstructionPair {$/;"	c	namespace:StackAnalysis
BranchConditionNumberMap	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  std::map<llvm::TerminatorInst *, int32_t> BranchConditionNumberMap;$/;"	m	class:ConditionNumberingPass
BranchLabeledBasicBlocks	tools/revng-lift/InstructionTranslator.h	/^  std::map<std::string, llvm::BasicBlock *> BranchLabeledBasicBlocks;$/;"	m	class:InstructionTranslator
BranchTargets	tools/revng-lift/JumpTargetManager.h	/^  std::vector<std::tuple<uint64_t, llvm::BasicBlock *, uint64_t>> BranchTargets;  $/;"	m	class:JumpTargetManager
BranchType	include/revng/StackAnalysis/FunctionsSummary.h	/^namespace BranchType {$/;"	n	namespace:StackAnalysis
BranchesType	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<Branch, BranchType::Values> BranchesType;$/;"	m	class:StackAnalysis::ResultsPool
BranchesType	lib/StackAnalysis/Intraprocedural.h	/^  std::map<llvm::BasicBlock *, BranchType::Values> BranchesType;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
BranchesType	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  BranchesTypeMap BranchesType;$/;"	m	class:StackAnalysis::IntraproceduralFunctionSummary
BreadthFirst	include/revng/Support/MonotoneFramework.h	/^  BreadthFirst,$/;"	e	enum:VisitType
Buffer	include/revng/Support/ClassSentinel.h	/^  void *Buffer[BufferCapacity];$/;"	m	class:StackTrace
Buffer	include/revng/Support/Debug.h	/^  std::stringstream Buffer;$/;"	m	class:Logger
BufferCapacity	include/revng/Support/ClassSentinel.h	/^  static const size_t BufferCapacity = 10;$/;"	m	class:StackTrace
Builder	include/revng/Support/DebugHelper.h	/^  llvm::DIBuilder Builder;$/;"	m	class:DebugHelper
Builder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  IRBuilder<> Builder;$/;"	m	class:CPUStateAccessAnalysis	file:
Builder	tools/revng-lift/InstructionTranslator.h	/^  llvm::IRBuilder<> &Builder;$/;"	m	class:InstructionTranslator
Builder	tools/revng-lift/VariableManager.h	/^  llvm::IRBuilder<> Builder;$/;"	m	class:VariableManager
C	include/revng/Support/IRHelpers.h	/^  llvm::LLVMContext &C;$/;"	m	class:QuickMetadata
CACHE_H	lib/StackAnalysis/Cache.h	2;"	d
CALLGRIND_START_INSTRUMENTATION	include/revng/Support/Callgrind.h	10;"	d
CALLGRIND_STOP_INSTRUMENTATION	include/revng/Support/Callgrind.h	13;"	d
CFGForm	tools/revng-lift/JumpTargetManager.h	/^namespace CFGForm {$/;"	n
CLASSSENTINEL_H	include/revng/Support/ClassSentinel.h	2;"	d
CODEGENERATOR_H	tools/revng-lift/CodeGenerator.h	2;"	d
COLLECTCFG_H	include/revng/Dump/CollectCFG.h	2;"	d
COLLECTNORETURN_H	include/revng/Dump/CollectNoreturn.h	2;"	d
COMMANDLINE_H	include/revng/Support/CommandLine.h	2;"	d
COMMA_IF_INVOKED	include/revng/Support/Assert.h	149;"	d
COMMONCONSTANTS_H	include/revng/Runtime/commonconstants.h	2;"	d
CONCAT2	include/revng/Support/Assert.h	151;"	d
CONCAT3	include/revng/Support/Assert.h	152;"	d
CONCAT4	include/revng/Support/Assert.h	153;"	d
CONCAT5	include/revng/Support/Assert.h	154;"	d
CONCAT_TOKENS	include/revng/Support/Assert.h	150;"	d
CPU	lib/StackAnalysis/FunctionABI.cpp	/^static ASID CPU = ASID::cpuID();$/;"	m	namespace:StackAnalysis	file:
CPU	tests/Unit/stackanalysis.cpp	/^const ASID CPU = ASID::cpuID();$/;"	v
CPUAddressSpaceID	lib/StackAnalysis/ASSlot.h	/^    CPUAddressSpaceID,$/;"	e	enum:StackAnalysis::ASID::__anon3
CPUIndices	lib/StackAnalysis/Intraprocedural.cpp	/^  const std::map<const User *, int32_t> &CPUIndices;$/;"	m	class:StackAnalysis::Intraprocedural::BasicBlockState	file:
CPUIndices	lib/StackAnalysis/Intraprocedural.h	/^  std::map<const llvm::User *, int32_t> CPUIndices;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
CPUSTATEACCESSANALYSIS_H	tools/revng-lift/CPUStateAccessAnalysisPass.h	2;"	d
CPUState	include/revng/Support/MemoryAccess.h	/^  enum { Invalid, CPUState, RegisterAndOffset, Absolute } Type;$/;"	e	enum:MemoryAccess::__anon6
CPUStateAccessAnalysis	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CPUStateAccessAnalysis(const Module &Mod, VariableManager *V) :$/;"	f	class:CPUStateAccessAnalysis
CPUStateAccessAnalysis	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^class CPUStateAccessAnalysis {$/;"	c	file:
CPUStateAccessAnalysisPass	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  CPUStateAccessAnalysisPass() : llvm::ModulePass(ID), Variables(nullptr){};$/;"	f	class:CPUStateAccessAnalysisPass
CPUStateAccessAnalysisPass	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  CPUStateAccessAnalysisPass(VariableManager *VM) :$/;"	f	class:CPUStateAccessAnalysisPass
CPUStateAccessAnalysisPass	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^class CPUStateAccessAnalysisPass : public llvm::ModulePass {$/;"	c
CPUStateAccessOffsetAnalysis	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CPUStateAccessOffsetAnalysis(const Module &Mod,$/;"	f	class:CPUStateAccessOffsetAnalysis
CPUStateAccessOffsetAnalysis	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^class CPUStateAccessOffsetAnalysis {$/;"	c	file:
CPUStatePtr	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  GlobalVariable *CPUStatePtr;$/;"	m	class:CPUStateAccessAnalysis	file:
CPUStatePtr	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const Value *CPUStatePtr;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
CPUStateType	tools/revng-lift/VariableManager.h	/^  llvm::StructType *CPUStateType;$/;"	m	class:VariableManager
CRTPOffsetFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CRTPOffsetFolder(const Module &M) :$/;"	f	class:CRTPOffsetFolder
CRTPOffsetFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^class CRTPOffsetFolder {$/;"	c	file:
CSVAccessLog	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static auto CSVAccessLog = Logger<>("cpustate-access-analysis");$/;"	v	file:
CSVCount	lib/StackAnalysis/Intraprocedural.h	/^  int32_t CSVCount; \/\/\/< Number of CSVs, used to distinguish from alloca$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
CSVLoadOffsetMap	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  AccessOffsetMap CSVLoadOffsetMap;$/;"	m	class:CPUStateAccessAnalysis	file:
CSVOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  CSVOffsets() : OffsetKind(Kind::Numeric), Offsets() {}$/;"	f	class:CSVOffsets
CSVOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  CSVOffsets(Kind K) : OffsetKind(K), Offsets() {$/;"	f	class:CSVOffsets
CSVOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  CSVOffsets(Kind K, int64_t O) : OffsetKind(K), Offsets({ O }) {$/;"	f	class:CSVOffsets
CSVOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  CSVOffsets(Kind K, std::set<int64_t> O) : OffsetKind(K), Offsets(O) {$/;"	f	class:CSVOffsets
CSVOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^class CSVOffsets {$/;"	c
CSVStoreOffsetMap	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  AccessOffsetMap CSVStoreOffsetMap;$/;"	m	class:CPUStateAccessAnalysis	file:
CUSTOMCFG_H	include/revng/BasicAnalyses/CustomCFG.h	2;"	d
Cache	include/revng/Support/MemoryAccess.h	/^  std::unordered_map<llvm::Type *, unsigned> Cache;$/;"	m	class:TypeSizeProvider
Cache	lib/StackAnalysis/Cache.cpp	/^Cache::Cache(const Function *F) : DefaultLinkRegister(nullptr) {$/;"	f	class:StackAnalysis::Cache
Cache	lib/StackAnalysis/Cache.h	/^class Cache {$/;"	c	namespace:StackAnalysis
CacheMustHit	lib/StackAnalysis/Intraprocedural.h	/^  bool CacheMustHit;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
Call	include/revng/StackAnalysis/FunctionsSummary.h	/^    llvm::Instruction *Call;$/;"	m	struct:StackAnalysis::FunctionsSummary::CallSiteDescription
Call	lib/StackAnalysis/ABIIR.h	/^  FunctionCall Call;$/;"	m	class:StackAnalysis::ABIIRInstruction
CallSite	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  CallSite() : BasicBlockInstructionPair() {}$/;"	f	class:StackAnalysis::CallSite
CallSite	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  CallSite(llvm::BasicBlock *BB, llvm::Instruction *I) :$/;"	f	class:StackAnalysis::CallSite
CallSite	lib/StackAnalysis/BasicBlockInstructionPair.h	/^class CallSite : public BasicBlockInstructionPair {$/;"	c	namespace:StackAnalysis
CallSiteDescription	include/revng/StackAnalysis/FunctionsSummary.h	/^    CallSiteDescription(llvm::Instruction *Call, llvm::BasicBlock *Callee) :$/;"	f	struct:StackAnalysis::FunctionsSummary::CallSiteDescription
CallSiteDescription	include/revng/StackAnalysis/FunctionsSummary.h	/^  struct CallSiteDescription {$/;"	s	class:StackAnalysis::FunctionsSummary
CallSiteLoadOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CallSiteOffsetMap &CallSiteLoadOffsets; \/\/ result, maps call in root to load$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
CallSiteRegisterState	lib/StackAnalysis/FunctionABI.h	/^class CallSiteRegisterState {$/;"	c	namespace:StackAnalysis
CallSiteStoreOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CallSiteOffsetMap &CallSiteStoreOffsets; \/\/ result, maps call in root to store$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
CallSites	include/revng/StackAnalysis/FunctionsSummary.h	/^    std::vector<CallSiteDescription> CallSites;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionDescription
CallSites	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<CallSite, llvm::Optional<int32_t>> CallSites;$/;"	m	class:StackAnalysis::ResultsPool
Callee	include/revng/StackAnalysis/FunctionsSummary.h	/^    llvm::BasicBlock *Callee;$/;"	m	struct:StackAnalysis::FunctionsSummary::CallSiteDescription
Callee	include/revng/Support/revng.h	/^  Callee = 128, \/\/\/< This JT is the target of a call instruction.$/;"	e	enum:JTReason::Values
Callgrind	include/revng/Support/Callgrind.h	/^  Callgrind(bool Enable) : Enabled(Enable) {$/;"	f	class:Callgrind
Callgrind	include/revng/Support/Callgrind.h	/^class Callgrind {$/;"	c
Calls	lib/StackAnalysis/ABIIR.h	/^  calls_container Calls;$/;"	m	class:StackAnalysis::ABIFunction
Calls	lib/StackAnalysis/FunctionABI.h	/^  DefaultMap<FunctionCall, CallsAnalyses, 5> Calls;$/;"	m	class:StackAnalysis::FunctionABI
CallsAnalyses	lib/StackAnalysis/FunctionABI.h	/^  struct CallsAnalyses {$/;"	s	class:StackAnalysis::FunctionABI
CanonicalValues	tools/revng-lift/BinaryFile.h	/^  std::map<llvm::StringRef, uint64_t> CanonicalValues;$/;"	m	class:BinaryFile
CanonicalValues	tools/revng-lift/SET.cpp	/^  std::map<GlobalVariable *, uint64_t> CanonicalValues;$/;"	m	class:SET	file:
Capacity	include/revng/ADT/LazySmallBitVector.h	/^    size_t Capacity;$/;"	m	struct:LazySmallBitVector::LargeStorage
CastOpcodes	include/revng/Support/IRHelpers.h	/^static std::array<unsigned, 3> CastOpcodes = {$/;"	v
Children	tools/revng-lift/SubGraph.h	/^    llvm::SmallVector<Node *, 2> Children;$/;"	m	class:SubGraph::Node
ClassSentinel	include/revng/Support/ClassSentinel.h	/^  ClassSentinel() : Moved(false), Destroyed(false) {}$/;"	f	class:ClassSentinel
ClassSentinel	include/revng/Support/ClassSentinel.h	/^  ClassSentinel(ClassSentinel &&Other) : Moved(false), Destroyed(false) {$/;"	f	class:ClassSentinel
ClassSentinel	include/revng/Support/ClassSentinel.h	/^class ClassSentinel {$/;"	c
Clobbered	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^    ClobberedMap Clobbered;$/;"	m	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult	file:
ClobberedRegisters	include/revng/StackAnalysis/FunctionsSummary.h	/^    std::set<llvm::GlobalVariable *> ClobberedRegisters;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionDescription
ClobberedRegistersAnalysis	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^struct ClobberedRegistersAnalysis {$/;"	s	namespace:StackAnalysis	file:
Code	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, Code, Data, Section, File };$/;"	e	enum:SymbolType::Values
CodeGenerator	tools/revng-lift/CodeGenerator.cpp	/^CodeGenerator::CodeGenerator(BinaryFile &Binary,$/;"	f	class:CodeGenerator
CodeGenerator	tools/revng-lift/CodeGenerator.h	/^class CodeGenerator {$/;"	c
CodePointers	tools/revng-lift/BinaryFile.h	/^  std::set<uint64_t> CodePointers; \/\/\/< These are taken from dynamic$/;"	m	class:BinaryFile
CollectCFG	include/revng/Dump/CollectCFG.h	/^  CollectCFG() : llvm::ModulePass(ID) {}$/;"	f	class:CollectCFG
CollectCFG	include/revng/Dump/CollectCFG.h	/^class CollectCFG : public llvm::ModulePass {$/;"	c
CollectNoreturn	include/revng/Dump/CollectNoreturn.h	/^  CollectNoreturn() : llvm::ModulePass(ID) {}$/;"	f	class:CollectNoreturn
CollectNoreturn	include/revng/Dump/CollectNoreturn.h	/^class CollectNoreturn : public llvm::ModulePass {$/;"	c
Colors	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  llvm::SmallVector<int32_t, 4> Colors;$/;"	m	struct:MemoryInstruction
ColorsProviderTraits	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^struct ColorsProviderTraits {};$/;"	s	namespace:RDA
ColorsProviderTraits	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^struct ColorsProviderTraits<NullColorsProvider> {$/;"	s	namespace:RDA
ColorsProviderTraits	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^struct ColorsProviderTraits<ConditionNumberingPass> {$/;"	s	namespace:RDA	file:
ColorsProviderTraits	tests/Unit/ReachingDefinitionsPass.cpp	/^struct ColorsProviderTraits<ColorMap> {$/;"	s	namespace:RDA	file:
CombineHelper	lib/StackAnalysis/FunctionABI.h	/^struct CombineHelper {$/;"	s	namespace:StackAnalysis
CompareByName	include/revng/Dump/CollectCFG.h	/^struct CompareByName {$/;"	s
CompareByName	lib/Dump/CollectNoreturn.cpp	/^struct CompareByName {$/;"	s	file:
CompareByName	lib/StackAnalysis/FunctionBoundariesDetectionPass.cpp	/^struct CompareByName {$/;"	s	namespace:StackAnalysis	file:
CompareNodes	tools/revng-lift/SubGraph.h	/^  struct CompareNodes {$/;"	s	class:SubGraph
CompareVisitor	include/revng/ADT/SmallMap.h	/^  struct CompareVisitor : public boost::static_visitor<bool> {$/;"	s	class:Iteratall
Comparison	lib/StackAnalysis/FunctionABI.cpp	/^enum Comparison { Lower = -1, Equal = 0, Greater = 1 };$/;"	g	namespace:StackAnalysis::MapHelpers	file:
Comparison	tools/revng-lift/SimplifyComparisonsPass.h	/^    Comparison() {}$/;"	f	struct:SimplifyComparisonsPass::Comparison
Comparison	tools/revng-lift/SimplifyComparisonsPass.h	/^    Comparison(llvm::CmpInst *Cmp) :$/;"	f	struct:SimplifyComparisonsPass::Comparison
Comparison	tools/revng-lift/SimplifyComparisonsPass.h	/^  struct Comparison {$/;"	s	class:SimplifyComparisonsPass
ComparisonOperand	tools/revng-lift/OSRA.cpp	/^    ComparisonOperand() {}$/;"	f	struct:OSRA::ComparisonOperand
ComparisonOperand	tools/revng-lift/OSRA.cpp	/^    ComparisonOperand(uint64_t V) : Constants({ { V, nullptr } }) {}$/;"	f	struct:OSRA::ComparisonOperand
ComparisonOperand	tools/revng-lift/OSRA.cpp	/^  struct ComparisonOperand {$/;"	s	class:OSRA	file:
CompileUnit	include/revng/Support/DebugHelper.h	/^  llvm::DICompileUnit *CompileUnit;$/;"	m	class:DebugHelper
Components	tools/revng-lift/OSRA.cpp	/^    std::vector<BVWithOrigin> Components;$/;"	m	struct:BVMap::MapValue	file:
ConditionEqualTo	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^  ConditionEqualTo(ReachingDefinitionsPass &RDP) : RDP(RDP) {}$/;"	f	class:ConditionEqualTo
ConditionEqualTo	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^class ConditionEqualTo {$/;"	c	file:
ConditionHash	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^  ConditionHash(ReachingDefinitionsPass &RDP) : RDP(RDP) {}$/;"	f	class:ConditionHash
ConditionHash	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^class ConditionHash {$/;"	c	file:
ConditionNumberingPass	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  ConditionNumberingPass() : llvm::ModulePass(ID){};$/;"	f	class:ConditionNumberingPass
ConditionNumberingPass	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^class ConditionNumberingPass : public llvm::ModulePass {$/;"	c
Conditional	tests/Unit/ReachingDefinitionsPass.cpp	/^enum TestType { Regular, Conditional, Both };$/;"	e	enum:TestType	file:
ConditionalReachedLoadsPass	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  ConditionalReachedLoadsPass() : llvm::ModulePass(ID){};$/;"	f	class:ConditionalReachedLoadsPass
ConditionalReachedLoadsPass	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^class ConditionalReachedLoadsPass : public llvm::ModulePass {$/;"	c
Const	tools/revng-lift/InstructionTranslator.cpp	/^enum ArgumentType { In, Out, Const };$/;"	e	enum:PTC::ArgumentType	file:
ConstArguments	tools/revng-lift/InstructionTranslator.cpp	/^  const Range<InstructionArgumentsIterator<Const, IsCall>> ConstArguments;$/;"	m	class:PTC::InstructionImpl	file:
ConstantValueAssign	tools/revng-lift/JumpTargetManager.h	/^    ConstantValueAssign, $/;"	e	enum:JumpTargetManager::LastAssignmentResult
Constants	tools/revng-lift/OSRA.cpp	/^    SmallVector<std::pair<uint64_t, const Value *>, 1> Constants;$/;"	m	struct:OSRA::ComparisonOperand	file:
Constraints	tools/revng-lift/OSRA.cpp	/^  std::map<const Instruction *, BVVector> Constraints;$/;"	m	class:OSRA	file:
Context	include/revng/Support/DebugHelper.h	/^  llvm::LLVMContext &Context;$/;"	m	class:DebugAnnotationWriter
Context	lib/FunctionIsolation/IsolateFunctions.cpp	/^  LLVMContext &Context;$/;"	m	class:IsolateFunctionsImpl	file:
Context	tools/revng-lift/CodeGenerator.h	/^  llvm::LLVMContext &Context;$/;"	m	class:CodeGenerator
Context	tools/revng-lift/ExternalJumpsHandler.h	/^  llvm::LLVMContext &Context;$/;"	m	class:ExternalJumpsHandler
Context	tools/revng-lift/JumpTargetManager.h	/^  llvm::LLVMContext &Context;$/;"	m	class:JumpTargetManager
Continue	include/revng/Support/IRHelpers.h	/^  Continue, \/\/\/< Visit also the successor basic blocks$/;"	e	enum:VisitAction
Contradiction	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, Contradiction };$/;"	e	enum:StackAnalysis::RegisterArgument::Values
Contradiction	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, YesCandidate, Contradiction };$/;"	e	enum:StackAnalysis::FunctionReturnValue::Values
Contradiction	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Maybe, Yes, Dead, Contradiction };$/;"	e	enum:StackAnalysis::FunctionCallReturnValue::Values
Count	include/revng/Support/ClassSentinel.h	/^  int Count;$/;"	m	class:StackTrace
Count	tools/revng-lift/BinaryFile.h	/^    unsigned Count;$/;"	m	struct:BinaryFile::__anon9
CounterMap	include/revng/Support/Statistics.h	/^  CounterMap(const llvm::Twine &Name) : Name(Name.str()) { init(); }$/;"	f	class:CounterMap
CounterMap	include/revng/Support/Statistics.h	/^class CounterMap : public OnQuitInteraface {$/;"	c
CpuLoopExitPass	tools/revng-lift/CodeGenerator.cpp	/^  CpuLoopExitPass() : llvm::ModulePass(ID), VM(0) {}$/;"	f	class:CpuLoopExitPass
CpuLoopExitPass	tools/revng-lift/CodeGenerator.cpp	/^  CpuLoopExitPass(VariableManager *VM) : llvm::ModulePass(ID), VM(VM) {}$/;"	f	class:CpuLoopExitPass
CpuLoopExitPass	tools/revng-lift/CodeGenerator.cpp	/^class CpuLoopExitPass : public llvm::ModulePass {$/;"	c	file:
CpuLoopFunctionPass	tools/revng-lift/CodeGenerator.cpp	/^  CpuLoopFunctionPass() : llvm::ModulePass(ID) {}$/;"	f	class:CpuLoopFunctionPass
CpuLoopFunctionPass	tools/revng-lift/CodeGenerator.cpp	/^class CpuLoopFunctionPass : public llvm::ModulePass {$/;"	c	file:
CreateICmp	tools/revng-lift/InstructionTranslator.cpp	/^static Value *CreateICmp(T &Builder,$/;"	f	file:
CrossedCallSites	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CallPtrSet CrossedCallSites;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
Current	tools/revng-lift/OSRA.h	/^      inner_iterator Current;$/;"	m	class:OSRAPass::OSR::BoundsIterator
CurrentBlockLastAssign	tools/revng-lift/JumpTargetManager.h	/^    CurrentBlockLastAssign, \/\/ Return last assignment of current of BasicBlock$/;"	e	enum:JumpTargetManager::LastAssignmentResult
CurrentBlockValueDef	tools/revng-lift/JumpTargetManager.h	/^    CurrentBlockValueDef, \/* Case 1: Return value def instruction$/;"	e	enum:JumpTargetManager::LastAssignmentResult
CurrentCFGForm	tools/revng-lift/JumpTargetManager.h	/^  CFGForm::Values CurrentCFGForm;$/;"	m	class:JumpTargetManager
CurrentValue	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  Value *CurrentValue;$/;"	m	class:WorkItem	file:
Cursor	tools/revng-lift/BinaryFile.cpp	/^  const uint8_t *Cursor;$/;"	m	class:DwarfReader	file:
CustomCFG	include/revng/BasicAnalyses/CustomCFG.h	/^class CustomCFG {$/;"	c
CustomCFGNode	include/revng/BasicAnalyses/CustomCFG.h	/^  CustomCFGNode(llvm::BasicBlock *BB) : BB(BB) {}$/;"	f	class:CustomCFGNode
CustomCFGNode	include/revng/BasicAnalyses/CustomCFG.h	/^class CustomCFGNode {$/;"	c
DEBUGHELPER_H	include/revng/Support/DebugHelper.h	2;"	d
DEBUG_H	include/revng/Support/Debug.h	2;"	d
DESCRIPTION	tools/revng-lift/Main.cpp	53;"	d	file:
DESCRIPTION	tools/revng-lift/Main.cpp	58;"	d	file:
DESCRIPTION	tools/revng-lift/Main.cpp	64;"	d	file:
DESCRIPTION	tools/revng-lift/Main.cpp	70;"	d	file:
DESCRIPTION	tools/revng-lift/Main.cpp	72;"	d	file:
DESCRIPTION	tools/revng-lift/Main.cpp	74;"	d	file:
DL	include/revng/Support/MemoryAccess.h	/^  const llvm::DataLayout &DL;$/;"	m	class:TypeSizeProvider
DL	lib/StackAnalysis/Intraprocedural.cpp	/^  const DataLayout &DL;$/;"	m	class:StackAnalysis::Intraprocedural::BasicBlockState	file:
DL	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const DataLayout &DL;$/;"	m	class:CPUStateAccessAnalysis	file:
DL	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const DataLayout &DL;$/;"	m	class:CRTPOffsetFolder	file:
DL	tools/revng-lift/JumpTargetManager.cpp	/^  const DataLayout &DL;$/;"	m	class:BasicBlockVisitor	file:
DL	tools/revng-lift/OSRA.cpp	/^  const DataLayout &DL;$/;"	m	class:OSRA	file:
DL	tools/revng-lift/OSRA.cpp	/^  const DataLayout *DL;$/;"	m	class:BVMap	file:
DL	tools/revng-lift/OSRA.h	/^      const llvm::DataLayout &DL;$/;"	m	class:OSRAPass::OSR::BoundsIterator
DL	tools/revng-lift/SET.cpp	/^  const DataLayout &DL;$/;"	m	class:OperationsStack	file:
DL	tools/revng-lift/SET.cpp	/^  const DataLayout &DL;$/;"	m	class:SET	file:
DRAOF	lib/StackAnalysis/FunctionABI.h	/^  DeadRegisterArgumentsOfFunction DRAOF;$/;"	m	class:StackAnalysis::RegisterState
DRVOFC	lib/StackAnalysis/FunctionABI.h	/^  DeadReturnValuesOfFunctionCall DRVOFC;$/;"	m	class:StackAnalysis::CallSiteRegisterState
DRVOFC	lib/StackAnalysis/FunctionABI.h	/^  DeadReturnValuesOfFunctionCall DRVOFC;$/;"	m	class:StackAnalysis::RegisterState
Data	tools/revng-lift/BinaryFile.h	/^  llvm::ArrayRef<uint8_t> Data;$/;"	m	struct:SegmentInfo
Data	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, Code, Data, Section, File };$/;"	e	enum:SymbolType::Values
DataFlow	tools/revng-lift/JumpTargetManager.h	/^  std::vector<llvm::Instruction *> DataFlow;$/;"	m	class:JumpTargetManager
DbgMDKind	include/revng/Support/DebugHelper.h	/^  unsigned DbgMDKind;$/;"	m	class:DebugAnnotationWriter
DbgMDKind	include/revng/Support/DebugHelper.h	/^  unsigned DbgMDKind;$/;"	m	class:DebugHelper
DbgMDKind	tools/revng-lift/CodeGenerator.h	/^  unsigned DbgMDKind;$/;"	m	class:CodeGenerator
Dead	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, Contradiction };$/;"	e	enum:StackAnalysis::RegisterArgument::Values
Dead	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, YesCandidate, Contradiction };$/;"	e	enum:StackAnalysis::FunctionReturnValue::Values
Dead	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Maybe, Yes, Dead, Contradiction };$/;"	e	enum:StackAnalysis::FunctionCallReturnValue::Values
Debug	tools/revng-lift/CodeGenerator.h	/^  std::unique_ptr<DebugHelper> Debug;$/;"	m	class:CodeGenerator
DebugAnnotationWriter	include/revng/Support/DebugHelper.h	/^class DebugAnnotationWriter : public llvm::AssemblyAnnotationWriter {$/;"	c
DebugAnnotationWriter	lib/Support/DebugHelper.cpp	/^DAW::DebugAnnotationWriter(LLVMContext &Context, bool DebugInfo) :$/;"	f	class:DAW
DebugException	lib/FunctionIsolation/IsolateFunctions.cpp	/^  Function *DebugException;$/;"	m	class:IsolateFunctionsImpl	file:
DebugHelper	include/revng/Support/DebugHelper.h	/^class DebugHelper {$/;"	c
DebugHelper	lib/Support/DebugHelper.cpp	/^DebugHelper::DebugHelper(std::string Output,$/;"	f	class:DebugHelper
DebugInfo	include/revng/Support/DebugHelper.h	/^  DebugInfoType::Values DebugInfo;$/;"	m	class:DebugHelper
DebugInfo	include/revng/Support/DebugHelper.h	/^  bool DebugInfo;$/;"	m	class:DebugAnnotationWriter
DebugInfoType	include/revng/Support/DebugHelper.h	/^namespace DebugInfoType {$/;"	n
DebugLogOption	lib/Support/Debug.cpp	/^llvm::ManagedStatic<DebugLogOptionWrapper> DebugLogOption;$/;"	v
DebugLogOptionList	include/revng/Support/Debug.h	/^  DebugLogOptionList() :$/;"	f	struct:DebugLogOptionList
DebugLogOptionList	include/revng/Support/Debug.h	/^struct DebugLogOptionList : public llvm::cl::list<PlaceholderEnum> {$/;"	s
DebugLogOptionWrapper	include/revng/Support/Debug.h	/^struct DebugLogOptionWrapper {$/;"	s
DebugLogging	lib/Support/Debug.cpp	/^static std::unique_ptr<cl::list<PlaceholderEnum>> DebugLogging;$/;"	v	file:
DebugLoggingAlias	lib/Support/Debug.cpp	/^static std::unique_ptr<cl::alias> DebugLoggingAlias;$/;"	v	file:
DebugPath	include/revng/Support/DebugHelper.h	/^  std::string DebugPath;$/;"	m	class:DebugHelper
Default	lib/StackAnalysis/FunctionABI.h	/^  V Default;$/;"	m	class:StackAnalysis::DefaultMap
DefaultAlignment	include/revng/Support/revng.h	/^  uint32_t DefaultAlignment;$/;"	m	class:Architecture
DefaultLinkRegister	lib/StackAnalysis/Cache.h	/^  llvm::GlobalVariable *DefaultLinkRegister;$/;"	m	class:StackAnalysis::Cache
DefaultMap	lib/StackAnalysis/FunctionABI.h	/^  DefaultMap() : Default() {}$/;"	f	class:StackAnalysis::DefaultMap
DefaultMap	lib/StackAnalysis/FunctionABI.h	/^class DefaultMap {$/;"	c	namespace:StackAnalysis
DelaySlotSize	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  uint32_t DelaySlotSize;$/;"	m	class:GeneratedCodeBasicInfo
DelaySlotSize	include/revng/Support/revng.h	/^  uint32_t DelaySlotSize;$/;"	m	class:Architecture
DereferenceVisitor	include/revng/ADT/SmallMap.h	/^  struct DereferenceVisitor : public boost::static_visitor<reference> {$/;"	s	class:Iteratall
Destinations	tools/revng-lift/SET.h	/^    std::vector<uint64_t> Destinations; \/\/\/< Possible target PCs$/;"	m	struct:SETPass::JumpInfo
DestroyBacktrace	include/revng/Support/ClassSentinel.h	/^  StackTrace DestroyBacktrace;$/;"	m	class:ClassSentinel
Destroyed	include/revng/Support/ClassSentinel.h	/^  bool Destroyed;$/;"	m	class:ClassSentinel
DirectCall	lib/StackAnalysis/ABIIR.h	/^  enum Opcode { Load, Store, DirectCall, IndirectCall };$/;"	e	enum:StackAnalysis::ABIIRInstruction::Opcode
DirectContent	lib/StackAnalysis/Element.h	/^  ASSlot DirectContent;$/;"	m	class:StackAnalysis::Intraprocedural::Value
DirectJump	include/revng/Support/revng.h	/^  DirectJump = 2, \/\/\/< Obtained from a direct store to the PC$/;"	e	enum:JTReason::Values
Dispatcher	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::BasicBlock *Dispatcher;$/;"	m	class:GeneratedCodeBasicInfo
Dispatcher	tools/revng-lift/JumpTargetManager.cpp	/^  const SwitchInst *Dispatcher;$/;"	m	class:BasicBlockVisitor	file:
Dispatcher	tools/revng-lift/JumpTargetManager.h	/^  llvm::BasicBlock *Dispatcher;$/;"	m	class:JumpTargetManager
Dispatcher	tools/revng-lift/NoReturnAnalysis.h	/^  llvm::BasicBlock *Dispatcher;$/;"	m	class:NoReturnAnalysis
DispatcherBlock	include/revng/Support/revng.h	/^  DispatcherBlock,$/;"	e	enum:BlockType
DispatcherFail	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::BasicBlock *DispatcherFail;$/;"	m	class:GeneratedCodeBasicInfo
DispatcherFail	tools/revng-lift/JumpTargetManager.h	/^  llvm::BasicBlock *DispatcherFail;$/;"	m	class:JumpTargetManager
DispatcherFailureBlock	include/revng/Support/revng.h	/^  DispatcherFailureBlock,$/;"	e	enum:BlockType
DispatcherSwitch	tools/revng-lift/JumpTargetManager.h	/^  llvm::SwitchInst *DispatcherSwitch;$/;"	m	class:JumpTargetManager
DoLog	lib/Support/Debug.cpp	/^LogTerminator DoLog;$/;"	v
DwarfReader	tools/revng-lift/BinaryFile.cpp	/^  DwarfReader(ArrayRef<uint8_t> Buffer, uint64_t Address) :$/;"	f	class:DwarfReader
DwarfReader	tools/revng-lift/BinaryFile.cpp	/^class DwarfReader {$/;"	c	file:
DynamicRelocation	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, StaticSymbol, DynamicSymbol, DynamicRelocation };$/;"	e	enum:LabelOrigin::Values
DynamicSymbol	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, StaticSymbol, DynamicSymbol, DynamicRelocation };$/;"	e	enum:LabelOrigin::Values
E	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  MISet E;$/;"	m	class:RDA::Interrupt
ECS	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^      unsigned ECS; \/\/\/< Number of functions in which this register is ECS$/;"	m	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult::ECSVote	file:
ECSVote	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^    struct ECSVote {$/;"	s	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult	file:
ECSVotes	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^    std::map<int32_t, ECSVote> ECSVotes;$/;"	m	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult	file:
ELEMENT_H	lib/StackAnalysis/Element.h	2;"	d
EXTERNALJUMPSHANDLER_H	tools/revng-lift/ExternalJumpsHandler.h	2;"	d
EarlyLinkedModule	tools/revng-lift/CodeGenerator.h	/^  std::unique_ptr<llvm::Module> EarlyLinkedModule;$/;"	m	class:CodeGenerator
EarlyLinkedPath	tools/revng-lift/Main.cpp	/^static std::string EarlyLinkedPath;$/;"	v	file:
EdgeColors	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  std::map<std::pair<BasicBlock *, BasicBlock *>, int32_t> EdgeColors;$/;"	m	class:ConditionNumberingPass
Element	lib/StackAnalysis/Element.h	/^  Element() {}$/;"	f	class:StackAnalysis::Intraprocedural::Element
Element	lib/StackAnalysis/Element.h	/^class Element {$/;"	c	namespace:StackAnalysis::Intraprocedural
Element	lib/StackAnalysis/FunctionABI.cpp	/^  Element() {}$/;"	f	class:StackAnalysis::ABIAnalysis::Element
Element	lib/StackAnalysis/FunctionABI.cpp	/^class Element {$/;"	c	namespace:StackAnalysis::ABIAnalysis	file:
ElementBase	include/revng/Support/MonotoneFramework.h	/^class ElementBase {$/;"	c
Empty	tests/Unit/ReachingDefinitionsPass.cpp	/^  static ColorsList &Empty;$/;"	m	struct:RDA::ColorsProviderTraits	file:
EmptyCSVSet	lib/StackAnalysis/StackAnalysis.cpp	/^const std::set<llvm::GlobalVariable *> EmptyCSVSet;$/;"	m	namespace:StackAnalysis	file:
EmptyColorsList	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^ColorsList EmptyColorsList;$/;"	m	namespace:RDA	file:
EmptyReachedLoadsList	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^static SmallVector<LoadInst *, 2> EmptyReachedLoadsList;$/;"	v	file:
EmptyReachingDefinitionsList	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^SmallVector<Instruction *, 4> EmptyReachingDefinitionsList;$/;"	v
EmptyResetColorsList	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^SmallVector<int32_t, 4> EmptyResetColorsList;$/;"	m	namespace:RDA	file:
EmptyResetColorsList	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^SmallVector<int32_t, 4> EmptyResetColorsList;$/;"	v
EmtpyReachersList	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^SmallVector<Instruction *, 4> EmtpyReachersList;$/;"	m	namespace:RDA	file:
Enabled	include/revng/Support/Callgrind.h	/^  bool Enabled;$/;"	m	class:Callgrind
Enabled	include/revng/Support/Debug.h	/^  bool Enabled;$/;"	m	class:Logger
Enabled	include/revng/Support/Debug.h	/^  bool Enabled;$/;"	m	class:ScopedDebugFeature
Enabled	include/revng/Support/MonotoneFramework.h	/^    bool Enabled;$/;"	m	class:MonotoneFrameworkWorkList::PostOrderEntry
Enabled	lib/StackAnalysis/FunctionABI.cpp	/^  bool Enabled;$/;"	m	class:StackAnalysis::Inhibitor	file:
End	include/revng/Support/Range.h	/^  Iterator End;$/;"	m	class:Range
End	tools/revng-lift/BinaryFile.cpp	/^  const uint8_t *End;$/;"	m	class:DwarfReader	file:
EndVirtualAddress	tools/revng-lift/BinaryFile.h	/^  uint64_t EndVirtualAddress;$/;"	m	struct:SegmentInfo
Endianess	include/revng/Support/revng.h	/^  EndianessType Endianess;$/;"	m	class:Architecture
Endianess	tools/revng-lift/BinaryFile.h	/^  enum Endianess { OriginalEndianess, BigEndian, LittleEndian };$/;"	g	class:BinaryFile
Endianess	tools/revng-lift/BinaryFile.h	/^struct Endianess {$/;"	s
Endianess	tools/revng-lift/BinaryFile.h	/^struct Endianess<T, llvm::object::ELF32BE> {$/;"	s
Endianess	tools/revng-lift/BinaryFile.h	/^struct Endianess<T, llvm::object::ELF32LE> {$/;"	s
Endianess	tools/revng-lift/BinaryFile.h	/^struct Endianess<T, llvm::object::ELF64BE> {$/;"	s
Endianess	tools/revng-lift/BinaryFile.h	/^struct Endianess<T, llvm::object::ELF64LE> {$/;"	s
EndianessType	include/revng/Support/revng.h	/^  enum EndianessType { LittleEndian, BigEndian };$/;"	g	class:Architecture
EndlessLoop	include/revng/Support/revng.h	/^enum Values { NonKiller, KillerSyscall, EndlessLoop, LeadsToKiller };$/;"	e	enum:KillReason::Values
Entry	include/revng/Support/MonotoneFramework.h	/^    Iterated Entry;$/;"	m	class:MonotoneFrameworkWorkList::PostOrderEntry
Entry	lib/StackAnalysis/ABIIR.h	/^  llvm::BasicBlock *Entry;$/;"	m	class:StackAnalysis::ABIFunction
Entry	lib/StackAnalysis/Intraprocedural.h	/^  llvm::BasicBlock *Entry; \/\/\/< The entry point of the current function$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
EntryNode	tools/revng-lift/SubGraph.h	/^  Node *EntryNode;$/;"	m	class:SubGraph
EntryPoint	include/revng/Support/revng.h	/^  EntryPoint$/;"	e	enum:BlockType
EntryPoint	tools/revng-lift/BinaryFile.h	/^  uint64_t EntryPoint; \/\/\/< the program's entry point$/;"	m	class:BinaryFile
Env	tools/revng-lift/VariableManager.h	/^  llvm::Value *Env;$/;"	m	class:VariableManager
EnvOffset	tools/revng-lift/VariableManager.h	/^  unsigned EnvOffset;$/;"	m	class:VariableManager
EnvStructSize	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  int64_t EnvStructSize;$/;"	m	class:CPUStateAccessAnalysis	file:
EnvStructType	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  Type *EnvStructType;$/;"	m	class:CPUStateAccessAnalysis	file:
Equal	lib/StackAnalysis/FunctionABI.cpp	/^enum Comparison { Lower = -1, Equal = 0, Greater = 1 };$/;"	e	enum:StackAnalysis::MapHelpers::Comparison	file:
ExampleAnalysis	lib/Support/ExampleAnalysis.cpp	/^namespace ExampleAnalysis {$/;"	n	file:
ExceptionFlag	lib/FunctionIsolation/IsolateFunctions.cpp	/^  GlobalVariable *ExceptionFlag;$/;"	m	class:IsolateFunctionsImpl	file:
ExecutableRanges	tools/revng-lift/JumpTargetManager.h	/^  RangesVector ExecutableRanges;$/;"	m	class:JumpTargetManager
ExecutableSections	tools/revng-lift/BinaryFile.h	/^  std::vector<std::pair<uint64_t, uint64_t>> ExecutableSections;$/;"	m	struct:SegmentInfo
ExhaustQueueAndStop	include/revng/Support/IRHelpers.h	/^  ExhaustQueueAndStop, \/\/\/< Prevent adding visiting other basic blocks except$/;"	e	enum:VisitAction
ExitTB	tools/revng-lift/JumpTargetManager.h	/^  llvm::Function *ExitTB;$/;"	m	class:JumpTargetManager
ExplicitlyCalleeSavedRegister	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  ExplicitlyCalleeSavedRegister,$/;"	e	enum:StackAnalysis::LocalSlotType::Values
ExplicitlyCalleeSavedRegisters	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<BasicBlock *, std::set<int32_t>> ExplicitlyCalleeSavedRegisters;$/;"	m	class:StackAnalysis::ResultsPool
ExternalJumpsHandler	tools/revng-lift/ExternalJumpsHandler.cpp	/^ExternalJumpsHandler::ExternalJumpsHandler(BinaryFile &TheBinary,$/;"	f	class:ExternalJumpsHandler
ExternalJumpsHandler	tools/revng-lift/ExternalJumpsHandler.h	/^class ExternalJumpsHandler {$/;"	c
ExternalJumpsHandlerBlock	include/revng/Support/revng.h	/^  ExternalJumpsHandlerBlock,$/;"	e	enum:BlockType
Extremals	include/revng/Support/MonotoneFramework.h	/^  std::set<Label> Extremals;$/;"	m	class:MonotoneFramework
F	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  llvm::Function *F;$/;"	m	class:RDA::Analysis
F	include/revng/Support/Transform.h	/^  transformer F;$/;"	m	class:TransformIterator
F	tools/revng-lift/OSRA.cpp	/^  Function &F;$/;"	m	class:OSRA	file:
F	tools/revng-lift/SET.cpp	/^  Function &F;$/;"	m	class:SET	file:
FAILURE	tests/Runtime/calc.c	10;"	d	file:
FCI	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  const FunctionCallIdentification *FCI;$/;"	m	class:RDA::Analysis
FCI	tools/revng-lift/OSRA.cpp	/^  FunctionCallIdentification &FCI;$/;"	m	class:OSRA	file:
FCI	tools/revng-lift/SET.cpp	/^  FunctionCallIdentification *FCI;$/;"	m	class:OperationsStack	file:
FUNCTIONABI_H	lib/StackAnalysis/FunctionABI.h	2;"	d
FUNCTIONBOUNDARIESDETECTIONPASS_H	include/revng/StackAnalysis/FunctionBoundariesDetectionPass.h	2;"	d
FUNCTIONCALLIDENTIFICATION_H	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	2;"	d
FUNCTIONSSUMMARY_H	include/revng/StackAnalysis/FunctionsSummary.h	2;"	d
Factor	tools/revng-lift/OSRA.h	/^    uint64_t Factor;$/;"	m	class:OSRAPass::OSR
Fake	include/revng/StackAnalysis/FunctionsSummary.h	/^  Fake \/\/\/< A fake function$/;"	e	enum:StackAnalysis::FunctionType::Values
FakeFunction	include/revng/StackAnalysis/FunctionsSummary.h	/^  FakeFunction,$/;"	e	enum:StackAnalysis::BranchType::Values
FakeFunctionCall	include/revng/StackAnalysis/FunctionsSummary.h	/^  FakeFunctionCall,$/;"	e	enum:StackAnalysis::BranchType::Values
FakeFunctionReturn	include/revng/StackAnalysis/FunctionsSummary.h	/^  FakeFunctionReturn,$/;"	e	enum:StackAnalysis::BranchType::Values
FakeFunctions	lib/StackAnalysis/Cache.h	/^  std::set<llvm::BasicBlock *> FakeFunctions;$/;"	m	class:StackAnalysis::Cache
FakeReturnAddresses	lib/StackAnalysis/Intraprocedural.h	/^  std::set<uint64_t> FakeReturnAddresses;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
FakeReturnPaths	lib/FunctionIsolation/IsolateFunctions.cpp	/^    std::map<BasicBlock *, BasicBlock *> FakeReturnPaths;$/;"	m	struct:IsolateFunctionsImpl::IsolatedFunctionDescriptor	file:
FallthroughAddresses	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  std::set<uint64_t> FallthroughAddresses;$/;"	m	class:FunctionCallIdentification
File	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, Code, Data, Section, File };$/;"	e	enum:SymbolType::Values
FilePortion	tools/revng-lift/BinaryFile.cpp	/^  FilePortion() : HasAddress(false), HasSize(false), Size(0), Address(0) {}$/;"	f	class:FilePortion
FilePortion	tools/revng-lift/BinaryFile.cpp	/^class FilePortion {$/;"	c	file:
FilteredCFG	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  CustomCFG FilteredCFG;$/;"	m	class:FunctionCallIdentification
FilteredCFG	tools/revng-lift/OSRA.cpp	/^  const CustomCFG &FilteredCFG;$/;"	m	class:OSRA	file:
FilteredCFG	tools/revng-lift/OSRA.cpp	/^  const CustomCFG *FilteredCFG;$/;"	m	class:BVMap	file:
FinalBBs	lib/StackAnalysis/ABIIR.h	/^  returns_container FinalBBs;$/;"	m	class:StackAnalysis::ABIFunction
FinalResult	include/revng/Support/MonotoneFramework.h	/^  LatticeElement FinalResult;$/;"	m	class:MonotoneFramework
FinalState	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  Intraprocedural::Element FinalState;$/;"	m	class:StackAnalysis::IntraproceduralFunctionSummary
FinalStates	include/revng/Support/MonotoneFramework.h	/^  std::vector<std::pair<Label, LatticeElement>> FinalStates;$/;"	m	class:MonotoneFramework
FirstFinalResult	include/revng/Support/MonotoneFramework.h	/^  bool FirstFinalResult;$/;"	m	class:MonotoneFramework
FirstLargeBit	tests/Unit/lazysmallbitvector.cpp	/^static const unsigned FirstLargeBit = sizeof(uintptr_t) * CHAR_BIT;$/;"	v	file:
FirstRun	lib/StackAnalysis/FunctionABI.cpp	/^  bool FirstRun;$/;"	m	class:StackAnalysis::ABIAnalysis::Analysis	file:
FixAccessLog	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static auto FixAccessLog = Logger<>("cpustate-fix-access");$/;"	v	file:
ForceNewPC	tools/revng-lift/InstructionTranslator.h	/^    ForceNewPC \/\/\/< Successful, but force a new basic block for the next PC$/;"	e	enum:InstructionTranslator::TranslationResult
ForwardBFSVisitor	include/revng/Support/IRHelpers.h	/^struct ForwardBFSVisitor$/;"	s
ForwardedArgument	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  ForwardedArgument,$/;"	e	enum:StackAnalysis::LocalSlotType::Values
ForwardedReturnValue	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  ForwardedReturnValue$/;"	e	enum:StackAnalysis::LocalSlotType::Values
FrameSizeAtCallSite	lib/StackAnalysis/Element.h	/^  std::map<CallSite, llvm::Optional<int32_t>> FrameSizeAtCallSite;$/;"	m	class:StackAnalysis::Intraprocedural::Element
FrameSizeAtCallSite	lib/StackAnalysis/Intraprocedural.h	/^  std::map<FunctionCall, llvm::Optional<int32_t>> FrameSizeAtCallSite;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
FrameSizeAtCallSite	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  CallSiteStackSizeMap FrameSizeAtCallSite;$/;"	m	class:StackAnalysis::IntraproceduralFunctionSummary
FunToNumUnknown	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static std::map<std::string, uint64_t> FunToNumUnknown;$/;"	v	file:
FunToUnknowns	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static std::map<std::string, std::set<std::string>> FunToUnknowns;$/;"	v	file:
FunctionABI	lib/StackAnalysis/FunctionABI.h	/^  FunctionABI() {}$/;"	f	class:StackAnalysis::FunctionABI
FunctionABI	lib/StackAnalysis/FunctionABI.h	/^class FunctionABI {$/;"	c	namespace:StackAnalysis
FunctionBoundariesDetectionPass	include/revng/StackAnalysis/FunctionBoundariesDetectionPass.h	/^  FunctionBoundariesDetectionPass() : llvm::ModulePass(ID) {}$/;"	f	class:StackAnalysis::FunctionBoundariesDetectionPass
FunctionBoundariesDetectionPass	include/revng/StackAnalysis/FunctionBoundariesDetectionPass.h	/^class FunctionBoundariesDetectionPass : public llvm::ModulePass {$/;"	c	namespace:StackAnalysis
FunctionCacheHitRate	lib/StackAnalysis/Intraprocedural.cpp	/^static std::map<BasicBlock *, RunningStatistics> FunctionCacheHitRate;$/;"	v	file:
FunctionCall	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  llvm::Function *FunctionCall;$/;"	m	class:FunctionCallIdentification
FunctionCall	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  FunctionCall() : BasicBlockInstructionPair() {}$/;"	f	class:StackAnalysis::FunctionCall
FunctionCall	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  FunctionCall(llvm::BasicBlock *BB, llvm::Instruction *I) :$/;"	f	class:StackAnalysis::FunctionCall
FunctionCall	lib/StackAnalysis/BasicBlockInstructionPair.h	/^class FunctionCall : public BasicBlockInstructionPair {$/;"	c	namespace:StackAnalysis
FunctionCallIdentification	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  FunctionCallIdentification() : llvm::ModulePass(ID) {}$/;"	f	class:FunctionCallIdentification
FunctionCallIdentification	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^class FunctionCallIdentification : public llvm::ModulePass {$/;"	c
FunctionCallRegisterAnalyses	lib/StackAnalysis/FunctionABI.cpp	/^  MapOfMaps<FunctionCall, 5, int32_t, AWFC, 20> FunctionCallRegisterAnalyses;$/;"	m	class:StackAnalysis::ABIAnalysis::Element	file:
FunctionCallRegisterDescription	include/revng/StackAnalysis/FunctionsSummary.h	/^  struct FunctionCallRegisterDescription {$/;"	s	class:StackAnalysis::FunctionsSummary
FunctionCallReturnValue	include/revng/StackAnalysis/FunctionsSummary.h	/^  FunctionCallReturnValue() : Value(Maybe) {}$/;"	f	class:StackAnalysis::FunctionCallReturnValue
FunctionCallReturnValue	include/revng/StackAnalysis/FunctionsSummary.h	/^class FunctionCallReturnValue {$/;"	c	namespace:StackAnalysis
FunctionCallReturnValues	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<FCS, FunctionCallReturnValue> FunctionCallReturnValues;$/;"	m	class:StackAnalysis::ResultsPool
FunctionCalls	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<BasicBlock *, std::vector<FunctionCall>> FunctionCalls;$/;"	m	class:StackAnalysis::ResultsPool
FunctionDescription	include/revng/StackAnalysis/FunctionsSummary.h	/^    FunctionDescription() : Type(FunctionType::Invalid) {}$/;"	f	struct:StackAnalysis::FunctionsSummary::FunctionDescription
FunctionDescription	include/revng/StackAnalysis/FunctionsSummary.h	/^  struct FunctionDescription {$/;"	s	class:StackAnalysis::FunctionsSummary
FunctionDispatcher	lib/FunctionIsolation/IsolateFunctions.cpp	/^  Function *FunctionDispatcher;$/;"	m	class:IsolateFunctionsImpl	file:
FunctionDispatcherFallBack	include/revng/Runtime/commonconstants.h	/^  FunctionDispatcherFallBack \/\/\/< Call to the function dispatcher with a PC not$/;"	e	enum:__anon5
FunctionEntry	lib/StackAnalysis/FunctionABI.cpp	/^  ABIIRBasicBlock *FunctionEntry;$/;"	m	class:StackAnalysis::ABIAnalysis::Analysis	file:
FunctionEntry	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  ABIIRBasicBlock *FunctionEntry;$/;"	m	class:StackAnalysis::IncoherentCallsAnalysis::Analysis	file:
FunctionListPath	tools/revng-lift/CodeGenerator.h	/^  std::string FunctionListPath;$/;"	m	class:CodeGenerator
FunctionLocalCFG	include/revng/StackAnalysis/FunctionsSummary.h	/^  FunctionLocalCFG,$/;"	e	enum:StackAnalysis::BranchType::Values
FunctionRegisterArguments	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<FunctionSlot, FunctionRegisterArgument> FunctionRegisterArguments;$/;"	m	class:StackAnalysis::ResultsPool
FunctionRegisterDescription	include/revng/StackAnalysis/FunctionsSummary.h	/^  struct FunctionRegisterDescription {$/;"	s	class:StackAnalysis::FunctionsSummary
FunctionReturnValue	include/revng/StackAnalysis/FunctionsSummary.h	/^  FunctionReturnValue() : Value(Maybe) {}$/;"	f	class:StackAnalysis::FunctionReturnValue
FunctionReturnValue	include/revng/StackAnalysis/FunctionsSummary.h	/^class FunctionReturnValue {$/;"	c	namespace:StackAnalysis
FunctionReturnValues	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<FunctionSlot, FunctionReturnValue> FunctionReturnValues;$/;"	m	class:StackAnalysis::ResultsPool
FunctionSummary	include/revng/StackAnalysis/FunctionsSummary.h	/^  FunctionSummary,$/;"	e	enum:StackAnalysis::BranchType::Values
FunctionSymbol	include/revng/Support/revng.h	/^  FunctionSymbol = 2048, \/\/\/< Obtained from a function symbol$/;"	e	enum:JTReason::Values
FunctionType	include/revng/StackAnalysis/FunctionsSummary.h	/^namespace FunctionType {$/;"	n	namespace:StackAnalysis
FunctionTypes	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<BasicBlock *, FunctionType::Values> FunctionTypes;$/;"	m	class:StackAnalysis::ResultsPool
Functions	include/revng/StackAnalysis/FunctionsSummary.h	/^  std::map<llvm::BasicBlock *, FunctionDescription> Functions;$/;"	m	class:StackAnalysis::FunctionsSummary
Functions	lib/FunctionIsolation/IsolateFunctions.cpp	/^  std::map<MDString *, IsolatedFunctionDescriptor> Functions;$/;"	m	class:IsolateFunctionsImpl	file:
FunctionsSummary	include/revng/StackAnalysis/FunctionsSummary.h	/^class FunctionsSummary {$/;"	c	namespace:StackAnalysis
GCBI	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  const GeneratedCodeBasicInfo *GCBI;$/;"	m	class:RDA::Analysis
GCBI	lib/FunctionIsolation/IsolateFunctions.cpp	/^  GeneratedCodeBasicInfo &GCBI;$/;"	m	class:IsolateFunctionsImpl	file:
GCBI	lib/StackAnalysis/InterproceduralAnalysis.h	/^  GeneratedCodeBasicInfo &GCBI;$/;"	m	class:StackAnalysis::InterproceduralAnalysis
GCBI	lib/StackAnalysis/Intraprocedural.h	/^  GeneratedCodeBasicInfo *GCBI;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
GENERATEDCODEBASICINFO_H	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	2;"	d
GEPFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  GEPOffsetFolder GEPFolder;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
GEPOffsetFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  GEPOffsetFolder(const Module &M) : CRTPOffsetFolder<GEPOffsetFolder>(M) {}$/;"	f	class:GEPOffsetFolder
GEPOffsetFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^class GEPOffsetFolder : public CRTPOffsetFolder<GEPOffsetFolder> {$/;"	c	file:
GET_10TH	include/revng/Support/Assert.h	155;"	d
GLB	tests/Unit/stackanalysis.cpp	/^const ASID GLB = ASID::globalID();$/;"	v
GeneratedCodeBasicInfo	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  GeneratedCodeBasicInfo() :$/;"	f	class:GeneratedCodeBasicInfo
GeneratedCodeBasicInfo	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^class GeneratedCodeBasicInfo : public llvm::ModulePass {$/;"	c
GetBit	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static int GetBit(uint64_t Input, int Shift) {$/;"	f	file:
GlobalData	include/revng/Support/revng.h	/^  GlobalData = 4, \/\/\/< Obtained digging in global data$/;"	e	enum:JTReason::Values
GlobalID	lib/StackAnalysis/ASSlot.h	/^    GlobalID,$/;"	e	enum:StackAnalysis::ASID::__anon3
GrandResult	include/revng/StackAnalysis/StackAnalysis.h	/^  FunctionsSummary GrandResult;$/;"	m	class:StackAnalysis::StackAnalysis
GraphTraits	include/revng/BasicAnalyses/CustomCFG.h	/^struct GraphTraits<CustomCFGNode *> {$/;"	s	namespace:llvm
GraphTraits	lib/StackAnalysis/ABIIR.h	/^struct GraphTraits<StackAnalysis::ABIIRBasicBlock *> {$/;"	s	namespace:llvm
GraphTraits	tools/revng-lift/SubGraph.h	/^struct GraphTraits<SubGraph<InnerNodeType>> {$/;"	s	namespace:llvm
Greater	lib/StackAnalysis/FunctionABI.cpp	/^enum Comparison { Lower = -1, Equal = 0, Greater = 1 };$/;"	e	enum:StackAnalysis::MapHelpers::Comparison	file:
HAS_COMMA	include/revng/Support/Assert.h	158;"	d
HandledCall	include/revng/StackAnalysis/FunctionsSummary.h	/^  HandledCall,$/;"	e	enum:StackAnalysis::BranchType::Values
Handler	lib/Support/Statistics.cpp	/^struct Handler {$/;"	s	file:
Handlers	lib/Support/Statistics.cpp	/^static std::array<Handler, 3> Handlers = { { { SIGINT, true, {}, {} },$/;"	v	file:
HasAddress	tools/revng-lift/BinaryFile.cpp	/^  bool HasAddress;$/;"	m	class:FilePortion	file:
HasRelocationAddend	include/revng/Support/revng.h	/^  bool HasRelocationAddend;$/;"	m	class:Architecture
HasSize	tools/revng-lift/BinaryFile.cpp	/^  bool HasSize;$/;"	m	class:FilePortion	file:
HelpersModule	tools/revng-lift/CodeGenerator.h	/^  std::unique_ptr<llvm::Module> HelpersModule;$/;"	m	class:CodeGenerator
I	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  llvm::Instruction *I;$/;"	m	struct:MemoryInstruction
I	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  llvm::Instruction *I;$/;"	m	class:StackAnalysis::BasicBlockInstructionPair
I	tools/revng-lift/JumpTargetManager.h	/^  std::vector<llvm::Instruction *> I; $/;"	m	class:legalValue
ID	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  static char ID;$/;"	m	class:GeneratedCodeBasicInfo
ID	include/revng/Dump/CollectCFG.h	/^  static char ID;$/;"	m	class:CollectCFG
ID	include/revng/Dump/CollectNoreturn.h	/^  static char ID;$/;"	m	class:CollectNoreturn
ID	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  static char ID;$/;"	m	class:FunctionCallIdentification
ID	include/revng/FunctionIsolation/IsolateFunctions.h	/^  static char ID;$/;"	m	class:IsolateFunctions
ID	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  static char ID;$/;"	m	class:ConditionNumberingPass
ID	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  static char ID;$/;"	m	class:ConditionalReachedLoadsPass
ID	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  static char ID;$/;"	m	class:ReachingDefinitionsPass
ID	include/revng/StackAnalysis/ABIDetectionPass.h	/^  static char ID;$/;"	m	class:StackAnalysis::ABIDetectionPass
ID	include/revng/StackAnalysis/FunctionBoundariesDetectionPass.h	/^  static char ID;$/;"	m	class:StackAnalysis::FunctionBoundariesDetectionPass
ID	include/revng/StackAnalysis/StackAnalysis.h	/^  static char ID;$/;"	m	class:StackAnalysis::StackAnalysis
ID	include/revng/StackAnalysis/StackAnalysis.h	/^char StackAnalysis<false>::ID;$/;"	m	class:StackAnalysis::StackAnalysis
ID	include/revng/StackAnalysis/StackAnalysis.h	/^char StackAnalysis<true>::ID;$/;"	m	class:StackAnalysis::StackAnalysis
ID	lib/BasicAnalyses/GeneratedCodeBasicInfo.cpp	/^char GeneratedCodeBasicInfo::ID = 0;$/;"	m	class:GeneratedCodeBasicInfo	file:
ID	lib/Dump/CollectCFG.cpp	/^char CollectCFG::ID = 0;$/;"	m	class:CollectCFG	file:
ID	lib/Dump/CollectNoreturn.cpp	/^char CollectNoreturn::ID = 0;$/;"	m	class:CollectNoreturn	file:
ID	lib/FunctionCallIdentification/FunctionCallIdentification.cpp	/^char FunctionCallIdentification::ID = 0;$/;"	m	class:FunctionCallIdentification	file:
ID	lib/FunctionIsolation/IsolateFunctions.cpp	/^char IF::ID = 0;$/;"	m	class:IF	file:
ID	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^char ConditionNumberingPass::ID = 0;$/;"	m	class:ConditionNumberingPass	file:
ID	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^char ConditionalReachedLoadsPass::ID = 0;$/;"	m	class:ConditionalReachedLoadsPass	file:
ID	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^char ReachingDefinitionsPass::ID = 0;$/;"	m	class:ReachingDefinitionsPass	file:
ID	lib/StackAnalysis/ABIDetectionPass.cpp	/^char ABIDetectionPass::ID = 0;$/;"	m	class:StackAnalysis::ABIDetectionPass	file:
ID	lib/StackAnalysis/ASSlot.h	/^  uint32_t ID;$/;"	m	class:StackAnalysis::ASID
ID	lib/StackAnalysis/Element.h	/^  ASID ID;$/;"	m	class:StackAnalysis::Intraprocedural::AddressSpace
ID	lib/StackAnalysis/FunctionBoundariesDetectionPass.cpp	/^char FBDP::ID = 0;$/;"	m	class:StackAnalysis::FBDP	file:
ID	lib/StackAnalysis/StackAnalysis.cpp	/^char StackAnalysis<false>::ID = 0;$/;"	m	class:StackAnalysis::StackAnalysis	file:
ID	lib/StackAnalysis/StackAnalysis.cpp	/^char StackAnalysis<true>::ID = 0;$/;"	m	class:StackAnalysis::StackAnalysis	file:
ID	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^char CPUStateAccessAnalysisPass::ID = 0;$/;"	m	class:CPUStateAccessAnalysisPass	file:
ID	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static char ID;$/;"	m	class:CPUStateAccessAnalysisPass
ID	tools/revng-lift/CodeGenerator.cpp	/^  static char ID;$/;"	m	class:CpuLoopExitPass	file:
ID	tools/revng-lift/CodeGenerator.cpp	/^  static char ID;$/;"	m	class:CpuLoopFunctionPass	file:
ID	tools/revng-lift/CodeGenerator.cpp	/^char CpuLoopExitPass::ID = 0;$/;"	m	class:CpuLoopExitPass	file:
ID	tools/revng-lift/CodeGenerator.cpp	/^char CpuLoopFunctionPass::ID = 0;$/;"	m	class:CpuLoopFunctionPass	file:
ID	tools/revng-lift/JumpTargetManager.cpp	/^char TranslateDirectBranchesPass::ID = 0;$/;"	m	class:TranslateDirectBranchesPass	file:
ID	tools/revng-lift/JumpTargetManager.h	/^  static char ID;$/;"	m	class:TranslateDirectBranchesPass
ID	tools/revng-lift/OSRA.cpp	/^char OSRAPass::ID = 0;$/;"	m	class:OSRAPass	file:
ID	tools/revng-lift/OSRA.h	/^  static char ID;$/;"	m	class:OSRAPass
ID	tools/revng-lift/SET.cpp	/^char SETPass::ID = 0;$/;"	m	class:SETPass	file:
ID	tools/revng-lift/SET.h	/^  static char ID;$/;"	m	class:SETPass
ID	tools/revng-lift/SimplifyComparisonsPass.cpp	/^char SimplifyComparisonsPass::ID = 0;$/;"	m	class:SimplifyComparisonsPass	file:
ID	tools/revng-lift/SimplifyComparisonsPass.h	/^  static char ID;$/;"	m	class:SimplifyComparisonsPass
INSTRUCTIONTRANSLATOR_H	tools/revng-lift/InstructionTranslator.h	2;"	d
INTERPROCEDURAL_H	lib/StackAnalysis/InterproceduralAnalysis.h	2;"	d
INTRAPROCEDURALFUNCTIONSUMMARY_H	lib/StackAnalysis/IntraproceduralFunctionSummary.h	2;"	d
INTRAPROCEDURAL_H	lib/StackAnalysis/Intraprocedural.h	2;"	d
IREntry	lib/StackAnalysis/ABIIR.h	/^  ABIIRBasicBlock *IREntry;$/;"	m	class:StackAnalysis::ABIFunction
IRHELPERS_H	include/revng/Support/IRHelpers.h	2;"	d
ISOLATEFUNCTIONS_H	include/revng/FunctionIsolation/IsolateFunctions.h	2;"	d
IS_EMPTY	include/revng/Support/Assert.h	165;"	d
IS_EMPTY_0001	include/revng/Support/Assert.h	172;"	d
ITERATORWRAPPER_H	include/revng/Support/IteratorWrapper.h	2;"	d
IdentityLoads	lib/StackAnalysis/Cache.h	/^  std::set<const llvm::LoadInst *> IdentityLoads;$/;"	m	class:StackAnalysis::Cache
IdentityStores	lib/StackAnalysis/Cache.h	/^  std::set<const llvm::StoreInst *> IdentityStores;$/;"	m	class:StackAnalysis::Cache
IllegalCalls	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CallPtrSet IllegalCalls;$/;"	m	struct:TaintResults	file:
In	tools/revng-lift/InstructionTranslator.cpp	/^enum ArgumentType { In, Out, Const };$/;"	e	enum:PTC::ArgumentType	file:
InArguments	tools/revng-lift/InstructionTranslator.cpp	/^  const Range<InstructionArgumentsIterator<In, IsCall>> InArguments;$/;"	m	class:PTC::InstructionImpl	file:
InExploration	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  ConstValuePtrSet InExploration;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
InProgress	lib/StackAnalysis/InterproceduralAnalysis.h	/^  std::vector<Analysis> InProgress;$/;"	m	class:StackAnalysis::InterproceduralAnalysis
InProgressFunctions	lib/StackAnalysis/InterproceduralAnalysis.h	/^  std::set<llvm::BasicBlock *> InProgressFunctions; \/\/\/< For recursion detection$/;"	m	class:StackAnalysis::InterproceduralAnalysis
InProgressFunctions	lib/StackAnalysis/Intraprocedural.h	/^  const std::set<llvm::BasicBlock *> &InProgressFunctions;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
Incoherent	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  std::set<FunctionCall> Incoherent;$/;"	m	class:StackAnalysis::IncoherentCallsAnalysis::Analysis	file:
IncoherentCallsAnalysis	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^namespace IncoherentCallsAnalysis {$/;"	n	namespace:StackAnalysis	file:
IncoherentFunctions	lib/StackAnalysis/Intraprocedural.h	/^  std::set<llvm::BasicBlock *> IncoherentFunctions;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
IndentLevel	include/revng/Support/Debug.h	/^  static unsigned IndentLevel;$/;"	m	class:Logger
IndentLevel	lib/Support/Debug.cpp	/^unsigned Logger<X>::IndentLevel;$/;"	m	class:Logger	file:
Index	include/revng/Support/RandomAccessIterator.h	/^  unsigned Index;$/;"	m	class:RandomAccessIterator
Index	lib/StackAnalysis/FunctionABI.cpp	/^  static const size_t Index = NextIndex - 1;$/;"	m	struct:StackAnalysis::AnalysesWrapperHelpers	file:
Index	tools/revng-lift/OSRA.h	/^      uint64_t Index;$/;"	m	class:OSRAPass::OSR::BoundsIterator
IndirectCall	include/revng/StackAnalysis/FunctionsSummary.h	/^  IndirectCall,$/;"	e	enum:StackAnalysis::BranchType::Values
IndirectCall	lib/StackAnalysis/ABIIR.h	/^  enum Opcode { Load, Store, DirectCall, IndirectCall };$/;"	e	enum:StackAnalysis::ABIIRInstruction::Opcode
IndirectTailCall	include/revng/StackAnalysis/FunctionsSummary.h	/^  IndirectTailCall, \/\/\/< A function with no returns but at least an indirect$/;"	e	enum:StackAnalysis::FunctionType::Values
IndirectTailCall	include/revng/StackAnalysis/FunctionsSummary.h	/^  IndirectTailCall,$/;"	e	enum:StackAnalysis::BranchType::Values
IndirectTailCallFunction	include/revng/StackAnalysis/FunctionsSummary.h	/^  IndirectTailCallFunction$/;"	e	enum:StackAnalysis::BranchType::Values
IndirectTailCallFunctions	lib/StackAnalysis/Cache.h	/^  std::set<llvm::BasicBlock *> IndirectTailCallFunctions;$/;"	m	class:StackAnalysis::Cache
Inhibitor	lib/StackAnalysis/FunctionABI.cpp	/^  Inhibitor() : S(), Enabled(false) {}$/;"	f	class:StackAnalysis::Inhibitor
Inhibitor	lib/StackAnalysis/FunctionABI.cpp	/^  explicit Inhibitor(typename S::Values V) : S(V), Enabled(false) {}$/;"	f	class:StackAnalysis::Inhibitor
Inhibitor	lib/StackAnalysis/FunctionABI.cpp	/^  explicit Inhibitor(typename S::Values V, bool Enabled) :$/;"	f	class:StackAnalysis::Inhibitor
Inhibitor	lib/StackAnalysis/FunctionABI.cpp	/^class Inhibitor : public S {$/;"	c	namespace:StackAnalysis	file:
InitialState	lib/StackAnalysis/Intraprocedural.h	/^  Element InitialState; \/\/\/< Empty Element with stack pointer initialized$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
Instruction	tools/revng-lift/SET.h	/^    llvm::StoreInst *Instruction; \/\/\/< The jump instruction$/;"	m	struct:SETPass::JumpInfo
InstructionAlignment	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  uint32_t InstructionAlignment;$/;"	m	class:GeneratedCodeBasicInfo
InstructionAlignment	include/revng/Support/revng.h	/^  uint32_t InstructionAlignment;$/;"	m	class:Architecture
InstructionArgumentsIterator	tools/revng-lift/InstructionTranslator.cpp	/^  InstructionArgumentsIterator(PTCInstruction *TheInstruction, unsigned Index) :$/;"	f	class:PTC::InstructionArgumentsIterator
InstructionArgumentsIterator	tools/revng-lift/InstructionTranslator.cpp	/^  InstructionArgumentsIterator(const InstructionArgumentsIterator &r) :$/;"	f	class:PTC::InstructionArgumentsIterator
InstructionArgumentsIterator	tools/revng-lift/InstructionTranslator.cpp	/^  InstructionArgumentsIterator(const InstructionArgumentsIterator &r,$/;"	f	class:PTC::InstructionArgumentsIterator
InstructionArgumentsIterator	tools/revng-lift/InstructionTranslator.cpp	/^class InstructionArgumentsIterator$/;"	c	namespace:PTC	file:
InstructionContent	lib/StackAnalysis/Intraprocedural.cpp	/^  ContentMap InstructionContent; \/\/\/< Map for the instructions in this BB$/;"	m	class:StackAnalysis::Intraprocedural::BasicBlockState	file:
InstructionImpl	tools/revng-lift/InstructionTranslator.cpp	/^  InstructionImpl(PTCInstruction *TheInstruction) :$/;"	f	class:PTC::InstructionImpl
InstructionImpl	tools/revng-lift/InstructionTranslator.cpp	/^class InstructionImpl {$/;"	c	namespace:PTC	file:
InstructionLocalCFG	include/revng/StackAnalysis/FunctionsSummary.h	/^  InstructionLocalCFG,$/;"	e	enum:StackAnalysis::BranchType::Values
InstructionTranslator	tools/revng-lift/InstructionTranslator.cpp	/^IT::InstructionTranslator(IRBuilder<> &Builder,$/;"	f	class:IT
InstructionTranslator	tools/revng-lift/InstructionTranslator.h	/^class InstructionTranslator {$/;"	c
Instructions	lib/StackAnalysis/ABIIR.h	/^  std::vector<ABIIRInstruction> Instructions;$/;"	m	class:StackAnalysis::ABIIRBasicBlock
Instructions	tools/revng-lift/VariableManager.h	/^  PTCInstructionList *Instructions;$/;"	m	class:VariableManager
Int32Ty	include/revng/Support/IRHelpers.h	/^  llvm::IntegerType *Int32Ty;$/;"	m	class:QuickMetadata
Int32Ty	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  IntegerType *Int32Ty;$/;"	m	class:CRTPOffsetFolder	file:
Int64	tools/revng-lift/OSRA.cpp	/^  Type *Int64;$/;"	m	class:BVMap	file:
Int64	tools/revng-lift/OSRA.cpp	/^  Type *Int64;$/;"	m	class:OSRA	file:
Int64Ty	include/revng/Support/IRHelpers.h	/^  llvm::IntegerType *Int64Ty;$/;"	m	class:QuickMetadata
Int64Ty	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  IntegerType *Int64Ty;$/;"	m	class:CRTPOffsetFolder	file:
Int64Ty	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  Type *Int64Ty;$/;"	m	class:CPUStateAccessAnalysis	file:
IntMax	include/revng/ADT/LazySmallBitVector.h	/^  static const unsigned IntMax = std::numeric_limits<int32_t>::max();$/;"	m	class:LazySmallBitVector
InterproceduralAnalysis	lib/StackAnalysis/InterproceduralAnalysis.h	/^  InterproceduralAnalysis(Cache &TheCache,$/;"	f	class:StackAnalysis::InterproceduralAnalysis
InterproceduralAnalysis	lib/StackAnalysis/InterproceduralAnalysis.h	/^class InterproceduralAnalysis {$/;"	c	namespace:StackAnalysis
Interrupt	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  Interrupt(InterruptType Type) : Type(Type) { revng_assert(Type != Regular); }$/;"	f	class:RDA::Interrupt
Interrupt	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  Interrupt(InterruptType Type, MISet E) : Type(Type), E(E) {$/;"	f	class:RDA::Interrupt
Interrupt	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^class Interrupt {$/;"	c	namespace:RDA
Interrupt	lib/StackAnalysis/FunctionABI.cpp	/^  explicit Interrupt(Reason TheReason) : TheReason(TheReason), Result() {}$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt	file:
Interrupt	lib/StackAnalysis/FunctionABI.cpp	/^  explicit Interrupt(Reason TheReason, Element<E> Result) :$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt	file:
Interrupt	lib/StackAnalysis/FunctionABI.cpp	/^class Interrupt {$/;"	c	namespace:StackAnalysis::ABIAnalysis	file:
Interrupt	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  explicit Interrupt(Reason TheReason) : TheReason(TheReason), Result() {}$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt	file:
Interrupt	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  explicit Interrupt(Reason TheReason, Element Result) :$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt	file:
Interrupt	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^class Interrupt {$/;"	c	namespace:StackAnalysis::IncoherentCallsAnalysis	file:
Interrupt	lib/StackAnalysis/Intraprocedural.h	/^  Interrupt() :$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
Interrupt	lib/StackAnalysis/Intraprocedural.h	/^  Interrupt(BranchType::Values Type, IntraproceduralFunctionSummary Summary) :$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
Interrupt	lib/StackAnalysis/Intraprocedural.h	/^  Interrupt(BranchType::Values Type, vector Successors) :$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
Interrupt	lib/StackAnalysis/Intraprocedural.h	/^  Interrupt(Element Result, BranchType::Values Type) :$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
Interrupt	lib/StackAnalysis/Intraprocedural.h	/^  Interrupt(Element Result, BranchType::Values Type, vector Successors) :$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
Interrupt	lib/StackAnalysis/Intraprocedural.h	/^class Interrupt {$/;"	c	namespace:StackAnalysis::Intraprocedural
Interrupt	lib/Support/ExampleAnalysis.cpp	/^class Interrupt {$/;"	c	namespace:ExampleAnalysis	file:
InterruptType	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  enum InterruptType { Regular, Summary, NoReturn };$/;"	g	class:RDA::Interrupt
Intraprocedural	lib/StackAnalysis/Element.cpp	/^namespace Intraprocedural {$/;"	n	namespace:StackAnalysis	file:
Intraprocedural	lib/StackAnalysis/Element.h	/^namespace Intraprocedural {$/;"	n	namespace:StackAnalysis
Intraprocedural	lib/StackAnalysis/Intraprocedural.cpp	/^namespace Intraprocedural {$/;"	n	namespace:StackAnalysis	file:
Intraprocedural	lib/StackAnalysis/Intraprocedural.h	/^namespace Intraprocedural {$/;"	n	namespace:StackAnalysis
IntraproceduralFunctionSummary	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  IntraproceduralFunctionSummary() :$/;"	f	class:StackAnalysis::IntraproceduralFunctionSummary
IntraproceduralFunctionSummary	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  explicit IntraproceduralFunctionSummary(Intraprocedural::Element FinalState,$/;"	f	class:StackAnalysis::IntraproceduralFunctionSummary
IntraproceduralFunctionSummary	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^class IntraproceduralFunctionSummary {$/;"	c	namespace:StackAnalysis
Invalid	include/revng/StackAnalysis/FunctionsSummary.h	/^  Invalid, \/\/\/< An invalid entry$/;"	e	enum:StackAnalysis::FunctionType::Values
Invalid	include/revng/StackAnalysis/FunctionsSummary.h	/^  Invalid,$/;"	e	enum:StackAnalysis::BranchType::Values
Invalid	include/revng/Support/MemoryAccess.h	/^  enum { Invalid, CPUState, RegisterAndOffset, Absolute } Type;$/;"	e	enum:MemoryAccess::__anon6
Invalid	include/revng/Support/revng.h	/^  enum RelocationType { Invalid, BaseRelative, LabelOnly, SymbolRelative };$/;"	e	enum:RelocationDescription::RelocationType
Invalid	tests/Unit/stackanalysis.cpp	/^const ASID Invalid = ASID::invalidID();$/;"	v
Invalid	tools/revng-lift/BinaryFile.h	/^  Invalid,$/;"	e	enum:LabelType::Values
InvalidID	lib/StackAnalysis/ASSlot.h	/^    InvalidID,$/;"	e	enum:StackAnalysis::ASID::__anon3
InvalidIndex	include/revng/Support/MonotoneFramework.h	/^  const static size_t InvalidIndex = std::numeric_limits<size_t>::max();$/;"	m	class:MonotoneFrameworkWorkList
IsExecutable	tools/revng-lift/BinaryFile.h	/^  bool IsExecutable;$/;"	m	struct:SegmentInfo
IsIndirect	tools/revng-lift/BinaryFile.h	/^  bool IsIndirect;$/;"	m	class:Pointer
IsPCStore	tools/revng-lift/SET.cpp	/^  bool IsPCStore;$/;"	m	class:OperationsStack	file:
IsReadable	tools/revng-lift/BinaryFile.h	/^  bool IsReadable;$/;"	m	struct:SegmentInfo
IsReturn	lib/StackAnalysis/ABIIR.h	/^  bool IsReturn;$/;"	m	class:StackAnalysis::ABIIRBasicBlock
IsSorted	include/revng/ADT/SmallMap.h	/^  mutable bool IsSorted; \/\/\/< Is vector sorted?$/;"	m	class:SmallMap
IsValid	tools/revng-lift/SET.cpp	/^  bool IsValid;$/;"	m	class:MaterializedValue	file:
IsWriteable	tools/revng-lift/BinaryFile.h	/^  bool IsWriteable;$/;"	m	struct:SegmentInfo
IsolateFunctions	include/revng/FunctionIsolation/IsolateFunctions.h	/^  IsolateFunctions() : ModulePass(ID) {}$/;"	f	class:IsolateFunctions
IsolateFunctions	include/revng/FunctionIsolation/IsolateFunctions.h	/^class IsolateFunctions : public llvm::ModulePass {$/;"	c
IsolateFunctionsImpl	lib/FunctionIsolation/IsolateFunctions.cpp	/^  IsolateFunctionsImpl(Function *RootFunction, GeneratedCodeBasicInfo &GCBI) :$/;"	f	class:IsolateFunctionsImpl
IsolateFunctionsImpl	lib/FunctionIsolation/IsolateFunctions.cpp	/^class IsolateFunctionsImpl {$/;"	c	file:
IsolatedFunction	lib/FunctionIsolation/IsolateFunctions.cpp	/^    Function *IsolatedFunction;$/;"	m	struct:IsolateFunctionsImpl::IsolatedFunctionDescriptor	file:
IsolatedFunctionDescriptor	lib/FunctionIsolation/IsolateFunctions.cpp	/^  struct IsolatedFunctionDescriptor {$/;"	s	class:IsolateFunctionsImpl	file:
IsolatedToRootBB	lib/FunctionIsolation/IsolateFunctions.cpp	/^  std::map<BasicBlock *, BasicBlock *> IsolatedToRootBB;$/;"	m	class:IsolateFunctionsImpl	file:
Iteratall	include/revng/ADT/SmallMap.h	/^  Iteratall(T I) : Iterator(I) {}$/;"	f	class:Iteratall
Iteratall	include/revng/ADT/SmallMap.h	/^class Iteratall {$/;"	c
IterationResult	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^  struct IterationResult {$/;"	s	struct:StackAnalysis::ClobberedRegistersAnalysis	file:
Iterator	include/revng/ADT/SmallMap.h	/^  boost::variant<Ts...> Iterator;$/;"	m	class:Iteratall
Iterator	include/revng/Support/IteratorWrapper.h	/^  W Iterator;$/;"	m	class:IteratorWrapper
IteratorDirection	include/revng/Support/IRHelpers.h	/^struct IteratorDirection {};$/;"	s
IteratorDirection	include/revng/Support/IRHelpers.h	/^struct IteratorDirection<false> {$/;"	s
IteratorDirection	include/revng/Support/IRHelpers.h	/^struct IteratorDirection<true> {$/;"	s
IteratorWrapper	include/revng/Support/IteratorWrapper.h	/^  IteratorWrapper(W Iterator) : Iterator(Iterator) {}$/;"	f	class:IteratorWrapper
IteratorWrapper	include/revng/Support/IteratorWrapper.h	/^class IteratorWrapper$/;"	c
JTFC	tools/revng-lift/OSRA.cpp	/^  OSRA &JTFC;$/;"	m	class:OSRAnnotationWriter	file:
JTM	tools/revng-lift/JumpTargetManager.h	/^  JumpTargetManager *JTM;$/;"	m	class:TranslateDirectBranchesPass
JTM	tools/revng-lift/SET.cpp	/^  JumpTargetManager *JTM;$/;"	m	class:OperationsStack	file:
JTM	tools/revng-lift/SET.cpp	/^  JumpTargetManager *JTM;$/;"	m	class:SET	file:
JTM	tools/revng-lift/SET.h	/^  JumpTargetManager *JTM;$/;"	m	class:SETPass
JTReason	include/revng/Support/revng.h	/^namespace JTReason {$/;"	n
JTReasonMDName	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^static const char *JTReasonMDName = "revng.jt.reasons";$/;"	v
JUMPTARGETMANAGER_H	tools/revng-lift/JumpTargetManager.h	2;"	d
JumpAsm	include/revng/Support/revng.h	/^  llvm::StringRef JumpAsm;$/;"	m	class:Architecture
JumpInfo	tools/revng-lift/SET.h	/^    JumpInfo(llvm::StoreInst *Instruction,$/;"	f	struct:SETPass::JumpInfo
JumpInfo	tools/revng-lift/SET.h	/^  struct JumpInfo {$/;"	s	class:SETPass
JumpTarget	tools/revng-lift/JumpTargetManager.h	/^    JumpTarget() : BB(nullptr), Reasons(0) {}$/;"	f	class:JumpTargetManager::JumpTarget
JumpTarget	tools/revng-lift/JumpTargetManager.h	/^    JumpTarget(llvm::BasicBlock *BB) : BB(BB), Reasons(0) {}$/;"	f	class:JumpTargetManager::JumpTarget
JumpTarget	tools/revng-lift/JumpTargetManager.h	/^    JumpTarget(llvm::BasicBlock *BB, JTReason::Values Reason) :$/;"	f	class:JumpTargetManager::JumpTarget
JumpTarget	tools/revng-lift/JumpTargetManager.h	/^  class JumpTarget {$/;"	c	class:JumpTargetManager
JumpTargetBlock	include/revng/Support/revng.h	/^  JumpTargetBlock,$/;"	e	enum:BlockType
JumpTargetIndex	tools/revng-lift/JumpTargetManager.cpp	/^  unsigned JumpTargetIndex;$/;"	m	class:BasicBlockVisitor	file:
JumpTargetManager	tools/revng-lift/JumpTargetManager.cpp	/^JumpTargetManager::JumpTargetManager(Function *TheFunction,$/;"	f	class:JumpTargetManager
JumpTargetManager	tools/revng-lift/JumpTargetManager.h	/^class JumpTargetManager {$/;"	c
JumpTargets	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  std::map<uint64_t, llvm::BasicBlock *> JumpTargets;$/;"	m	class:GeneratedCodeBasicInfo
JumpTargets	tools/revng-lift/ExternalJumpsHandler.h	/^  JumpTargetManager &JumpTargets;$/;"	m	class:ExternalJumpsHandler
JumpTargets	tools/revng-lift/InstructionTranslator.h	/^  JumpTargetManager &JumpTargets;$/;"	m	class:InstructionTranslator
JumpTargets	tools/revng-lift/JumpTargetManager.h	/^  BlockMap JumpTargets;$/;"	m	class:JumpTargetManager
JumpTargetsCount	tools/revng-lift/JumpTargetManager.cpp	/^  unsigned JumpTargetsCount;$/;"	m	class:BasicBlockVisitor	file:
Jumps	tools/revng-lift/SET.cpp	/^  std::vector<SETPass::JumpInfo> &Jumps;$/;"	m	class:SET	file:
Jumps	tools/revng-lift/SET.h	/^  std::vector<JumpInfo> Jumps;$/;"	m	class:SETPass
KillReason	include/revng/Support/revng.h	/^namespace KillReason {$/;"	n
Killer	include/revng/StackAnalysis/FunctionsSummary.h	/^  Killer,$/;"	e	enum:StackAnalysis::BranchType::Values
KillerBBs	tools/revng-lift/NoReturnAnalysis.h	/^  std::set<llvm::BasicBlock *> KillerBBs;$/;"	m	class:NoReturnAnalysis
KillerSyscall	include/revng/Support/revng.h	/^enum Values { NonKiller, KillerSyscall, EndlessLoop, LeadsToKiller };$/;"	e	enum:KillReason::Values
Kind	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  enum Kind {$/;"	g	class:CSVOffsets
KnownInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^    KnownInPtr,$/;"	e	enum:CSVOffsets::Kind
L	include/revng/Support/Debug.h	/^  Logger<StaticEnabled> &L;$/;"	m	class:LogOnReturn
L	include/revng/Support/Debug.h	/^  Logger<StaticEnabled> &L;$/;"	m	class:LoggerIndent
LAZYSMALLBITVECTOR_H	include/revng/ADT/LazySmallBitVector.h	2;"	d
LHS	tools/revng-lift/SimplifyComparisonsPass.h	/^    llvm::Value *LHS;$/;"	m	struct:SimplifyComparisonsPass::Comparison
LLVMIR	include/revng/Support/DebugHelper.h	/^  LLVMIR$/;"	e	enum:DebugInfoType::Values
LLVMTESTHELPERS_H	tests/Unit/LLVMTestHelpers.h	2;"	d
LSBVI	include/revng/ADT/LazySmallBitVector.h	/^inline LSBVI<LSBV>::LSBVI(LSBV *BitVector) :$/;"	f	class:LSBVI
LSBVI	include/revng/ADT/LazySmallBitVector.h	/^inline LSBVI<LSBV>::LSBVI(LSBV *BitVector, unsigned Index) :$/;"	f	class:LSBVI
LSBVI	include/revng/ADT/LazySmallBitVector.h	673;"	d
LSBVI	include/revng/ADT/LazySmallBitVector.h	692;"	d
LTR	tools/revng-lift/OSRA.cpp	/^  std::set<BasicBlock *> LTR;$/;"	m	class:Reacher	file:
Label	lib/Support/ExampleAnalysis.cpp	/^class Label {};$/;"	c	namespace:ExampleAnalysis	file:
Label	tools/revng-lift/BinaryFile.h	/^  Label(LabelOrigin::Values Origin, uint64_t Address, uint64_t Size) :$/;"	f	class:Label
Label	tools/revng-lift/BinaryFile.h	/^class Label {$/;"	c
LabelOnly	include/revng/Support/revng.h	/^  enum RelocationType { Invalid, BaseRelative, LabelOnly, SymbolRelative };$/;"	e	enum:RelocationDescription::RelocationType
LabelOrigin	tools/revng-lift/BinaryFile.h	/^namespace LabelOrigin {$/;"	n
LabelType	tools/revng-lift/BinaryFile.h	/^namespace LabelType {$/;"	n
LabeledBasicBlocks	tools/revng-lift/InstructionTranslator.h	/^  std::map<std::string, llvm::BasicBlock *> LabeledBasicBlocks;$/;"	m	class:InstructionTranslator
Labels	tools/revng-lift/BinaryFile.h	/^  std::vector<Label> Labels;$/;"	m	class:BinaryFile
LabelsMap	tools/revng-lift/BinaryFile.h	/^  LabelIntervalMap LabelsMap;$/;"	m	class:BinaryFile
LandingPads	tools/revng-lift/BinaryFile.h	/^  std::set<uint64_t> LandingPads; \/\/\/< the set of the landing pad addresses$/;"	m	class:BinaryFile
LargeStorage	include/revng/ADT/LazySmallBitVector.h	/^  struct LargeStorage {$/;"	s	class:LazySmallBitVector
LastActiveHeight	tools/revng-lift/OSRA.cpp	/^  unsigned LastActiveHeight;$/;"	m	class:Reacher	file:
LastAssignmentResult	tools/revng-lift/JumpTargetManager.h	/^  enum LastAssignmentResult{$/;"	g	class:JumpTargetManager
LastID	lib/StackAnalysis/ASSlot.h	/^    LastID$/;"	e	enum:StackAnalysis::ASID::__anon3
LastMergeHeight	tools/revng-lift/OSRA.cpp	/^  unsigned LastMergeHeight;$/;"	m	class:Reacher	file:
LastPC	tools/revng-lift/InstructionTranslator.h	/^  uint64_t LastPC;$/;"	m	class:InstructionTranslator
LastReason	include/revng/Support/revng.h	/^  LastReason = SimpleLiteral$/;"	e	enum:JTReason::Values
LastStackID	lib/StackAnalysis/ASSlot.h	/^    LastStackID,$/;"	e	enum:StackAnalysis::ASID::__anon3
LatticeElement	lib/Support/ExampleAnalysis.cpp	/^class LatticeElement {$/;"	c	namespace:ExampleAnalysis	file:
LazySmallBitVector	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector() : Storage(1) {}$/;"	f	class:LazySmallBitVector
LazySmallBitVector	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector(LazySmallBitVector &&Other) : Storage(Other.Storage) {$/;"	f	class:LazySmallBitVector
LazySmallBitVector	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector(const LazySmallBitVector &Other) : Storage(1) {$/;"	f	class:LazySmallBitVector
LazySmallBitVector	include/revng/ADT/LazySmallBitVector.h	/^class LazySmallBitVector {$/;"	c
LazySmallBitVectorIterator	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVectorIterator() : BitVector(nullptr), NextBitIndex(0) {}$/;"	f	class:LazySmallBitVectorIterator
LazySmallBitVectorIterator	include/revng/ADT/LazySmallBitVector.h	/^class LazySmallBitVectorIterator$/;"	c
LeadsToKiller	include/revng/Support/revng.h	/^enum Values { NonKiller, KillerSyscall, EndlessLoop, LeadsToKiller };$/;"	e	enum:KillReason::Values
LibHelpersPath	tools/revng-lift/Main.cpp	/^static std::string LibHelpersPath;$/;"	v	file:
LibTinycodePath	tools/revng-lift/Main.cpp	/^static std::string LibTinycodePath;$/;"	v	file:
LinkRegisters	lib/StackAnalysis/Cache.h	/^  std::map<llvm::BasicBlock *, llvm::GlobalVariable *> LinkRegisters;$/;"	m	class:StackAnalysis::Cache
LittleEndian	include/revng/Support/revng.h	/^  enum EndianessType { LittleEndian, BigEndian };$/;"	e	enum:Architecture::EndianessType
LittleEndian	tools/revng-lift/BinaryFile.h	/^  enum Endianess { OriginalEndianess, BigEndian, LittleEndian };$/;"	e	enum:BinaryFile::Endianess
Load	lib/StackAnalysis/ABIIR.h	/^  enum Opcode { Load, Store, DirectCall, IndirectCall };$/;"	e	enum:StackAnalysis::ABIIRInstruction::Opcode
LoadAddress	include/revng/Support/revng.h	/^  LoadAddress = 512, \/\/\/< A load has been performed from this address$/;"	e	enum:JTReason::Values
LoadAddresses	tools/revng-lift/SET.cpp	/^  std::set<uint64_t> LoadAddresses;$/;"	m	class:OperationsStack	file:
LoadCallSiteOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  ValueCallSiteOffsetMap LoadCallSiteOffsets;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
LoadOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  AccessOffsetMap &LoadOffsets; \/\/ result, maps load or load-memcpy to offsets$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
LoadsCount	tools/revng-lift/SET.cpp	/^  unsigned LoadsCount;$/;"	m	class:OperationsStack	file:
LocalSlotType	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^namespace LocalSlotType {$/;"	n	namespace:StackAnalysis
LocalSlots	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  LocalSlotVector LocalSlots;$/;"	m	class:StackAnalysis::IntraproceduralFunctionSummary
LocalTemporaries	tools/revng-lift/VariableManager.h	/^  TemporariesMap LocalTemporaries;$/;"	m	class:VariableManager
LocallyWrittenRegisters	lib/StackAnalysis/InterproceduralAnalysis.h	/^  map<BasicBlock *, std::set<int32_t>> LocallyWrittenRegisters;$/;"	m	class:StackAnalysis::ResultsPool
LogOnReturn	include/revng/Support/Debug.h	/^  LogOnReturn(Logger<StaticEnabled> &L) : L(L) {}$/;"	f	class:LogOnReturn
LogOnReturn	include/revng/Support/Debug.h	/^class LogOnReturn {$/;"	c
LogTerminator	include/revng/Support/Debug.h	/^struct LogTerminator {};$/;"	s
Logger	include/revng/Support/Debug.h	/^  Logger(llvm::StringRef Name) : Name(Name), Enabled(false) { init(); }$/;"	f	class:Logger
Logger	include/revng/Support/Debug.h	/^class Logger {$/;"	c
LoggerIndent	include/revng/Support/Debug.h	/^  LoggerIndent(Logger<StaticEnabled> &L) : L(L) { L.indent(); }$/;"	f	class:LoggerIndent
LoggerIndent	include/revng/Support/Debug.h	/^class LoggerIndent {$/;"	c
Loggers	include/revng/Support/Debug.h	/^  std::vector<Logger<true> *> Loggers;$/;"	m	class:LoggersRegistry
Loggers	lib/Support/Debug.cpp	/^llvm::ManagedStatic<LoggersRegistry> Loggers;$/;"	v
LoggersRegistry	include/revng/Support/Debug.h	/^  LoggersRegistry() {}$/;"	f	class:LoggersRegistry
LoggersRegistry	include/revng/Support/Debug.h	/^class LoggersRegistry {$/;"	c
LongJmp	include/revng/StackAnalysis/FunctionsSummary.h	/^  LongJmp,$/;"	e	enum:StackAnalysis::BranchType::Values
Lower	lib/StackAnalysis/FunctionABI.cpp	/^enum Comparison { Lower = -1, Equal = 0, Greater = 1 };$/;"	e	enum:StackAnalysis::MapHelpers::Comparison	file:
Lower	tools/revng-lift/OSRA.h	/^    enum Bound { Lower, Upper };$/;"	e	enum:OSRAPass::BoundedValue::Bound
M	lib/StackAnalysis/FunctionABI.h	/^  Container M;$/;"	m	class:StackAnalysis::DefaultMap
M	lib/StackAnalysis/Intraprocedural.cpp	/^  const Module *M;$/;"	m	class:StackAnalysis::Intraprocedural::BasicBlockState	file:
M	lib/StackAnalysis/Intraprocedural.h	/^  const llvm::Module *M;$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
M	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const Module &M;$/;"	m	class:CPUStateAccessAnalysis	file:
M	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const Module &M;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
MA	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  MemoryAccess MA;$/;"	m	struct:MemoryInstruction
MACRO_OVERLOAD_1_OR_2	include/revng/Support/Assert.h	184;"	d
MAX_ARGUMENTS	tests/Runtime/calc.c	12;"	d	file:
MAX_OF	runtime/support.c	44;"	d	file:
MAX_OPERATIONS	tests/Runtime/calc.c	11;"	d	file:
MAX_TEMP_NAME_LENGTH	tools/revng-lift/PTCDump.cpp	/^static const int MAX_TEMP_NAME_LENGTH = 128;$/;"	v	file:
MContextIndex	include/revng/Support/revng.h	/^  unsigned MContextIndex;$/;"	m	class:ABIRegister
MEMORYACCESS_H	include/revng/Support/MemoryAccess.h	2;"	d
MONOTONEFRAMEWORK_H	include/revng/Support/MonotoneFramework.h	2;"	d
MOVE	runtime/support.c	204;"	d	file:
MOVE	runtime/support.c	73;"	d	file:
Map	include/revng/ADT/SmallMap.h	/^  std::map<K, V, C> Map;$/;"	m	class:SmallMap
MapHelpers	lib/StackAnalysis/FunctionABI.cpp	/^namespace MapHelpers {$/;"	n	namespace:StackAnalysis	file:
MapValue	tools/revng-lift/OSRA.cpp	/^  struct MapValue {$/;"	s	class:BVMap	file:
MarkerFunctionNames	include/revng/Support/revng.h	/^static const std::array<llvm::StringRef, 4> MarkerFunctionNames = {$/;"	v
MaterializedValue	tools/revng-lift/SET.cpp	/^  MaterializedValue() : IsValid(false), Value(0) {}$/;"	f	class:MaterializedValue	file:
MaterializedValue	tools/revng-lift/SET.cpp	/^  MaterializedValue(StringRef Name, uint64_t Offset) :$/;"	f	class:MaterializedValue
MaterializedValue	tools/revng-lift/SET.cpp	/^  MaterializedValue(uint64_t Value) : IsValid(true), Value(Value) {}$/;"	f	class:MaterializedValue
MaterializedValue	tools/revng-lift/SET.cpp	/^class MaterializedValue {$/;"	c	file:
MaxCounterMapDump	include/revng/Support/Statistics.h	/^const size_t MaxCounterMapDump = 32;$/;"	v
MaxDepth	tools/revng-lift/SET.cpp	/^  const unsigned MaxDepth = 3;$/;"	m	class:SET	file:
MaxDepth	tools/revng-lift/SimplifyComparisonsPass.cpp	/^static const unsigned MaxDepth = 10;$/;"	v	file:
MaxLoggerNameLength	lib/Support/Debug.cpp	/^size_t MaxLoggerNameLength = 0;$/;"	v
MaxSmallSize	include/revng/ADT/LazySmallBitVector.h	/^  static const unsigned MaxSmallSize = BitsPerPointer - 1;$/;"	m	class:LazySmallBitVector
Maybe	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, Contradiction };$/;"	e	enum:StackAnalysis::RegisterArgument::Values
Maybe	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, YesCandidate, Contradiction };$/;"	e	enum:StackAnalysis::FunctionReturnValue::Values
Maybe	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Maybe, Yes, Dead, Contradiction };$/;"	e	enum:StackAnalysis::FunctionCallReturnValue::Values
MemoryAccess	include/revng/Support/MemoryAccess.h	/^  MemoryAccess() : Type(Invalid), Base(nullptr), Offset(0), Size(0) {}$/;"	f	class:MemoryAccess
MemoryAccess	include/revng/Support/MemoryAccess.h	/^  MemoryAccess(llvm::Instruction *I, TypeSizeProvider &TSP) {$/;"	f	class:MemoryAccess
MemoryAccess	include/revng/Support/MemoryAccess.h	/^  MemoryAccess(llvm::Instruction *I, const llvm::DataLayout &DL) {$/;"	f	class:MemoryAccess
MemoryAccess	include/revng/Support/MemoryAccess.h	/^  MemoryAccess(llvm::LoadInst *Load, TypeSizeProvider &TSP) {$/;"	f	class:MemoryAccess
MemoryAccess	include/revng/Support/MemoryAccess.h	/^  MemoryAccess(llvm::LoadInst *Load, const llvm::DataLayout &DL) {$/;"	f	class:MemoryAccess
MemoryAccess	include/revng/Support/MemoryAccess.h	/^  MemoryAccess(llvm::StoreInst *Store, TypeSizeProvider &TSP) {$/;"	f	class:MemoryAccess
MemoryAccess	include/revng/Support/MemoryAccess.h	/^  MemoryAccess(llvm::StoreInst *Store, const llvm::DataLayout &DL) {$/;"	f	class:MemoryAccess
MemoryAccess	include/revng/Support/MemoryAccess.h	/^class MemoryAccess {$/;"	c
MemoryInstruction	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  MemoryInstruction() : I(nullptr), MA() {}$/;"	f	struct:MemoryInstruction
MemoryInstruction	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  MemoryInstruction(llvm::LoadInst *I, const llvm::DataLayout &DL) :$/;"	f	struct:MemoryInstruction
MemoryInstruction	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  MemoryInstruction(llvm::StoreInst *I, const llvm::DataLayout &DL) :$/;"	f	struct:MemoryInstruction
MemoryInstruction	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^struct MemoryInstruction {$/;"	s
MergeType	tools/revng-lift/OSRA.h	/^    enum MergeType {$/;"	g	class:OSRAPass::BoundedValue
ModuleBegin	tests/Unit/LLVMTestHelpers.h	/^static const char *ModuleBegin = R"LLVM($/;"	v
ModuleEnd	tests/Unit/LLVMTestHelpers.h	/^static const char *ModuleEnd = "\\n}\\n";$/;"	v
ModuleLayout	tools/revng-lift/VariableManager.h	/^  const llvm::DataLayout *ModuleLayout;$/;"	m	class:VariableManager
MonotoneFramework	include/revng/Support/MonotoneFramework.h	/^  MonotoneFramework(Label Entry) :$/;"	f	class:MonotoneFramework
MonotoneFramework	include/revng/Support/MonotoneFramework.h	/^class MonotoneFramework {$/;"	c
MonotoneFrameworkSet	include/revng/Support/MonotoneFramework.h	/^class MonotoneFrameworkSet {$/;"	c
MonotoneFrameworkWorkList	include/revng/Support/MonotoneFramework.h	/^  MonotoneFrameworkWorkList(Iterated Entry) {$/;"	f	class:MonotoneFrameworkWorkList
MonotoneFrameworkWorkList	include/revng/Support/MonotoneFramework.h	/^  MonotoneFrameworkWorkList(Iterated) {}$/;"	f	class:MonotoneFrameworkWorkList
MonotoneFrameworkWorkList	include/revng/Support/MonotoneFramework.h	/^class MonotoneFrameworkWorkList {};$/;"	c
MonotoneFrameworkWorkList	include/revng/Support/MonotoneFramework.h	/^class MonotoneFrameworkWorkList<Iterated, BreadthFirst> {$/;"	c
MonotoneFrameworkWorkList	include/revng/Support/MonotoneFramework.h	/^class MonotoneFrameworkWorkList<Iterated,$/;"	c
MoveBacktrace	include/revng/Support/ClassSentinel.h	/^  StackTrace MoveBacktrace;$/;"	m	class:ClassSentinel
Moved	include/revng/Support/ClassSentinel.h	/^  bool Moved;$/;"	m	class:ClassSentinel
MultipleTargetsCalls	tools/revng-lift/SET.cpp	/^  std::set<CallInst *> MultipleTargetsCalls;$/;"	m	class:OperationsStack	file:
N	include/revng/Support/Statistics.h	/^  int N;$/;"	m	class:RunningStatistics
NORETURNANALYSIS_H	tools/revng-lift/NoReturnAnalysis.h	2;"	d
Name	include/revng/Support/Debug.h	/^  llvm::StringRef Name;$/;"	m	class:Logger
Name	include/revng/Support/Debug.h	/^  std::string Name;$/;"	m	class:ScopedDebugFeature
Name	include/revng/Support/Statistics.h	/^  std::string Name;$/;"	m	class:CounterMap
Name	include/revng/Support/Statistics.h	/^  std::string Name;$/;"	m	class:RunningStatistics
Name	include/revng/Support/revng.h	/^  llvm::StringRef Name;$/;"	m	class:ABIRegister
Name	lib/StackAnalysis/StackAnalysis.cpp	/^const char *Name = "Stack Analysis Pass";$/;"	m	namespace:StackAnalysis::__anon2	file:
NeededLibraryNames	tools/revng-lift/BinaryFile.h	/^  std::vector<std::string> NeededLibraryNames;$/;"	m	class:BinaryFile
Negated	tools/revng-lift/OSRA.h	/^    uint8_t Negated;$/;"	m	class:OSRAPass::BoundedValue
NewBranches	tools/revng-lift/JumpTargetManager.h	/^  unsigned NewBranches = 0;$/;"	m	class:JumpTargetManager
NewHandler	lib/Support/Statistics.cpp	/^  struct sigaction NewHandler;$/;"	m	struct:Handler	typeref:struct:Handler::sigaction	file:
NewM	include/revng/Support/Statistics.h	/^  double OldM, NewM, OldS, NewS;$/;"	m	class:RunningStatistics
NewPC	tools/revng-lift/JumpTargetManager.cpp	/^  std::queue<std::pair<BasicBlock *, uint64_t>> NewPC;$/;"	m	class:BasicBlockVisitor	file:
NewPCMarker	tools/revng-lift/InstructionTranslator.h	/^  llvm::Function *NewPCMarker;$/;"	m	class:InstructionTranslator
NewPCs	tools/revng-lift/SET.cpp	/^  std::set<std::pair<uint64_t, bool>> NewPCs;$/;"	m	class:OperationsStack	file:
NewS	include/revng/Support/Statistics.h	/^  double OldM, NewM, OldS, NewS;$/;"	m	class:RunningStatistics
Next	include/revng/Support/MonotoneFramework.h	/^  size_t Next;$/;"	m	class:MonotoneFrameworkWorkList
NextBitIndex	include/revng/ADT/LazySmallBitVector.h	/^  unsigned NextBitIndex;$/;"	m	class:LazySmallBitVectorIterator
NextBlockOperating	tools/revng-lift/JumpTargetManager.h	/^    NextBlockOperating, \/* Case 1: Explort next BasicBlock of operating this value$/;"	e	enum:JumpTargetManager::LastAssignmentResult
No	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, Contradiction };$/;"	e	enum:StackAnalysis::RegisterArgument::Values
No	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, YesCandidate, Contradiction };$/;"	e	enum:StackAnalysis::FunctionReturnValue::Values
No	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Maybe, Yes, Dead, Contradiction };$/;"	e	enum:StackAnalysis::FunctionCallReturnValue::Values
NoDCE	tools/revng-lift/NoReturnAnalysis.h	/^  llvm::Function *NoDCE;$/;"	m	class:NoReturnAnalysis
NoDefinedConditions	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  static const llvm::SmallVector<int32_t, 2> NoDefinedConditions;$/;"	m	class:ConditionNumberingPass
NoDefinedConditions	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^const IndexesVector ConditionNumberingPass::NoDefinedConditions;$/;"	m	class:ConditionNumberingPass	file:
NoEquivalentPredicate	tools/revng-lift/SimplifyComparisonsPass.cpp	/^static const auto NoEquivalentPredicate = CmpInst::FCMP_FALSE;$/;"	v	file:
NoFunctionCallsCFG	tools/revng-lift/JumpTargetManager.h	/^  NoFunctionCallsCFG$/;"	e	enum:CFGForm::Values
NoMoreTargets	tools/revng-lift/JumpTargetManager.cpp	/^const BlockWithAddress JTM::NoMoreTargets = BlockWithAddress(0, nullptr);$/;"	m	class:JTM	file:
NoMoreTargets	tools/revng-lift/JumpTargetManager.h	/^  static const BlockWithAddress NoMoreTargets;$/;"	m	class:JumpTargetManager
NoOrDead	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, Contradiction };$/;"	e	enum:StackAnalysis::RegisterArgument::Values
NoOrDead	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, YesCandidate, Contradiction };$/;"	e	enum:StackAnalysis::FunctionReturnValue::Values
NoOrDead	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Maybe, Yes, Dead, Contradiction };$/;"	e	enum:StackAnalysis::FunctionCallReturnValue::Values
NoReturn	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  enum InterruptType { Regular, Summary, NoReturn };$/;"	e	enum:RDA::Interrupt::InterruptType
NoReturn	include/revng/StackAnalysis/FunctionsSummary.h	/^  NoReturn, \/\/\/< A noreturn function$/;"	e	enum:StackAnalysis::FunctionType::Values
NoReturn	lib/StackAnalysis/FunctionABI.cpp	/^  enum Reason { Regular, Return, NoReturn, Summary };$/;"	e	enum:StackAnalysis::ABIAnalysis::Interrupt::Reason	file:
NoReturn	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  enum Reason { Regular, Return, SpecialStart, NoReturn, Summary };$/;"	e	enum:StackAnalysis::IncoherentCallsAnalysis::Interrupt::Reason	file:
NoReturn	tools/revng-lift/JumpTargetManager.h	/^  NoReturnAnalysis NoReturn;$/;"	m	class:JumpTargetManager
NoReturnAnalysis	tools/revng-lift/NoReturnAnalysis.h	/^  NoReturnAnalysis(Architecture TheArchitecture) :$/;"	f	class:NoReturnAnalysis
NoReturnAnalysis	tools/revng-lift/NoReturnAnalysis.h	/^class NoReturnAnalysis {$/;"	c
NoReturnFunction	include/revng/StackAnalysis/FunctionsSummary.h	/^  NoReturnFunction,$/;"	e	enum:StackAnalysis::BranchType::Values
NoReturnFunctions	lib/StackAnalysis/Cache.h	/^  std::set<llvm::BasicBlock *> NoReturnFunctions;$/;"	m	class:StackAnalysis::Cache
NoReturnSyscalls	include/revng/Support/revng.h	/^  llvm::ArrayRef<uint64_t> NoReturnSyscalls;$/;"	m	class:Architecture
NoSuccessors	include/revng/Support/IRHelpers.h	/^  NoSuccessors, \/\/\/< Do not visit the successors of this basic block$/;"	e	enum:VisitAction
Node	tools/revng-lift/SubGraph.h	/^    Node(InnerNodeType Value) : Value(Value) {}$/;"	f	class:SubGraph::Node
Node	tools/revng-lift/SubGraph.h	/^  class Node {$/;"	c	class:SubGraph
Nodes	tools/revng-lift/SubGraph.h	/^  std::set<Node, CompareNodes> Nodes;$/;"	m	class:SubGraph
NonKiller	include/revng/Support/revng.h	/^enum Values { NonKiller, KillerSyscall, EndlessLoop, LeadsToKiller };$/;"	e	enum:KillReason::Values
None	include/revng/Support/DebugHelper.h	/^  None,$/;"	e	enum:DebugInfoType::Values
None	include/revng/Support/revng.h	/^  enum OffsetType { None, Addend, TargetValue };$/;"	e	enum:RelocationDescription::OffsetType
None	tools/revng-lift/SET.cpp	/^    None, \/\/\/< Don't track anything$/;"	e	enum:OperationsStack::TrackingType	file:
NoreturnBBs	include/revng/Dump/CollectNoreturn.h	/^  std::vector<llvm::BasicBlock *> NoreturnBBs;$/;"	m	class:CollectNoreturn
NotInMContext	include/revng/Support/revng.h	/^  static const unsigned NotInMContext = std::numeric_limits<unsigned>::max();$/;"	m	class:ABIRegister
NullBlackList	include/revng/Support/IRHelpers.h	/^class NullBlackList {};$/;"	c
NullColorsProvider	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^class NullColorsProvider {};$/;"	c	namespace:RDA
NumUnknown	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static uint64_t NumUnknown = 0;$/;"	v	file:
Numeric	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^    Numeric,$/;"	e	enum:CSVOffsets::Kind
NumericFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  NumericOffsetFolder NumericFolder;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
NumericOffsetFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  NumericOffsetFolder(const Module &M) :$/;"	f	class:NumericOffsetFolder
NumericOffsetFolder	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^class NumericOffsetFolder : public CRTPOffsetFolder<NumericOffsetFolder> {$/;"	c	file:
O	lib/StackAnalysis/ABIIR.h	/^  Opcode O;$/;"	m	class:StackAnalysis::ABIIRInstruction
OS	tools/revng-lift/SET.cpp	/^  OperationsStack OS;$/;"	m	class:SET	file:
OSR	tools/revng-lift/OSRA.h	/^    OSR() : Base(0), Factor(1), BV(nullptr) {}$/;"	f	class:OSRAPass::OSR
OSR	tools/revng-lift/OSRA.h	/^    OSR(const BoundedValue *Value) : Base(0), Factor(1), BV(Value) {}$/;"	f	class:OSRAPass::OSR
OSR	tools/revng-lift/OSRA.h	/^    OSR(const OSR &Other) :$/;"	f	class:OSRAPass::OSR
OSR	tools/revng-lift/OSRA.h	/^  class OSR {$/;"	c	class:OSRAPass
OSRA	tools/revng-lift/OSRA.cpp	/^  OSRA(Function &F,$/;"	f	class:OSRA
OSRA	tools/revng-lift/OSRA.cpp	/^class OSRA {$/;"	c	file:
OSRA	tools/revng-lift/SET.cpp	/^  OSRAPass *OSRA;$/;"	m	class:SET	file:
OSRAPass	tools/revng-lift/OSRA.h	/^  OSRAPass() : llvm::ModulePass(ID), BVs(nullptr) {}$/;"	f	class:OSRAPass
OSRAPass	tools/revng-lift/OSRA.h	/^class OSRAPass : public llvm::ModulePass {$/;"	c
OSRA_H	tools/revng-lift/OSRA.h	2;"	d
OSRAnnotationWriter	tools/revng-lift/OSRA.cpp	/^  OSRAnnotationWriter(OSRA &JTFC) : JTFC(JTFC) {}$/;"	f	class:OSRAnnotationWriter
OSRAnnotationWriter	tools/revng-lift/OSRA.cpp	/^class OSRAnnotationWriter : public AssemblyAnnotationWriter {$/;"	c	file:
OSRs	tools/revng-lift/OSRA.cpp	/^    SmallVector<OSR, 4> OSRs;$/;"	m	struct:OSRA::ComparisonOperand	file:
OSRs	tools/revng-lift/OSRA.cpp	/^  std::map<const Value *, const OSR> &OSRs;$/;"	m	class:OSRA	file:
OSRs	tools/revng-lift/OSRA.h	/^  std::map<const llvm::Value *, const OSR> OSRs;$/;"	m	class:OSRAPass
Obj	include/revng/Support/IRHelpers.h	/^  C Obj;$/;"	m	struct:BlackListTraitBase
Offset	include/revng/Support/MemoryAccess.h	/^  uint64_t Offset;$/;"	m	class:MemoryAccess
Offset	include/revng/Support/revng.h	/^  OffsetType Offset;$/;"	m	class:RelocationDescription
Offset	lib/StackAnalysis/ASSlot.h	/^  int32_t Offset;$/;"	m	class:StackAnalysis::ASSlot
OffsetKind	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  Kind OffsetKind;$/;"	m	class:CSVOffsets
OffsetType	include/revng/Support/revng.h	/^  enum OffsetType { None, Addend, TargetValue };$/;"	g	class:RelocationDescription
OffsetValueStack	tools/revng-lift/VariableManager.cpp	/^class OffsetValueStack {$/;"	c	file:
Offsets	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  OffsetSet Offsets;$/;"	m	class:CSVOffsets
OldHandler	lib/Support/Statistics.cpp	/^  struct sigaction OldHandler;$/;"	m	struct:Handler	typeref:struct:Handler::sigaction	file:
OldM	include/revng/Support/Statistics.h	/^  double OldM, NewM, OldS, NewS;$/;"	m	class:RunningStatistics
OldS	include/revng/Support/Statistics.h	/^  double OldM, NewM, OldS, NewS;$/;"	m	class:RunningStatistics
OnQuitInteraface	include/revng/Support/Statistics.h	/^class OnQuitInteraface {$/;"	c
OnQuitRegistry	include/revng/Support/Statistics.h	/^class OnQuitRegistry {$/;"	c
OnQuitStatistics	lib/Support/Statistics.cpp	/^llvm::ManagedStatic<OnQuitRegistry> OnQuitStatistics;$/;"	v
One	include/revng/ADT/LazySmallBitVector.h	/^  static const uintptr_t One = 1;$/;"	m	class:LazySmallBitVector
OpIndex	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  unsigned OpIndex;$/;"	m	class:TermUse	file:
Opcode	lib/StackAnalysis/ABIIR.h	/^  enum Opcode { Load, Store, DirectCall, IndirectCall };$/;"	g	class:StackAnalysis::ABIIRInstruction
Opcode	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  unsigned Opcode;$/;"	m	class:BinaryTerm	file:
Operands	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  array<Term *, 2> Operands;$/;"	m	class:BinaryTerm	file:
Operations	tools/revng-lift/SET.cpp	/^  std::vector<Instruction *> Operations;$/;"	m	class:OperationsStack	file:
OperationsSet	tools/revng-lift/SET.cpp	/^  std::set<Instruction *> OperationsSet;$/;"	m	class:OperationsStack	file:
OperationsStack	tools/revng-lift/SET.cpp	/^  OperationsStack(JumpTargetManager *JTM,$/;"	f	class:OperationsStack
OperationsStack	tools/revng-lift/SET.cpp	/^class OperationsStack {$/;"	c	file:
Or	tools/revng-lift/OSRA.h	/^      Or \/\/\/< Union of the ranges$/;"	e	enum:OSRAPass::BoundedValue::MergeType
OrMerge	tools/revng-lift/OSRA.cpp	/^const BoundedValue::MergeType OrMerge = BoundedValue::Or;$/;"	v
Origin	tools/revng-lift/BinaryFile.h	/^  LabelOrigin::Values Origin;$/;"	m	class:Label
OriginalAssembly	include/revng/Support/DebugHelper.h	/^  OriginalAssembly,$/;"	e	enum:DebugInfoType::Values
OriginalEndianess	tools/revng-lift/BinaryFile.h	/^  enum Endianess { OriginalEndianess, BigEndian, LittleEndian };$/;"	e	enum:BinaryFile::Endianess
OriginalInstrMDKind	include/revng/Support/DebugHelper.h	/^  unsigned OriginalInstrMDKind;$/;"	m	class:DebugAnnotationWriter
OriginalInstrMDKind	include/revng/Support/DebugHelper.h	/^  unsigned OriginalInstrMDKind;$/;"	m	class:DebugHelper
OriginalInstrMDKind	tools/revng-lift/CodeGenerator.h	/^  unsigned OriginalInstrMDKind;$/;"	m	class:CodeGenerator
OriginalInstructionAddresses	tools/revng-lift/JumpTargetManager.h	/^  InstructionMap OriginalInstructionAddresses;$/;"	m	class:JumpTargetManager
Other	include/revng/ADT/SmallMap.h	/^  SmallMap &operator=(SmallMap &&Other) = default;$/;"	m	class:SmallMap
Other	include/revng/ADT/SmallMap.h	/^  SmallMap &operator=(const SmallMap &Other) = default;$/;"	m	class:SmallMap
Other	include/revng/ADT/SmallMap.h	/^  SmallMap(SmallMap &&Other) = default;$/;"	m	class:SmallMap
Other	lib/StackAnalysis/Element.h	/^  Element &operator=(Element &&Other) = default;$/;"	m	class:StackAnalysis::Intraprocedural::Element
Other	lib/StackAnalysis/Element.h	/^  Element &operator=(const Element &Other) = delete;$/;"	m	class:StackAnalysis::Intraprocedural::Element
Other	lib/StackAnalysis/Element.h	/^  Element(Element &&Other) = default;$/;"	m	class:StackAnalysis::Intraprocedural::Element
Other	lib/StackAnalysis/Element.h	/^  Element(const Element &Other) = delete;$/;"	m	class:StackAnalysis::Intraprocedural::Element
OtherGlobals	tools/revng-lift/VariableManager.h	/^  GlobalsMap OtherGlobals;$/;"	m	class:VariableManager
Out	tools/revng-lift/InstructionTranslator.cpp	/^enum ArgumentType { In, Out, Const };$/;"	e	enum:PTC::ArgumentType	file:
OutAndKnownInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^    OutAndKnownInPtr,$/;"	e	enum:CSVOffsets::Kind
OutAndUnknownInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^    OutAndUnknownInPtr,$/;"	e	enum:CSVOffsets::Kind
OutArguments	tools/revng-lift/InstructionTranslator.cpp	/^  const Range<InstructionArgumentsIterator<Out, IsCall>> OutArguments;$/;"	m	class:PTC::InstructionImpl	file:
OutputPath	include/revng/Support/DebugHelper.h	/^  std::string OutputPath;$/;"	m	class:DebugHelper
OutputPath	tools/revng-lift/CodeGenerator.h	/^  std::string OutputPath;$/;"	m	class:CodeGenerator
PC	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::GlobalVariable *PC;$/;"	m	class:GeneratedCodeBasicInfo
PC	lib/FunctionIsolation/IsolateFunctions.cpp	/^    uint64_t PC;$/;"	m	struct:IsolateFunctionsImpl::IsolatedFunctionDescriptor	file:
PC	lib/FunctionIsolation/IsolateFunctions.cpp	/^  GlobalVariable *PC;$/;"	m	class:IsolateFunctionsImpl	file:
PCBitSize	lib/FunctionIsolation/IsolateFunctions.cpp	/^  const unsigned PCBitSize;$/;"	m	class:IsolateFunctionsImpl	file:
PCIndex	lib/StackAnalysis/Intraprocedural.h	/^  int32_t PCIndex; \/\/\/< Offset of the PC CSV$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
PCMContextIndex	include/revng/Support/revng.h	/^  unsigned PCMContextIndex;$/;"	m	class:Architecture
PCReg	tools/revng-lift/JumpTargetManager.h	/^  llvm::Value *PCReg;$/;"	m	class:JumpTargetManager
PCRegSize	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  unsigned PCRegSize;$/;"	m	class:GeneratedCodeBasicInfo
PCsOnly	tools/revng-lift/SET.cpp	/^    PCsOnly, \/\/\/< Track only values which can be PCs$/;"	e	enum:OperationsStack::TrackingType	file:
PDT	tools/revng-lift/OSRA.cpp	/^  DominatorTreeBase<BasicBlock, \/* IsPostDom = *\/ true> PDT;$/;"	m	class:OSRA	file:
PTC	include/revng/Support/DebugHelper.h	/^  PTC,$/;"	e	enum:DebugInfoType::Values
PTC	tools/revng-lift/InstructionTranslator.cpp	/^namespace PTC {$/;"	n	file:
PTCDUMP_H	tools/revng-lift/PTCDump.h	2;"	d
PTCINTERFACE_H	tools/revng-lift/PTCInterface.h	2;"	d
PTCInstrMDKind	include/revng/Support/DebugHelper.h	/^  unsigned PTCInstrMDKind;$/;"	m	class:DebugAnnotationWriter
PTCInstrMDKind	include/revng/Support/DebugHelper.h	/^  unsigned PTCInstrMDKind;$/;"	m	class:DebugHelper
PTCInstrMDKind	tools/revng-lift/CodeGenerator.h	/^  unsigned PTCInstrMDKind;$/;"	m	class:CodeGenerator
PUSH	runtime/support.c	202;"	d	file:
PUSH	runtime/support.c	78;"	d	file:
PUSH_AUX	runtime/support.c	200;"	d	file:
PUSH_AUX	runtime/support.c	96;"	d	file:
PUSH_REG	runtime/support.c	201;"	d	file:
PUSH_REG	runtime/support.c	90;"	d	file:
PUSH_STR	runtime/support.c	203;"	d	file:
PUSH_STR	runtime/support.c	84;"	d	file:
PlaceholderEnum	include/revng/Support/Debug.h	/^enum PlaceholderEnum {};$/;"	g
Pointer	tools/revng-lift/BinaryFile.h	/^  Pointer() {}$/;"	f	class:Pointer
Pointer	tools/revng-lift/BinaryFile.h	/^  Pointer(bool IsIndirect, uint64_t Value) :$/;"	f	class:Pointer
Pointer	tools/revng-lift/BinaryFile.h	/^class Pointer {$/;"	c
PointerSize	include/revng/Support/revng.h	/^  unsigned PointerSize;$/;"	m	class:Architecture
PostHelper	include/revng/Support/revng.h	/^  PostHelper = 1, \/\/\/< PC after an helper (e.g., a syscall)$/;"	e	enum:JTReason::Values
PostOrder	include/revng/Support/MonotoneFramework.h	/^  PostOrder,$/;"	e	enum:VisitType
PostOrderEntry	include/revng/Support/MonotoneFramework.h	/^    PostOrderEntry(Iterated Entry) : Entry(Entry), Enabled(true) {}$/;"	f	class:MonotoneFrameworkWorkList::PostOrderEntry
PostOrderEntry	include/revng/Support/MonotoneFramework.h	/^  class PostOrderEntry {$/;"	c	class:MonotoneFrameworkWorkList
PostOrderList	include/revng/Support/MonotoneFramework.h	/^  std::vector<PostOrderEntry> PostOrderList;$/;"	m	class:MonotoneFrameworkWorkList
PostOrderListIndex	include/revng/Support/MonotoneFramework.h	/^  std::map<Iterated, size_t> PostOrderListIndex;$/;"	m	class:MonotoneFrameworkWorkList
PostincrementVisitor	include/revng/ADT/SmallMap.h	/^  struct PostincrementVisitor : public boost::static_visitor<Iteratall> {$/;"	s	class:Iteratall
Predecessors	include/revng/BasicAnalyses/CustomCFG.h	/^  links_container Predecessors;$/;"	m	class:CustomCFGNode
Predecessors	lib/StackAnalysis/ABIIR.h	/^  links_container Predecessors;$/;"	m	class:StackAnalysis::ABIIRBasicBlock
Predicate	tools/revng-lift/SimplifyComparisonsPass.h	/^    llvm::CmpInst::Predicate Predicate;$/;"	m	struct:SimplifyComparisonsPass::Comparison
PreincrementVisitor	include/revng/ADT/SmallMap.h	/^  struct PreincrementVisitor : public boost::static_visitor<Iteratall> {$/;"	s	class:Iteratall
ProgramHeaders	tools/revng-lift/BinaryFile.h	/^  } ProgramHeaders;$/;"	m	class:BinaryFile	typeref:struct:BinaryFile::__anon9
PushTemple	tools/revng-lift/JumpTargetManager.h	/^  std::vector<llvm::Instruction *> PushTemple(llvm::Instruction *I){$/;"	f	class:JumpTargetManager
PushTemple	tools/revng-lift/JumpTargetManager.h	/^  std::vector<llvm::Value *> PushTemple(llvm::Value *v){$/;"	f	class:JumpTargetManager
QMD	tools/revng-lift/ExternalJumpsHandler.h	/^  QuickMetadata QMD;$/;"	m	class:ExternalJumpsHandler
QUEUE_H	include/revng/ADT/Queue.h	2;"	d
QemuName	include/revng/Support/revng.h	/^  llvm::StringRef QemuName;$/;"	m	class:ABIRegister
Queue	include/revng/ADT/Queue.h	/^  std::queue<T> Queue;$/;"	m	class:QueueImpl
Queue	include/revng/ADT/UniquedStack.h	/^  std::vector<T> Queue;$/;"	m	class:UniquedStack
Queue	include/revng/Support/MonotoneFramework.h	/^  UniquedQueue<Iterated> Queue;$/;"	m	class:MonotoneFrameworkWorkList
QueueImpl	include/revng/ADT/Queue.h	/^class QueueImpl {$/;"	c
QuickMetadata	include/revng/Support/IRHelpers.h	/^  QuickMetadata(llvm::LLVMContext &Context) :$/;"	f	class:QuickMetadata
QuickMetadata	include/revng/Support/IRHelpers.h	/^class QuickMetadata {$/;"	c
RAI_H	include/revng/Support/RandomAccessIterator.h	2;"	d
RANGE_H	include/revng/Support/Range.h	2;"	d
RAOFC	lib/StackAnalysis/FunctionABI.h	/^  RegisterArgumentsOfFunctionCall RAOFC;$/;"	m	class:StackAnalysis::CallSiteRegisterState
RAOFC	lib/StackAnalysis/FunctionABI.h	/^  RegisterArgumentsOfFunctionCall RAOFC;$/;"	m	class:StackAnalysis::RegisterState
RAX	tools/revng-lift/PTCInterface.h	29;"	d
RBP	tools/revng-lift/PTCInterface.h	34;"	d
RBX	tools/revng-lift/PTCInterface.h	32;"	d
RCX	tools/revng-lift/PTCInterface.h	30;"	d
RDA	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^namespace RDA {$/;"	n
RDA	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^namespace RDA {$/;"	n	file:
RDA	tests/Unit/ReachingDefinitionsPass.cpp	/^namespace RDA {$/;"	n	file:
RDI	tools/revng-lift/PTCInterface.h	36;"	d
RDP	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^  ReachingDefinitionsPass &RDP;$/;"	m	class:ConditionEqualTo	file:
RDP	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^  ReachingDefinitionsPass &RDP;$/;"	m	class:ConditionHash	file:
RDP	tools/revng-lift/OSRA.cpp	/^  ConditionalReachedLoadsPass &RDP;$/;"	m	class:OSRA	file:
RDP	tools/revng-lift/SimplifyComparisonsPass.h	/^  ReachingDefinitionsPass *RDP;$/;"	m	class:SimplifyComparisonsPass
RDX	tools/revng-lift/PTCInterface.h	31;"	d
REACHINGDEFINITIONSANALYSISIMPL_H	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	2;"	d
REACHINGDEFINITIONSPASS_H	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	2;"	d
REGISTER_FS	runtime/support.h	/^  REGISTER_FS = 0x8370,$/;"	e	enum:__anon4
REGISTER_R12	runtime/support.h	/^  REGISTER_R12 = 0x82b0,$/;"	e	enum:__anon4
REGISTER_R13	runtime/support.h	/^  REGISTER_R13 = 0x82b8,$/;"	e	enum:__anon4
REGISTER_R14	runtime/support.h	/^  REGISTER_R14 = 0x82c0,$/;"	e	enum:__anon4
REGISTER_R15	runtime/support.h	/^  REGISTER_R15 = 0x82c8,$/;"	e	enum:__anon4
REGISTER_R8	runtime/support.h	/^  REGISTER_R8 = 0x8290,$/;"	e	enum:__anon4
REGISTER_R9	runtime/support.h	/^  REGISTER_R9 = 0x8298,$/;"	e	enum:__anon4
REGISTER_RAX	runtime/support.h	/^  REGISTER_RAX = 0x8250,$/;"	e	enum:__anon4
REGISTER_RBP	runtime/support.h	/^  REGISTER_RBP = 0x8278,$/;"	e	enum:__anon4
REGISTER_RBX	runtime/support.h	/^  REGISTER_RBX = 0x8268,$/;"	e	enum:__anon4
REGISTER_RCX	runtime/support.h	/^  REGISTER_RCX = 0x8258,$/;"	e	enum:__anon4
REGISTER_RDI	runtime/support.h	/^  REGISTER_RDI = 0x8288,$/;"	e	enum:__anon4
REGISTER_RDX	runtime/support.h	/^  REGISTER_RDX = 0x8260,$/;"	e	enum:__anon4
REGISTER_RSI	runtime/support.h	/^  REGISTER_RSI = 0x8280,$/;"	e	enum:__anon4
REGISTER_RSP	runtime/support.h	/^  REGISTER_RSP = 0x8270,$/;"	e	enum:__anon4
REGISTER_XMM0	runtime/support.h	/^  REGISTER_XMM0 = 0x8558,$/;"	e	enum:__anon4
REGISTER_XMM1	runtime/support.h	/^  REGISTER_XMM1 = 0x8598,$/;"	e	enum:__anon4
REGISTER_XMM2	runtime/support.h	/^  REGISTER_XMM2 = 0x85d8,$/;"	e	enum:__anon4
REGISTER_XMM3	runtime/support.h	/^  REGISTER_XMM3 = 0x8618,$/;"	e	enum:__anon4
REGISTER_XMM4	runtime/support.h	/^  REGISTER_XMM4 = 0x8658,$/;"	e	enum:__anon4
REGISTER_XMM5	runtime/support.h	/^  REGISTER_XMM5 = 0x8698,$/;"	e	enum:__anon4
REGISTER_XMM6	runtime/support.h	/^  REGISTER_XMM6 = 0x86d8,$/;"	e	enum:__anon4
REGISTER_XMM7	runtime/support.h	/^  REGISTER_XMM7 = 0x8718$/;"	e	enum:__anon4
REVAMB_H	include/revng/Support/revng.h	2;"	d
REVNG_ABORT_0	include/revng/Support/Assert.h	174;"	d
REVNG_ABORT_1	include/revng/Support/Assert.h	175;"	d
REVNG_ASSERT_H	include/revng/Support/Assert.h	2;"	d
REVNG_UNREACHABLE_0	include/revng/Support/Assert.h	179;"	d
REVNG_UNREACHABLE_1	include/revng/Support/Assert.h	180;"	d
RHS	tools/revng-lift/SimplifyComparisonsPass.h	/^    llvm::Value *RHS;$/;"	m	struct:SimplifyComparisonsPass::Comparison
ROA	lib/StackAnalysis/ASSlot.h	250;"	d
RSI	tools/revng-lift/PTCInterface.h	35;"	d
RSP	tools/revng-lift/PTCInterface.h	33;"	d
R_EAX	tools/revng-lift/PTCInterface.h	38;"	d
R_EBP	tools/revng-lift/PTCInterface.h	43;"	d
R_EBX	tools/revng-lift/PTCInterface.h	41;"	d
R_ECX	tools/revng-lift/PTCInterface.h	39;"	d
R_EDI	tools/revng-lift/PTCInterface.h	45;"	d
R_EDX	tools/revng-lift/PTCInterface.h	40;"	d
R_ESI	tools/revng-lift/PTCInterface.h	44;"	d
R_ESP	tools/revng-lift/PTCInterface.h	42;"	d
R_MIPS_IMPLICIT_RELATIVE	tools/revng-lift/BinaryFile.cpp	/^const unsigned char R_MIPS_IMPLICIT_RELATIVE = 255;$/;"	v
RaiseException	lib/FunctionIsolation/IsolateFunctions.cpp	/^  Function *RaiseException;$/;"	m	class:IsolateFunctionsImpl	file:
RandomAccessIterator	include/revng/Support/RandomAccessIterator.h	/^  RandomAccessIterator() : Index(0) {}$/;"	f	class:RandomAccessIterator
RandomAccessIterator	include/revng/Support/RandomAccessIterator.h	/^  RandomAccessIterator(const type &r) : Index(r.Index) {}$/;"	f	class:RandomAccessIterator
RandomAccessIterator	include/revng/Support/RandomAccessIterator.h	/^  RandomAccessIterator(unsigned Index) : Index(Index) {}$/;"	f	class:RandomAccessIterator
RandomAccessIterator	include/revng/Support/RandomAccessIterator.h	/^class RandomAccessIterator$/;"	c
Range	include/revng/Support/Range.h	/^  Range(ContainerT &&Container) :$/;"	f	class:Range
Range	include/revng/Support/Range.h	/^  Range(Iterator Begin, Iterator End) : Begin(Begin), End(End) {}$/;"	f	class:Range
Range	include/revng/Support/Range.h	/^class Range {$/;"	c
ReachableFunctions	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const ConstFunctionPtrSet &ReachableFunctions;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
Reacher	tools/revng-lift/OSRA.cpp	/^  Reacher(LoadInst *Reached, Instruction *Reacher, OSR &ReachingOSR) :$/;"	f	class:Reacher
Reacher	tools/revng-lift/OSRA.cpp	/^class Reacher {$/;"	c	file:
ReachingDefinitions	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  std::map<llvm::LoadInst *, ReachingDefinitionsVector> ReachingDefinitions;$/;"	m	class:ConditionalReachedLoadsPass
ReachingDefinitions	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  std::map<llvm::LoadInst *, ReachingDefinitionsVector> ReachingDefinitions;$/;"	m	class:ReachingDefinitionsPass
ReachingDefinitionsPass	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  ReachingDefinitionsPass() : llvm::ModulePass(ID){};$/;"	f	class:ReachingDefinitionsPass
ReachingDefinitionsPass	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  ReachingDefinitionsPass(char &ID) : llvm::ModulePass(ID){};$/;"	f	class:ReachingDefinitionsPass
ReachingDefinitionsPass	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^class ReachingDefinitionsPass : public llvm::ModulePass {$/;"	c
ReachingOSR	tools/revng-lift/OSRA.cpp	/^  OSR &ReachingOSR;$/;"	m	class:Reacher	file:
ReadIntervalSet	tools/revng-lift/JumpTargetManager.h	/^  interval_set ReadIntervalSet;$/;"	m	class:JumpTargetManager
ReadRegisterAsm	include/revng/Support/revng.h	/^  llvm::StringRef ReadRegisterAsm;$/;"	m	class:Architecture
Reason	include/revng/Runtime/commonconstants.h	/^} Reason;$/;"	t	typeref:enum:__anon5
Reason	lib/StackAnalysis/FunctionABI.cpp	/^  enum Reason { Regular, Return, NoReturn, Summary };$/;"	g	class:StackAnalysis::ABIAnalysis::Interrupt	file:
Reason	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  enum Reason { Regular, Return, SpecialStart, NoReturn, Summary };$/;"	g	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt	file:
Reasons	tools/revng-lift/JumpTargetManager.h	/^    uint32_t Reasons;$/;"	m	class:JumpTargetManager::JumpTarget
RecoveredOnlyCFG	tools/revng-lift/JumpTargetManager.h	/^  RecoveredOnlyCFG,$/;"	e	enum:CFGForm::Values
Register	include/revng/Support/Statistics.h	/^  std::vector<OnQuitInteraface *> Register;$/;"	m	class:OnQuitRegistry
RegisterAnalyses	lib/StackAnalysis/FunctionABI.cpp	/^  DefaultMap<int32_t, AWF, 20> RegisterAnalyses;$/;"	m	class:StackAnalysis::ABIAnalysis::Element	file:
RegisterAnalyses	lib/StackAnalysis/FunctionABI.h	/^  DefaultMap<int32_t, RegisterState, 20> RegisterAnalyses;$/;"	m	class:StackAnalysis::FunctionABI
RegisterAndOffset	include/revng/Support/MemoryAccess.h	/^  enum { Invalid, CPUState, RegisterAndOffset, Absolute } Type;$/;"	e	enum:MemoryAccess::__anon6
RegisterArgument	include/revng/StackAnalysis/FunctionsSummary.h	/^  RegisterArgument() : Value(Maybe) {}$/;"	f	class:StackAnalysis::RegisterArgument
RegisterArgument	include/revng/StackAnalysis/FunctionsSummary.h	/^class RegisterArgument {$/;"	c	namespace:StackAnalysis
RegisterSlots	include/revng/StackAnalysis/FunctionsSummary.h	/^    std::map<llvm::GlobalVariable *, FunctionRegisterDescription> RegisterSlots;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionDescription
RegisterState	lib/StackAnalysis/FunctionABI.h	/^class RegisterState {$/;"	c	namespace:StackAnalysis
RegisterType	tools/revng-lift/ExternalJumpsHandler.h	/^  llvm::Type *RegisterType;$/;"	m	class:ExternalJumpsHandler
RegisteredSyscalls	tools/revng-lift/NoReturnAnalysis.h	/^  std::set<llvm::CallInst *> RegisteredSyscalls;$/;"	m	class:NoReturnAnalysis
Registers	lib/StackAnalysis/FunctionABI.h	/^    DefaultMap<int32_t, CallSiteRegisterState, 20> Registers;$/;"	m	struct:StackAnalysis::FunctionABI::CallsAnalyses
Regular	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  enum InterruptType { Regular, Summary, NoReturn };$/;"	e	enum:RDA::Interrupt::InterruptType
Regular	include/revng/StackAnalysis/FunctionsSummary.h	/^  Regular, \/\/\/< A normal function$/;"	e	enum:StackAnalysis::FunctionType::Values
Regular	lib/StackAnalysis/FunctionABI.cpp	/^  enum Reason { Regular, Return, NoReturn, Summary };$/;"	e	enum:StackAnalysis::ABIAnalysis::Interrupt::Reason	file:
Regular	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  enum Reason { Regular, Return, SpecialStart, NoReturn, Summary };$/;"	e	enum:StackAnalysis::IncoherentCallsAnalysis::Interrupt::Reason	file:
Regular	tests/Unit/ReachingDefinitionsPass.cpp	/^enum TestType { Regular, Conditional, Both };$/;"	e	enum:TestType	file:
RegularExtremals	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  std::set<ABIIRBasicBlock *> RegularExtremals;$/;"	m	class:StackAnalysis::IncoherentCallsAnalysis::Analysis	file:
RelatedBasicBlocks	lib/StackAnalysis/Intraprocedural.h	/^  vector RelatedBasicBlocks;$/;"	m	class:StackAnalysis::Intraprocedural::Interrupt
RelocationDescription	include/revng/Support/revng.h	/^  RelocationDescription() : Type(Invalid), Offset(None) {}$/;"	f	class:RelocationDescription
RelocationDescription	include/revng/Support/revng.h	/^  RelocationDescription(RelocationType Type) : Type(Type), Offset(None) {}$/;"	f	class:RelocationDescription
RelocationDescription	include/revng/Support/revng.h	/^  RelocationDescription(RelocationType Type, OffsetType Offset) :$/;"	f	class:RelocationDescription
RelocationDescription	include/revng/Support/revng.h	/^class RelocationDescription {$/;"	c
RelocationHelper	tools/revng-lift/BinaryFile.cpp	/^struct RelocationHelper {$/;"	s	file:
RelocationHelper	tools/revng-lift/BinaryFile.cpp	/^struct RelocationHelper<T, false> {$/;"	s	file:
RelocationHelper	tools/revng-lift/BinaryFile.cpp	/^struct RelocationHelper<T, true> {$/;"	s	file:
RelocationType	include/revng/Support/revng.h	/^  enum RelocationType { Invalid, BaseRelative, LabelOnly, SymbolRelative };$/;"	g	class:RelocationDescription
RelocationTypes	include/revng/Support/revng.h	/^  RelocationTypesMap RelocationTypes;$/;"	m	class:Architecture
ResetColors	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  std::map<BasicBlock *, llvm::SmallVector<int32_t, 4>> ResetColors;$/;"	m	class:ConditionNumberingPass
Restore	lib/Support/Statistics.cpp	/^  bool Restore;$/;"	m	struct:Handler	file:
Result	lib/StackAnalysis/FunctionABI.cpp	/^  Element<E> Result;$/;"	m	class:StackAnalysis::ABIAnalysis::Interrupt	file:
Result	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  Element Result;$/;"	m	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt	file:
Result	lib/StackAnalysis/Intraprocedural.h	/^  Element Result;$/;"	m	class:StackAnalysis::Intraprocedural::Interrupt
ResultExtracted	lib/StackAnalysis/Intraprocedural.h	/^  bool ResultExtracted;$/;"	m	class:StackAnalysis::Intraprocedural::Interrupt
Results	lib/StackAnalysis/Cache.h	/^  std::map<llvm::BasicBlock *, IntraproceduralFunctionSummary> Results;$/;"	m	class:StackAnalysis::Cache
ResultsPool	lib/StackAnalysis/InterproceduralAnalysis.h	/^class ResultsPool {$/;"	c	namespace:StackAnalysis
Return	include/revng/StackAnalysis/FunctionsSummary.h	/^  Return,$/;"	e	enum:StackAnalysis::BranchType::Values
Return	lib/StackAnalysis/FunctionABI.cpp	/^  enum Reason { Regular, Return, NoReturn, Summary };$/;"	e	enum:StackAnalysis::ABIAnalysis::Interrupt::Reason	file:
Return	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  enum Reason { Regular, Return, SpecialStart, NoReturn, Summary };$/;"	e	enum:StackAnalysis::IncoherentCallsAnalysis::Interrupt::Reason	file:
ReturnAddress	include/revng/Support/revng.h	/^  ReturnAddress = 1024, \/\/\/< Obtained as the fallthrough of a function call$/;"	e	enum:JTReason::Values
ReturnAddressSlot	lib/StackAnalysis/Intraprocedural.h	/^  ASSlot ReturnAddressSlot; \/\/\/< Slot that contains the return address$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
ReturnValue	include/revng/StackAnalysis/FunctionsSummary.h	/^    FunctionCallReturnValue ReturnValue;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionCallRegisterDescription
ReturnValue	include/revng/StackAnalysis/FunctionsSummary.h	/^    FunctionReturnValue ReturnValue;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionRegisterDescription
ReversePostOrder	include/revng/Support/MonotoneFramework.h	/^  ReversePostOrder$/;"	e	enum:VisitType
RootFunction	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::Function *RootFunction;$/;"	m	class:GeneratedCodeBasicInfo
RootFunction	lib/FunctionIsolation/IsolateFunctions.cpp	/^  Function *RootFunction;$/;"	m	class:IsolateFunctionsImpl	file:
RootFunction	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const Function *RootFunction;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
RunningStatistics	include/revng/Support/Statistics.h	/^  RunningStatistics() : RunningStatistics(llvm::Twine(), false) {}$/;"	f	class:RunningStatistics
RunningStatistics	include/revng/Support/Statistics.h	/^  RunningStatistics(const llvm::Twine &Name) : RunningStatistics(Name, true) {}$/;"	f	class:RunningStatistics
RunningStatistics	include/revng/Support/Statistics.h	/^  RunningStatistics(const llvm::Twine &Name, bool Register) :$/;"	f	class:RunningStatistics
RunningStatistics	include/revng/Support/Statistics.h	/^class RunningStatistics : public OnQuitInteraface {$/;"	c
SA	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  const StackAnalysis::StackAnalysis<false> *SA;$/;"	m	class:RDA::Analysis
SAFE_CAST	runtime/support.c	48;"	d	file:
SCP	tools/revng-lift/OSRA.cpp	/^  SimplifyComparisonsPass &SCP;$/;"	m	class:OSRA	file:
SET	tools/revng-lift/SET.cpp	/^  SET(Function &F,$/;"	f	class:SET
SET	tools/revng-lift/SET.cpp	/^class SET {$/;"	c	file:
SETNotToPC	include/revng/Support/revng.h	/^  SETNotToPC = 32, \/\/\/< Obtained from SET (but not from a PC-store)$/;"	e	enum:JTReason::Values
SETPass	tools/revng-lift/SET.h	/^  SETPass() :$/;"	f	class:SETPass
SETPass	tools/revng-lift/SET.h	/^  SETPass(JumpTargetManager *JTM,$/;"	f	class:SETPass
SETPass	tools/revng-lift/SET.h	/^class SETPass : public llvm::ModulePass {$/;"	c
SETToPC	include/revng/Support/revng.h	/^  SETToPC = 16, \/\/\/< Obtained from SET on a store to the PC$/;"	e	enum:JTReason::Values
SET_H	tools/revng-lift/SET.h	2;"	d
SILENCE_ASSUME_FOOTER	include/revng/Support/Assert.h	40;"	d
SILENCE_ASSUME_FOOTER	include/revng/Support/Assert.h	45;"	d
SILENCE_ASSUME_HEADER	include/revng/Support/Assert.h	36;"	d
SILENCE_ASSUME_HEADER	include/revng/Support/Assert.h	44;"	d
SIMPLIFYCOMPARISON_H	tools/revng-lift/SimplifyComparisonsPass.h	2;"	d
SMALLMAP_H	include/revng/ADT/SmallMap.h	2;"	d
SP	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::GlobalVariable *SP;$/;"	m	class:GeneratedCodeBasicInfo
SP0	tests/Unit/stackanalysis.cpp	/^const ASID SP0 = ASID::stackID();$/;"	v
SPIndex	lib/StackAnalysis/Intraprocedural.h	/^  int32_t SPIndex; \/\/\/< Offset of the stack pointer CSV$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
STACKANALYSIS_H	include/revng/StackAnalysis/StackAnalysis.h	2;"	d
STATISTICS_H	include/revng/Support/Statistics.h	2;"	d
SUBGRAPH_H	tools/revng-lift/SubGraph.h	2;"	d
SUPPORT_H	runtime/support.h	2;"	d
SWAP	runtime/support.h	20;"	d
SWAP	runtime/support.h	26;"	d
SWAP	runtime/support.h	61;"	d
SWAP	runtime/support.h	67;"	d
SWAP	runtime/support.h	73;"	d
SWAP	runtime/support.h	79;"	d
SamePC	tools/revng-lift/JumpTargetManager.cpp	/^  std::queue<BasicBlock *> SamePC;$/;"	m	class:BasicBlockVisitor	file:
ScopedDebugFeature	include/revng/Support/Debug.h	/^  ScopedDebugFeature(std::string Name, bool Enable) :$/;"	f	class:ScopedDebugFeature
ScopedDebugFeature	include/revng/Support/Debug.h	/^class ScopedDebugFeature {$/;"	c
Section	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, Code, Data, Section, File };$/;"	e	enum:SymbolType::Values
Seen	tools/revng-lift/VariableManager.cpp	/^  std::set<OffsetValuePair> Seen;$/;"	m	class:OffsetValueStack	file:
SegmentInfo	tools/revng-lift/BinaryFile.h	/^struct SegmentInfo {$/;"	s
Segments	tools/revng-lift/BinaryFile.h	/^  std::vector<SegmentInfo> Segments;$/;"	m	class:BinaryFile
SemanticPreservingCFG	tools/revng-lift/JumpTargetManager.h	/^  SemanticPreservingCFG,$/;"	e	enum:CFGForm::Values
Sentinel	tests/Unit/classsentinel.cpp	/^  ClassSentinel Sentinel;$/;"	m	struct:TestClass	file:
Set	include/revng/ADT/Queue.h	/^  std::set<T> Set;$/;"	m	class:QueueImpl
Set	include/revng/ADT/UniquedStack.h	/^  std::set<T> Set;$/;"	m	class:UniquedStack
Set	include/revng/Support/MonotoneFramework.h	/^  std::set<T> Set;$/;"	m	class:MonotoneFrameworkSet
SetsSyscallNumber	tools/revng-lift/SET.cpp	/^  bool SetsSyscallNumber;$/;"	m	class:OperationsStack	file:
Sign	tools/revng-lift/OSRA.h	/^    Signedness Sign;$/;"	m	class:OSRAPass::BoundedValue
Signal	lib/Support/Statistics.cpp	/^  int Signal;$/;"	m	struct:Handler	file:
SimpleLiteral	include/revng/Support/revng.h	/^  SimpleLiteral = 4096, \/\/\/< Immediate value found before SET$/;"	e	enum:JTReason::Values
SimpleLiterals	tools/revng-lift/JumpTargetManager.h	/^  std::set<uint64_t> SimpleLiterals;$/;"	m	class:JumpTargetManager
SimplifiedComparisons	tools/revng-lift/SimplifyComparisonsPass.h	/^  std::unordered_map<llvm::CmpInst *, Comparison> SimplifiedComparisons;$/;"	m	class:SimplifyComparisonsPass
SimplifyComparisonsPass	tools/revng-lift/SimplifyComparisonsPass.h	/^  SimplifyComparisonsPass() : llvm::ModulePass(ID) {}$/;"	f	class:SimplifyComparisonsPass
SimplifyComparisonsPass	tools/revng-lift/SimplifyComparisonsPass.h	/^class SimplifyComparisonsPass : public llvm::ModulePass {$/;"	c
Size	include/revng/ADT/SmallMap.h	/^  unsigned Size; \/\/\/< Size of Vector$/;"	m	class:SmallMap
Size	include/revng/Support/MemoryAccess.h	/^  uint64_t Size;$/;"	m	class:MemoryAccess
Size	tools/revng-lift/BinaryFile.cpp	/^  uint64_t Size;$/;"	m	class:FilePortion	file:
Size	tools/revng-lift/BinaryFile.h	/^    unsigned Size;$/;"	m	struct:BinaryFile::__anon9
Size	tools/revng-lift/BinaryFile.h	/^  uint64_t Size;$/;"	m	class:Label
SizeIsVirtual	tools/revng-lift/BinaryFile.h	/^  bool SizeIsVirtual;$/;"	m	class:Label
SizeOfEnv	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  Constant *SizeOfEnv;$/;"	m	class:CPUStateAccessAnalysis	file:
SmallMap	include/revng/ADT/SmallMap.h	/^  SmallMap() : IsSorted(true), Size(0) {}$/;"	f	class:SmallMap
SmallMap	include/revng/ADT/SmallMap.h	/^class SmallMap {$/;"	c
SourceArchitecture	tools/revng-lift/InstructionTranslator.h	/^  const Architecture &SourceArchitecture;$/;"	m	class:InstructionTranslator
SourceArchitecture	tools/revng-lift/NoReturnAnalysis.h	/^  Architecture SourceArchitecture;$/;"	m	class:NoReturnAnalysis
SourceIndex	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  size_type SourceIndex;$/;"	m	class:WorkItem	file:
Sources	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  SmallVector<const Use *, 3> Sources;$/;"	m	class:WorkItem	file:
SpecialStart	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  enum Reason { Regular, Return, SpecialStart, NoReturn, Summary };$/;"	e	enum:StackAnalysis::IncoherentCallsAnalysis::Interrupt::Reason	file:
Stack	tools/revng-lift/VariableManager.cpp	/^  std::vector<OffsetValuePair> Stack;$/;"	m	class:OffsetValueStack	file:
StackAnalysis	include/revng/StackAnalysis/ABIDetectionPass.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	include/revng/StackAnalysis/FunctionBoundariesDetectionPass.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	include/revng/StackAnalysis/FunctionsSummary.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	include/revng/StackAnalysis/StackAnalysis.h	/^  StackAnalysis() : llvm::ModulePass(ID) {}$/;"	f	class:StackAnalysis::StackAnalysis
StackAnalysis	include/revng/StackAnalysis/StackAnalysis.h	/^class StackAnalysis : public llvm::ModulePass {$/;"	c	namespace:StackAnalysis
StackAnalysis	include/revng/StackAnalysis/StackAnalysis.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/ABIDetectionPass.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/ABIIR.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/ABIIR.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/ASSlot.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/BasicBlockInstructionPair.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/Cache.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/Cache.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/Element.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/Element.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/FunctionABI.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/FunctionABI.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/FunctionBoundariesDetectionPass.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/FunctionsSummary.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/InterproceduralAnalysis.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/Intraprocedural.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackAnalysis	lib/StackAnalysis/Intraprocedural.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^namespace StackAnalysis {$/;"	n
StackAnalysis	lib/StackAnalysis/StackAnalysis.cpp	/^namespace StackAnalysis {$/;"	n	file:
StackPointerRegister	include/revng/Support/revng.h	/^  llvm::StringRef StackPointerRegister;$/;"	m	class:Architecture
StackTrace	include/revng/Support/ClassSentinel.h	/^class StackTrace {$/;"	c
StandardNonTranslatedBlock	include/revng/Runtime/commonconstants.h	/^  StandardNonTranslatedBlock, \/\/\/< Unexpected control flow at the$/;"	e	enum:__anon5
StandardTranslatedBlock	include/revng/Runtime/commonconstants.h	/^  StandardTranslatedBlock, \/\/\/< Unexpected control flow at the end$/;"	e	enum:__anon5
Start	tools/revng-lift/BinaryFile.cpp	/^  const uint8_t *Start;$/;"	m	class:DwarfReader	file:
StartVirtualAddress	tools/revng-lift/BinaryFile.h	/^  uint64_t StartVirtualAddress;$/;"	m	struct:SegmentInfo
State	include/revng/Support/MonotoneFramework.h	/^  std::map<Label, LatticeElement> State;$/;"	m	class:MonotoneFramework
State	lib/StackAnalysis/Element.h	/^  Container State;$/;"	m	class:StackAnalysis::Intraprocedural::Element
StaticSymbol	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, StaticSymbol, DynamicSymbol, DynamicRelocation };$/;"	e	enum:LabelOrigin::Values
Stop	tools/revng-lift/InstructionTranslator.h	/^    Stop, \/\/\/< Do not proceed with translation$/;"	e	enum:InstructionTranslator::TranslationResult
StopNow	include/revng/Support/IRHelpers.h	/^  StopNow \/\/\/< Interrupt immediately the visit$/;"	e	enum:VisitAction
Storage	include/revng/ADT/LazySmallBitVector.h	/^    uintptr_t Storage[1];$/;"	m	struct:LazySmallBitVector::LargeStorage
Storage	include/revng/ADT/LazySmallBitVector.h	/^  uintptr_t Storage;$/;"	m	class:LazySmallBitVector
Store	lib/StackAnalysis/ABIIR.h	/^  enum Opcode { Load, Store, DirectCall, IndirectCall };$/;"	e	enum:StackAnalysis::ABIIRInstruction::Opcode
StoreCallSiteOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  ValueCallSiteOffsetMap StoreCallSiteOffsets;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
StoreOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  AccessOffsetMap &StoreOffsets; \/\/ result, maps store or store-memcpy to$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
StrToInt	tools/revng-lift/JumpTargetManager.cpp	/^unsigned int JumpTargetManager::StrToInt(const char *str){$/;"	f	class:JumpTargetManager
Stream	include/revng/Support/Debug.h	/^  O &Stream;$/;"	m	class:StreamWrapper
StreamWrapper	include/revng/Support/Debug.h	/^  StreamWrapper(O &Stream) : Stream(Stream) {}$/;"	f	class:StreamWrapper
StreamWrapper	include/revng/Support/Debug.h	/^class StreamWrapper : public StreamWrapperBase {$/;"	c
StreamWrapperBase	include/revng/Support/Debug.h	/^class StreamWrapperBase {$/;"	c
SubGraph	tools/revng-lift/SubGraph.h	/^  SubGraph(InnerNodeType Entry, const std::set<InnerNodeType> WhiteList) {$/;"	f	class:SubGraph
SubGraph	tools/revng-lift/SubGraph.h	/^class SubGraph {$/;"	c
Success	tools/revng-lift/InstructionTranslator.h	/^    Success, \/\/\/< The translation was successful$/;"	e	enum:InstructionTranslator::TranslationResult
Successors	include/revng/BasicAnalyses/CustomCFG.h	/^  links_container Successors;$/;"	m	class:CustomCFGNode
Successors	lib/StackAnalysis/ABIIR.h	/^  links_container Successors;$/;"	m	class:StackAnalysis::ABIIRBasicBlock
SuccessorsMap	include/revng/Support/MonotoneFramework.h	/^  std::map<Label, llvm::SmallVector<Label, 2>> SuccessorsMap;$/;"	m	class:MonotoneFramework
SumJump	include/revng/Support/revng.h	/^  SumJump = 256, \/\/\/< Obtained from the "sumjump" heuristic$/;"	e	enum:JTReason::Values
Summary	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  enum InterruptType { Regular, Summary, NoReturn };$/;"	e	enum:RDA::Interrupt::InterruptType
Summary	lib/StackAnalysis/FunctionABI.cpp	/^  enum Reason { Regular, Return, NoReturn, Summary };$/;"	e	enum:StackAnalysis::ABIAnalysis::Interrupt::Reason	file:
Summary	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  enum Reason { Regular, Return, SpecialStart, NoReturn, Summary };$/;"	e	enum:StackAnalysis::IncoherentCallsAnalysis::Interrupt::Reason	file:
Summary	lib/StackAnalysis/Intraprocedural.h	/^  IntraproceduralFunctionSummary Summary;$/;"	m	class:StackAnalysis::Intraprocedural::Interrupt
Summary	tools/revng-lift/OSRA.cpp	/^    BoundedValue Summary;$/;"	m	struct:BVMap::MapValue	file:
Summary	tools/revng-lift/OSRA.cpp	/^  BoundedValue Summary; \/\/\/< BV representing the known constraints on the$/;"	m	class:Reacher	file:
Symbol	tools/revng-lift/BinaryFile.h	/^  Symbol$/;"	e	enum:LabelType::Values
SymbolName	tools/revng-lift/BinaryFile.h	/^  llvm::StringRef SymbolName;$/;"	m	class:Label
SymbolName	tools/revng-lift/SET.cpp	/^  Optional<StringRef> SymbolName;$/;"	m	class:MaterializedValue	file:
SymbolRelative	include/revng/Support/revng.h	/^  enum RelocationType { Invalid, BaseRelative, LabelOnly, SymbolRelative };$/;"	e	enum:RelocationDescription::RelocationType
SymbolRelativeValue	tools/revng-lift/BinaryFile.h	/^  SymbolRelativeValue,$/;"	e	enum:LabelType::Values
SymbolType	tools/revng-lift/BinaryFile.h	/^  SymbolType::Values SymbolType;$/;"	m	class:Label
SymbolType	tools/revng-lift/BinaryFile.h	/^namespace SymbolType {$/;"	n
SyscallHelper	include/revng/Support/revng.h	/^  llvm::StringRef SyscallHelper;$/;"	m	class:Architecture
SyscallNumberRegister	include/revng/Support/revng.h	/^  llvm::StringRef SyscallNumberRegister;$/;"	m	class:Architecture
SyscallRegisterDefinitions	tools/revng-lift/NoReturnAnalysis.h	/^  std::set<llvm::StoreInst *> SyscallRegisterDefinitions;$/;"	m	class:NoReturnAnalysis
SyscallRegisterReads	tools/revng-lift/NoReturnAnalysis.h	/^  std::vector<llvm::LoadInst *> SyscallRegisterReads;$/;"	m	class:NoReturnAnalysis
T	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  BinaryTerm *T;$/;"	m	class:TermUse	file:
TARGET_REG_FORMAT	runtime/support.h	21;"	d
TARGET_REG_FORMAT	runtime/support.h	27;"	d
TARGET_REG_FORMAT	runtime/support.h	62;"	d
TARGET_REG_FORMAT	runtime/support.h	68;"	d
TARGET_REG_FORMAT	runtime/support.h	74;"	d
TARGET_REG_FORMAT	runtime/support.h	80;"	d
TRANSFORMADAPTER_H	include/revng/Support/Transform.h	2;"	d
TaintLog	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static auto TaintLog = Logger<>("cpustate-taint-analysis");$/;"	v	file:
TaintResults	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^struct TaintResults {$/;"	s	file:
TaintedAccesses	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const TaintResults &TaintedAccesses;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
TaintedLoads	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  InstrPtrSet TaintedLoads;$/;"	m	struct:TaintResults	file:
TaintedStores	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  InstrPtrSet TaintedStores;$/;"	m	struct:TaintResults	file:
TaintedValues	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  ConstValuePtrSet TaintedValues;$/;"	m	struct:TaintResults	file:
Target	lib/StackAnalysis/ABIIR.h	/^  const ASSlot Target;$/;"	m	class:StackAnalysis::ABIIRInstruction
Target	tools/revng-lift/SET.cpp	/^  Instruction *Target;$/;"	m	class:OperationsStack	file:
TargetArchitecture	tools/revng-lift/CodeGenerator.h	/^  Architecture TargetArchitecture;$/;"	m	class:CodeGenerator
TargetArchitecture	tools/revng-lift/InstructionTranslator.h	/^  const Architecture &TargetArchitecture;$/;"	m	class:InstructionTranslator
TargetArchitecture	tools/revng-lift/VariableManager.h	/^  Architecture &TargetArchitecture;$/;"	m	class:VariableManager
TargetValue	include/revng/Support/revng.h	/^  enum OffsetType { None, Addend, TargetValue };$/;"	e	enum:RelocationDescription::OffsetType
Temporaries	tools/revng-lift/VariableManager.h	/^  TemporariesMap Temporaries;$/;"	m	class:VariableManager
Term	tools/revng-lift/SimplifyComparisonsPass.cpp	/^class Term {$/;"	c	file:
TermUse	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  TermUse() : T(nullptr), OpIndex(0) {}$/;"	f	class:TermUse
TermUse	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  TermUse(BinaryTerm *Op, unsigned OpIndex) : T(Op), OpIndex(OpIndex) {}$/;"	f	class:TermUse
TermUse	tools/revng-lift/SimplifyComparisonsPass.cpp	/^class TermUse {$/;"	c	file:
TestClass	tests/Unit/classsentinel.cpp	/^struct TestClass {$/;"	s	file:
TestType	tests/Unit/ReachingDefinitionsPass.cpp	/^enum TestType { Regular, Conditional, Both };$/;"	g	file:
TextRepresentation	include/revng/StackAnalysis/StackAnalysis.h	/^  std::string TextRepresentation;$/;"	m	class:StackAnalysis::StackAnalysis
TheABIIR	lib/StackAnalysis/Intraprocedural.h	/^  ABIFunction TheABIIR; \/\/\/< The ABI IR$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
TheArchitecture	tools/revng-lift/BinaryFile.h	/^  Architecture TheArchitecture;$/;"	m	class:BinaryFile
TheBinary	tools/revng-lift/ExternalJumpsHandler.h	/^  BinaryFile &TheBinary;$/;"	m	class:ExternalJumpsHandler
TheBlackList	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  BlackListTrait<const BlackList &, llvm::BasicBlock *> TheBlackList;$/;"	m	class:RDA::Analysis
TheBounds	tools/revng-lift/OSRA.h	/^      llvm::SmallVector<std::pair<uint64_t, uint64_t>, 3> TheBounds;$/;"	m	class:OSRAPass::OSR::Bounds
TheCache	lib/StackAnalysis/InterproceduralAnalysis.h	/^  Cache &TheCache;$/;"	m	class:StackAnalysis::InterproceduralAnalysis
TheCache	lib/StackAnalysis/Intraprocedural.h	/^  const Cache *TheCache; \/\/\/< Reference to the Cache (for query purposes)$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
TheColorsProvider	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  const ColorsProvider &TheColorsProvider;$/;"	m	class:RDA::Analysis
TheFunction	tools/revng-lift/ExternalJumpsHandler.h	/^  llvm::Function &TheFunction;$/;"	m	class:ExternalJumpsHandler
TheFunction	tools/revng-lift/InstructionTranslator.h	/^  llvm::Function *TheFunction;$/;"	m	class:InstructionTranslator
TheFunction	tools/revng-lift/JumpTargetManager.h	/^  llvm::Function *TheFunction;$/;"	m	class:JumpTargetManager
TheInstruction	tools/revng-lift/InstructionTranslator.cpp	/^  PTCInstruction *TheInstruction;$/;"	m	class:PTC::InstructionArgumentsIterator	file:
TheInstruction	tools/revng-lift/InstructionTranslator.cpp	/^  PTCInstruction *TheInstruction;$/;"	m	class:PTC::InstructionImpl	file:
TheMap	tools/revng-lift/OSRA.cpp	/^  std::map<MapIndex, MapValue> TheMap;$/;"	m	class:BVMap	file:
TheModule	include/revng/Support/DebugHelper.h	/^  llvm::Module *TheModule;$/;"	m	class:DebugHelper
TheModule	lib/FunctionIsolation/IsolateFunctions.cpp	/^  Module *TheModule;$/;"	m	class:IsolateFunctionsImpl	file:
TheModule	tools/revng-lift/CodeGenerator.h	/^  std::unique_ptr<llvm::Module> TheModule;$/;"	m	class:CodeGenerator
TheModule	tools/revng-lift/ExternalJumpsHandler.h	/^  llvm::Module &TheModule;$/;"	m	class:ExternalJumpsHandler
TheModule	tools/revng-lift/InstructionTranslator.h	/^  llvm::Module &TheModule;$/;"	m	class:InstructionTranslator
TheModule	tools/revng-lift/VariableManager.h	/^  llvm::Module &TheModule;$/;"	m	class:VariableManager
TheOSR	tools/revng-lift/OSRA.h	/^      const OSR &TheOSR;$/;"	m	class:OSRAPass::OSR::Bounds
TheOSR	tools/revng-lift/OSRA.h	/^      const OSR &TheOSR;$/;"	m	class:OSRAPass::OSR::BoundsIterator
TheOption	include/revng/Support/Debug.h	/^  DebugLogOptionList TheOption;$/;"	m	struct:DebugLogOptionWrapper
TheReason	lib/StackAnalysis/FunctionABI.cpp	/^  Reason TheReason;$/;"	m	class:StackAnalysis::ABIAnalysis::Interrupt	file:
TheReason	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  Reason TheReason;$/;"	m	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt	file:
TheTag	lib/StackAnalysis/Element.h	/^  ASSlot TheTag;$/;"	m	class:StackAnalysis::Intraprocedural::Value
TheType	tools/revng-lift/OSRA.h	/^      llvm::Type *TheType;$/;"	m	class:OSRAPass::OSR::Bounds
TheType	tools/revng-lift/OSRA.h	/^      llvm::Type *TheType;$/;"	m	class:OSRAPass::OSR::BoundsIterator
ToPurge	tools/revng-lift/JumpTargetManager.h	/^  std::set<llvm::BasicBlock *> ToPurge;$/;"	m	class:JumpTargetManager
ToVisit	include/revng/Support/MonotoneFramework.h	/^  std::set<Label> ToVisit;$/;"	m	class:MonotoneFramework
Total	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^      unsigned Total; \/\/\/< Number of functions writing this register$/;"	m	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult::ECSVote	file:
TrackedValues	tools/revng-lift/SET.cpp	/^  std::set<uint64_t> TrackedValues;$/;"	m	class:OperationsStack	file:
Tracking	tools/revng-lift/SET.cpp	/^  TrackingType Tracking;$/;"	m	class:OperationsStack	file:
TrackingType	tools/revng-lift/SET.cpp	/^  enum TrackingType {$/;"	g	class:OperationsStack	file:
Trampolines	lib/FunctionIsolation/IsolateFunctions.cpp	/^    std::map<BasicBlock *, BasicBlock *> Trampolines;$/;"	m	struct:IsolateFunctionsImpl::IsolatedFunctionDescriptor	file:
Transform	include/revng/Support/Transform.h	/^  Transform(transformer Transformer) : Transformer(Transformer) {}$/;"	f	class:adaptors::Transform
Transform	include/revng/Support/Transform.h	/^class Transform {$/;"	c	namespace:adaptors
TransformIterator	include/revng/Support/Transform.h	/^  TransformIterator(Wrapped Iterator, transformer F) :$/;"	f	class:TransformIterator
TransformIterator	include/revng/Support/Transform.h	/^class TransformIterator : public IteratorWrapper<Wrapped> {$/;"	c
Transformer	include/revng/Support/Transform.h	/^  transformer Transformer;$/;"	m	class:adaptors::Transform
TranslateDirectBranchesPass	tools/revng-lift/JumpTargetManager.h	/^  TranslateDirectBranchesPass() : llvm::ModulePass(ID), JTM(nullptr) {}$/;"	f	class:TranslateDirectBranchesPass
TranslateDirectBranchesPass	tools/revng-lift/JumpTargetManager.h	/^  TranslateDirectBranchesPass(JumpTargetManager *JTM) :$/;"	f	class:TranslateDirectBranchesPass
TranslateDirectBranchesPass	tools/revng-lift/JumpTargetManager.h	/^class TranslateDirectBranchesPass : public llvm::ModulePass {$/;"	c
TranslationResult	tools/revng-lift/InstructionTranslator.h	/^  enum TranslationResult {$/;"	g	class:InstructionTranslator
Type	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  InterruptType Type;$/;"	m	class:RDA::Interrupt
Type	include/revng/StackAnalysis/FunctionsSummary.h	/^    FunctionType::Values Type;$/;"	m	struct:StackAnalysis::FunctionsSummary::FunctionDescription
Type	include/revng/Support/MemoryAccess.h	/^  enum { Invalid, CPUState, RegisterAndOffset, Absolute } Type;$/;"	m	class:MemoryAccess	typeref:enum:MemoryAccess::__anon6
Type	include/revng/Support/revng.h	/^  RelocationType Type;$/;"	m	class:RelocationDescription
Type	include/revng/Support/revng.h	/^  llvm::Triple::ArchType Type;$/;"	m	class:Architecture
Type	lib/StackAnalysis/Intraprocedural.h	/^  BranchType::Values Type;$/;"	m	class:StackAnalysis::Intraprocedural::Interrupt
Type	tools/revng-lift/BinaryFile.h	/^  LabelType::Values Type;$/;"	m	class:Label
TypeSizeProvider	include/revng/Support/MemoryAccess.h	/^  TypeSizeProvider(const llvm::DataLayout &DL) : DL(DL) {}$/;"	f	class:TypeSizeProvider
TypeSizeProvider	include/revng/Support/MemoryAccess.h	/^class TypeSizeProvider {$/;"	c
UNIQUEDSTACK_H	include/revng/ADT/UniquedStack.h	2;"	d
URAOF	lib/StackAnalysis/FunctionABI.h	/^  UsedArgumentsOfFunction URAOF;$/;"	m	class:StackAnalysis::RegisterState
URVOF	lib/StackAnalysis/FunctionABI.h	/^  UsedReturnValuesOfFunction URVOF;$/;"	m	class:StackAnalysis::RegisterState
URVOFC	lib/StackAnalysis/FunctionABI.h	/^  UsedReturnValuesOfFunctionCall URVOFC;$/;"	m	class:StackAnalysis::CallSiteRegisterState
URVOFC	lib/StackAnalysis/FunctionABI.h	/^  UsedReturnValuesOfFunctionCall URVOFC;$/;"	m	class:StackAnalysis::RegisterState
USE_DYNAMIC_PTC	tools/revng-lift/PTCInterface.h	16;"	d
UnexpectedPC	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::BasicBlock *UnexpectedPC;$/;"	m	class:GeneratedCodeBasicInfo
UnexpectedPC	tools/revng-lift/JumpTargetManager.h	/^  llvm::BasicBlock *UnexpectedPC;$/;"	m	class:JumpTargetManager
UnexpectedPCBlock	include/revng/Support/revng.h	/^  UnexpectedPCBlock,$/;"	e	enum:BlockType
Unexplored	tools/revng-lift/JumpTargetManager.h	/^  std::vector<BlockWithAddress> Unexplored;$/;"	m	class:JumpTargetManager
UnhandledCall	include/revng/StackAnalysis/FunctionsSummary.h	/^  UnhandledCall,$/;"	e	enum:StackAnalysis::BranchType::Values
UniquedStack	include/revng/ADT/UniquedStack.h	/^class UniquedStack {$/;"	c
UnknowResult	tools/revng-lift/JumpTargetManager.h	/^    UnknowResult $/;"	e	enum:JumpTargetManager::LastAssignmentResult
Unknown	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, Code, Data, Section, File };$/;"	e	enum:SymbolType::Values
Unknown	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, StaticSymbol, DynamicSymbol, DynamicRelocation };$/;"	e	enum:LabelOrigin::Values
Unknown	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^    Unknown,$/;"	e	enum:CSVOffsets::Kind
UnknownFormCFG	tools/revng-lift/JumpTargetManager.h	/^  UnknownFormCFG,$/;"	e	enum:CFGForm::Values
UnknownInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^    UnknownInPtr,$/;"	e	enum:CSVOffsets::Kind
Unreachable	include/revng/StackAnalysis/FunctionsSummary.h	/^  Unreachable,$/;"	e	enum:StackAnalysis::BranchType::Values
UntypedBlock	include/revng/Support/revng.h	/^  UntypedBlock,$/;"	e	enum:BlockType
UnusedCodePointers	tools/revng-lift/JumpTargetManager.h	/^  std::set<uint64_t> UnusedCodePointers;$/;"	m	class:JumpTargetManager
UnusedGlobalData	include/revng/Support/revng.h	/^  UnusedGlobalData = 64, \/\/\/< Obtained digging in global data, buf never used$/;"	e	enum:JTReason::Values
Upper	tools/revng-lift/OSRA.h	/^    enum Bound { Lower, Upper };$/;"	e	enum:OSRAPass::BoundedValue::Bound
UseOSRA	tools/revng-lift/SET.h	/^  bool UseOSRA;$/;"	m	class:SETPass
UsedRegister	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  UsedRegister,$/;"	e	enum:StackAnalysis::LocalSlotType::Values
VALGRINDHELPERS_H	include/revng/Support/Callgrind.h	2;"	d
VARIABLEMANAGER_H	tools/revng-lift/VariableManager.h	2;"	d
VM	tools/revng-lift/CodeGenerator.cpp	/^  VariableManager *VM;$/;"	m	class:CpuLoopExitPass	file:
Val	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  Value *Val() const { return CurrentValue; };$/;"	f	class:WorkItem
Value	include/revng/StackAnalysis/FunctionsSummary.h	/^  Values Value;$/;"	m	class:StackAnalysis::FunctionCallReturnValue
Value	include/revng/StackAnalysis/FunctionsSummary.h	/^  Values Value;$/;"	m	class:StackAnalysis::FunctionReturnValue
Value	include/revng/StackAnalysis/FunctionsSummary.h	/^  Values Value;$/;"	m	class:StackAnalysis::RegisterArgument
Value	lib/StackAnalysis/Element.h	/^  Value() : DirectContent(ASSlot::invalid()), TheTag(ASSlot::invalid()) {}$/;"	f	class:StackAnalysis::Intraprocedural::Value
Value	lib/StackAnalysis/Element.h	/^class Value {$/;"	c	namespace:StackAnalysis::Intraprocedural
Value	tools/revng-lift/BinaryFile.h	/^  uint64_t Value;$/;"	m	class:Label
Value	tools/revng-lift/BinaryFile.h	/^  uint64_t Value;$/;"	m	class:Pointer
Value	tools/revng-lift/OSRA.h	/^    const llvm::Value *Value;$/;"	m	class:OSRAPass::BoundedValue
Value	tools/revng-lift/SET.cpp	/^  uint64_t Value;$/;"	m	class:MaterializedValue	file:
Value	tools/revng-lift/SubGraph.h	/^    InnerNodeType Value;$/;"	m	class:SubGraph::Node
ValueCallSiteOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  ValueCallSiteOffsetMap ValueCallSiteOffsets;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
ValueMap	lib/FunctionIsolation/IsolateFunctions.cpp	/^    ValueToValueMap ValueMap;$/;"	m	struct:IsolateFunctionsImpl::IsolatedFunctionDescriptor	file:
ValueToValueMap	lib/FunctionIsolation/IsolateFunctions.cpp	/^typedef DenseMap<const Value *, Value *> ValueToValueMap;$/;"	t	file:
Values	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, Contradiction };$/;"	g	class:StackAnalysis::RegisterArgument
Values	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, YesCandidate, Contradiction };$/;"	g	class:StackAnalysis::FunctionReturnValue
Values	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Maybe, Yes, Dead, Contradiction };$/;"	g	class:StackAnalysis::FunctionCallReturnValue
Values	include/revng/StackAnalysis/FunctionsSummary.h	/^enum Values {$/;"	g	namespace:StackAnalysis::BranchType
Values	include/revng/StackAnalysis/FunctionsSummary.h	/^enum Values {$/;"	g	namespace:StackAnalysis::FunctionType
Values	include/revng/Support/DebugHelper.h	/^enum Values {$/;"	g	namespace:DebugInfoType
Values	include/revng/Support/revng.h	/^enum Values { NonKiller, KillerSyscall, EndlessLoop, LeadsToKiller };$/;"	g	namespace:KillReason
Values	include/revng/Support/revng.h	/^enum Values {$/;"	g	namespace:JTReason
Values	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^enum Values {$/;"	g	namespace:StackAnalysis::LocalSlotType
Values	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, Code, Data, Section, File };$/;"	g	namespace:SymbolType
Values	tools/revng-lift/BinaryFile.h	/^enum Values { Unknown, StaticSymbol, DynamicSymbol, DynamicRelocation };$/;"	g	namespace:LabelOrigin
Values	tools/revng-lift/BinaryFile.h	/^enum Values {$/;"	g	namespace:LabelType
Values	tools/revng-lift/JumpTargetManager.h	/^enum Values {$/;"	g	namespace:CFGForm
Variable	tools/revng-lift/BinaryFile.h	/^  llvm::GlobalVariable *Variable; \/\/\/< \\brief LLVM variable containing this$/;"	m	struct:SegmentInfo
VariableContent	lib/StackAnalysis/Intraprocedural.cpp	/^  ContentMap &VariableContent; \/\/\/< Reference to map for allocas$/;"	m	class:StackAnalysis::Intraprocedural::BasicBlockState	file:
VariableContent	lib/StackAnalysis/Intraprocedural.h	/^  std::map<llvm::Instruction *, Value> VariableContent; \/\/\/< Content of allocas$/;"	m	class:StackAnalysis::Intraprocedural::Analysis
VariableIndex	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  unsigned VariableIndex;$/;"	m	class:VariableTerm	file:
VariableManager	tools/revng-lift/VariableManager.cpp	/^VariableManager::VariableManager(Module &TheModule,$/;"	f	class:VariableManager
VariableManager	tools/revng-lift/VariableManager.h	/^class VariableManager {$/;"	c
VariableTerm	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  VariableTerm() : VariableIndex(0) {}$/;"	f	class:VariableTerm
VariableTerm	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  VariableTerm(unsigned Index) : VariableIndex(Index) {}$/;"	f	class:VariableTerm
VariableTerm	tools/revng-lift/SimplifyComparisonsPass.cpp	/^class VariableTerm : public Term {$/;"	c	file:
Variables	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  VariableManager *Variables;$/;"	m	class:CPUStateAccessAnalysis	file:
Variables	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  VariableManager *Variables;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
Variables	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  VariableManager *Variables;$/;"	m	class:CPUStateAccessAnalysisPass
Variables	tools/revng-lift/InstructionTranslator.h	/^  VariableManager &Variables;$/;"	m	class:InstructionTranslator
Vector	include/revng/ADT/SmallMap.h	/^  mutable NonConstContainer Vector; \/\/\/< Container for inline elements$/;"	m	class:SmallMap
VisitAction	include/revng/Support/IRHelpers.h	/^enum VisitAction {$/;"	g
VisitType	include/revng/Support/MonotoneFramework.h	/^enum VisitType {$/;"	g
Visited	tools/revng-lift/JumpTargetManager.cpp	/^  std::set<BasicBlock *> Visited;$/;"	m	class:BasicBlockVisitor	file:
Visited	tools/revng-lift/JumpTargetManager.h	/^  std::set<llvm::BasicBlock *> Visited;$/;"	m	class:JumpTargetManager
Visited	tools/revng-lift/SET.cpp	/^  std::set<BasicBlock *> *Visited;$/;"	m	class:SET	file:
Visited	tools/revng-lift/SET.h	/^  std::set<llvm::BasicBlock *> *Visited;$/;"	m	class:SETPass
VisitorTestBody	tests/Unit/IRHelpers.cpp	/^const char *VisitorTestBody = R"LLVM($/;"	v
VisitsCount	lib/StackAnalysis/FunctionABI.cpp	/^  unsigned VisitsCount;$/;"	m	class:StackAnalysis::ABIAnalysis::Analysis	file:
WorkItem	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  WorkItem() : CurrentValue(nullptr), Sources(), SourceIndex(0) {}$/;"	f	class:WorkItem
WorkItem	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  explicit WorkItem(Argument *A,$/;"	f	class:WorkItem
WorkItem	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  explicit WorkItem(CallInst *C, bool IsLoad) :$/;"	f	class:WorkItem
WorkItem	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  explicit WorkItem(Instruction *I) :$/;"	f	class:WorkItem
WorkItem	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^class WorkItem {$/;"	c	file:
WorkList	include/revng/Support/MonotoneFramework.h	/^  MonotoneFrameworkWorkList<Label, Visit> WorkList;$/;"	m	class:MonotoneFramework
WorkList	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  std::vector<WorkItem> WorkList;$/;"	m	class:CPUStateAccessOffsetAnalysis	file:
WorkList	tools/revng-lift/OSRA.cpp	/^  UniquedQueue<Instruction *> WorkList;$/;"	m	class:OSRA	file:
WorkList	tools/revng-lift/SET.cpp	/^  std::vector<std::pair<Value *, unsigned>> WorkList;$/;"	m	class:SET	file:
WrapIn	lib/StackAnalysis/FunctionABI.cpp	/^class WrapIn {$/;"	c	namespace:StackAnalysis::ABIAnalysis	file:
WrapIn	lib/StackAnalysis/FunctionABI.cpp	/^class WrapIn<Wrapper, Tuple, 0, Types...> {$/;"	c	namespace:StackAnalysis::ABIAnalysis	file:
WriteRegisterAsm	include/revng/Support/revng.h	/^  llvm::StringRef WriteRegisterAsm;$/;"	m	class:Architecture
WrittenRegisters	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  std::set<int32_t> WrittenRegisters;$/;"	m	class:StackAnalysis::IntraproceduralFunctionSummary
WrittenStackSlots	lib/StackAnalysis/ABIIR.h	/^  std::set<int32_t> WrittenStackSlots;$/;"	m	class:StackAnalysis::ABIIRInstruction
X	tools/revng-lift/CodeGenerator.cpp	/^auto X = cl::values(clEnumValN(DIT::None, "none", "no debug information"),$/;"	v
Yes	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, Contradiction };$/;"	e	enum:StackAnalysis::RegisterArgument::Values
Yes	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, YesCandidate, Contradiction };$/;"	e	enum:StackAnalysis::FunctionReturnValue::Values
Yes	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Maybe, Yes, Dead, Contradiction };$/;"	e	enum:StackAnalysis::FunctionCallReturnValue::Values
YesCandidate	include/revng/StackAnalysis/FunctionsSummary.h	/^  enum Values { No, NoOrDead, Dead, Yes, Maybe, YesCandidate, Contradiction };$/;"	e	enum:StackAnalysis::FunctionReturnValue::Values
Zero	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  Constant *Zero;$/;"	m	class:CPUStateAccessAnalysis	file:
_Unwind_Resume	tests/Analysis/x86_64/try-catch-ehframe.S	/^_Unwind_Resume:$/;"	l
_ZTIi	tests/Analysis/x86_64/try-catch-ehframe.S	/^_ZTIi:$/;"	l
__builtin_assume	include/revng/Support/Assert.h	26;"	d
__builtin_unreachable	include/revng/Support/Assert.h	30;"	d
__cxa_begin_catch	tests/Analysis/x86_64/try-catch-ehframe.S	/^__cxa_begin_catch:$/;"	l
__cxa_end_catch	tests/Analysis/x86_64/try-catch-ehframe.S	/^__cxa_end_catch:$/;"	l
__gxx_personality_v0	tests/Analysis/x86_64/try-catch-ehframe.S	/^__gxx_personality_v0:$/;"	l
__has_attribute	include/revng/Support/Assert.h	22;"	d
__has_builtin	include/revng/Support/Assert.h	18;"	d
__start	tests/Analysis/mips/jump-table-base-before-function-call.S	/^__start:$/;"	l
__start	tests/Analysis/mips/switch-jump-table-stack.S	/^__start:$/;"	l
__start	tests/Analysis/mips/switch-jump-table.S	/^__start:$/;"	l
_start	tests/Analysis/arm/call.S	/^_start:$/;"	l
_start	tests/Analysis/arm/fake-function-without-push.S	/^_start:$/;"	l
_start	tests/Analysis/arm/fake-function.S	/^_start:$/;"	l
_start	tests/Analysis/arm/indirect-call.S	/^_start:$/;"	l
_start	tests/Analysis/arm/indirect-tail-call.S	/^_start:$/;"	l
_start	tests/Analysis/arm/longjmp.S	/^_start:$/;"	l
_start	tests/Analysis/arm/memset.S	/^_start:$/;"	l
_start	tests/Analysis/arm/switch-addls.S	/^_start:$/;"	l
_start	tests/Analysis/arm/switch-disjoint-ranges.S	/^_start:$/;"	l
_start	tests/Analysis/arm/switch-ldrls.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/always-dead-return-value.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/dead-on-one-path.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/dead-register.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/draof.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/drvofc.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/dsaof.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/helper.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/indirect-call-callee-saved.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/push-pop.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/raofc.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/recursion.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/return-value-to-argument.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/saofc.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/sometimes-dead-return-value.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/stack-argument-contradiction.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/uraof.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/urvof.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/urvofc.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/StackAnalysis/usaof.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/call.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/fibonacci.c	/^unsigned _start(unsigned a) {$/;"	f
_start	tests/Analysis/x86_64/indirect-call.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/indirect-tail-call.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/longjmp.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/rda-in-memory.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/switch-jump-table.S	/^_start:$/;"	l
_start	tests/Analysis/x86_64/try-catch-ehframe.S	/^_start:$/;"	l
abi	lib/StackAnalysis/ABIIR.h	/^  const FunctionABI &abi() const {$/;"	f	class:StackAnalysis::ABIIRInstruction
abiRegisters	include/revng/Support/revng.h	/^  llvm::SmallVector<ABIRegister, 20> abiRegisters() const {$/;"	f	class:Architecture
actualBoundaries	tools/revng-lift/OSRA.h	/^    actualBoundaries(llvm::Type *Int64) const {$/;"	f	class:OSRAPass::BoundedValue
adaptors	include/revng/Support/Transform.h	/^namespace adaptors {$/;"	n
add	include/revng/Support/Debug.h	/^  void add(Logger<false> *) {}$/;"	f	class:LoggersRegistry
add	include/revng/Support/Debug.h	/^  void add(Logger<true> *L) { Loggers.push_back(L); }$/;"	f	class:LoggersRegistry
add	include/revng/Support/Statistics.h	/^  void add(OnQuitInteraface *S) { Register.push_back(S); }$/;"	f	class:OnQuitRegistry
add	lib/StackAnalysis/ASSlot.h	/^  void add(int32_t Addend) { Offset += Addend; }$/;"	f	class:StackAnalysis::ASSlot
add	lib/StackAnalysis/Element.h	/^  bool add(int32_t Addend) {$/;"	f	class:StackAnalysis::Intraprocedural::Value
addAccessMetadata	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static void addAccessMetadata(const CallSiteOffsetMap &OffsetMap,$/;"	f	file:
addModuleFlag	lib/Support/DebugHelper.cpp	/^static void addModuleFlag(Module *TheModule, StringRef Flag, uint32_t Value) {$/;"	f	file:
addPredecessor	include/revng/BasicAnalyses/CustomCFG.h	/^  void addPredecessor(CustomCFGNode *Node) { Predecessors.push_back(Node); }$/;"	f	class:CustomCFGNode
addSuccessor	include/revng/BasicAnalyses/CustomCFG.h	/^  void addSuccessor(CustomCFGNode *Node) { Successors.push_back(Node); }$/;"	f	class:CustomCFGNode
addSuccessor	lib/StackAnalysis/ABIIR.h	/^  void addSuccessor(ABIIRBasicBlock *Successor) {$/;"	f	class:StackAnalysis::ABIIRBasicBlock
address	tools/revng-lift/BinaryFile.h	/^  uint64_t address() const { return Address; }$/;"	f	class:Label
addressAtIndex	tools/revng-lift/BinaryFile.cpp	/^  uint64_t addressAtIndex(uint64_t Index) {$/;"	f	class:FilePortion
addressAtOffset	tools/revng-lift/BinaryFile.cpp	/^  uint64_t addressAtOffset(uint64_t Offset) {$/;"	f	class:FilePortion
addressSpace	lib/StackAnalysis/ASSlot.h	/^  ASID addressSpace() const { return AS; }$/;"	f	class:StackAnalysis::ASSlot
addressSpaceContainsTag	lib/StackAnalysis/Element.h	/^  bool addressSpaceContainsTag(ASID AddressSpace, const ASSlot *TheTag) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
advanceToNextSource	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  void advanceToNextSource() {$/;"	f	class:WorkItem
again	tests/Analysis/arm/memset.S	/^again:$/;"	l
aliasAnalysis	tools/revng-lift/VariableManager.cpp	/^void VariableManager::aliasAnalysis() {$/;"	f	class:VariableManager
align	runtime/support.c	/^static const unsigned align = sizeof(target_reg);$/;"	v	file:
alloc	include/revng/ADT/LazySmallBitVector.h	/^  void alloc(size_t NewSize) {$/;"	f	class:LazySmallBitVector
analyze	lib/StackAnalysis/FunctionABI.cpp	/^void FunctionABI::analyze(const ABIFunction &TheFunction) {$/;"	f	class:StackAnalysis::FunctionABI
analyzeAccess	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void CPUSAOA::analyzeAccess(Instruction *LoadOrStore, bool IsLoad) {$/;"	f	class:CPUSAOA
annotator	lib/Support/DebugHelper.cpp	/^DAW *DebugHelper::annotator(bool DebugInfo) {$/;"	f	class:DebugHelper
anyPC	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::BasicBlock *anyPC() { return AnyPC; }$/;"	f	class:GeneratedCodeBasicInfo
anyPC	tools/revng-lift/JumpTargetManager.h	/^  llvm::BasicBlock *anyPC() const { return AnyPC; }$/;"	f	class:JumpTargetManager
append	lib/StackAnalysis/ABIIR.h	/^  void append(ABIIRInstruction I) { Instructions.push_back(std::move(I)); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
apply	lib/StackAnalysis/Element.cpp	/^void Element::apply(const Element &Other) {$/;"	f	class:StackAnalysis::Intraprocedural::Element
apply	tools/revng-lift/OSRA.h	/^    BoundedValue apply(const BoundedValue &Target,$/;"	f	class:OSRAPass::OSR
applyConstraint	tools/revng-lift/OSRA.cpp	/^Optional<BoundedValue> OSRA::applyConstraint(Instruction *I,$/;"	f	class:OSRA
applyResults	lib/StackAnalysis/FunctionABI.h	/^  void applyResults(FunctionCallRegisterArgument &V) const {$/;"	f	class:StackAnalysis::CallSiteRegisterState
applyResults	lib/StackAnalysis/FunctionABI.h	/^  void applyResults(FunctionCallRegisterArgument &V,$/;"	f	class:StackAnalysis::FunctionABI
applyResults	lib/StackAnalysis/FunctionABI.h	/^  void applyResults(FunctionCallReturnValue &V) const {$/;"	f	class:StackAnalysis::CallSiteRegisterState
applyResults	lib/StackAnalysis/FunctionABI.h	/^  void applyResults(FunctionCallReturnValue &V,$/;"	f	class:StackAnalysis::FunctionABI
applyResults	lib/StackAnalysis/FunctionABI.h	/^  void applyResults(FunctionRegisterArgument &V) const {$/;"	f	class:StackAnalysis::RegisterState
applyResults	lib/StackAnalysis/FunctionABI.h	/^  void applyResults(FunctionRegisterArgument &V, int32_t Offset) const {$/;"	f	class:StackAnalysis::FunctionABI
applyResults	lib/StackAnalysis/FunctionABI.h	/^  void applyResults(FunctionReturnValue &V) const {$/;"	f	class:StackAnalysis::RegisterState
applyResults	lib/StackAnalysis/FunctionABI.h	/^  void applyResults(FunctionReturnValue &V, int32_t Offset) const {$/;"	f	class:StackAnalysis::FunctionABI
architecture	tools/revng-lift/BinaryFile.h	/^  const Architecture &architecture() const { return TheArchitecture; }$/;"	f	class:BinaryFile
areEquivalent	lib/StackAnalysis/Cache.cpp	/^static bool areEquivalent(const LoadInst *A, const LoadInst *B) {$/;"	f	namespace:StackAnalysis
are_same	include/revng/ADT/SmallMap.h	/^  struct are_same : std::false_type {};$/;"	s	class:Iteratall
are_same	include/revng/ADT/SmallMap.h	/^  struct are_same<P, P, Ps...> : are_same<P, Ps...> {};$/;"	s	class:Iteratall
are_same	include/revng/ADT/SmallMap.h	/^  struct are_same<P, P> : std::true_type {};$/;"	s	class:Iteratall
argument_count	tests/Runtime/calc.c	/^  uint16_t argument_count;$/;"	m	struct:__anon8	file:
arguments	tests/Runtime/calc.c	/^  value_t arguments[MAX_ARGUMENTS];$/;"	m	struct:__anon8	file:
assertCompatibility	include/revng/Support/RandomAccessIterator.h	/^  void assertCompatibility(const type &r) const {$/;"	f	class:RandomAccessIterator
assertLowerThanOrEqual	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  void assertLowerThanOrEqual(const MISet &A, const MISet &B) const {}$/;"	f	class:RDA::Analysis
assertLowerThanOrEqual	include/revng/Support/MonotoneFramework.h	/^  void assertLowerThanOrEqual(const LatticeElement &A,$/;"	f	class:MonotoneFramework
assertLowerThanOrEqual	lib/StackAnalysis/ASSlot.h	/^assertLowerThanOrEqual(const T &LHS, const T &RHS, const llvm::Module *M) {$/;"	f	namespace:StackAnalysis
assertLowerThanOrEqual	lib/StackAnalysis/FunctionABI.cpp	/^  void assertLowerThanOrEqual(const Element<E> &A, const Element<E> &B) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
assertLowerThanOrEqual	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  void assertLowerThanOrEqual(const Element &A, const Element &B) const {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
assertLowerThanOrEqual	lib/StackAnalysis/Intraprocedural.h	/^  void assertLowerThanOrEqual(const Element &A, const Element &B) const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
assertLowerThanOrEqual	lib/Support/ExampleAnalysis.cpp	/^  void assertLowerThanOrEqual(const LatticeElement &A,$/;"	f	class:ExampleAnalysis::Analysis
assertReachers	tests/Unit/ReachingDefinitionsPass.cpp	/^static void assertReachers(Function *F,$/;"	f	file:
assign	lib/StackAnalysis/FunctionABI.cpp	/^  static void assign(CallSiteRegisterState &, const Tuple &) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
assign	lib/StackAnalysis/FunctionABI.cpp	/^  static void assign(CallSiteRegisterState &This, const Tuple &Other) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
assign	lib/StackAnalysis/FunctionABI.cpp	/^  static void assign(RegisterState &, const Tuple &) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
assign	lib/StackAnalysis/FunctionABI.cpp	/^  static void assign(RegisterState &This, const Tuple &Other) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
assign	lib/StackAnalysis/FunctionABI.cpp	/^  static void assign(Tuple &, const Tuple &) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
assign	lib/StackAnalysis/FunctionABI.h	/^  CallSiteRegisterState &assign(const T &Other) {$/;"	f	class:StackAnalysis::CallSiteRegisterState
assign	lib/StackAnalysis/FunctionABI.h	/^  RegisterState &assign(const T &Other) {$/;"	f	class:StackAnalysis::RegisterState
at	include/revng/ADT/LazySmallBitVector.h	/^    const uintptr_t &at(size_t Index) const {$/;"	f	struct:LazySmallBitVector::LargeStorage
at	include/revng/ADT/LazySmallBitVector.h	/^    uintptr_t &at(size_t Index) {$/;"	f	struct:LazySmallBitVector::LargeStorage
base	include/revng/Support/MemoryAccess.h	/^  llvm::Value *base() const {$/;"	f	class:MemoryAccess
base	tools/revng-lift/OSRA.h	/^    uint64_t base() const { return Base; }$/;"	f	class:OSRAPass::OSR
basicBlock	lib/StackAnalysis/ABIIR.h	/^  llvm::BasicBlock *basicBlock() const { return BB; }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
basicBlockByName	tests/Unit/LLVMTestHelpers.h	/^inline llvm::BasicBlock *basicBlockByName(llvm::Function *F, const char *Name) {$/;"	f
begin	include/revng/ADT/LazySmallBitVector.h	/^  const_iterator begin() const { return const_iterator(this); }$/;"	f	class:LazySmallBitVector
begin	include/revng/ADT/LazySmallBitVector.h	/^  iterator begin() { return iterator(this); }$/;"	f	class:LazySmallBitVector
begin	include/revng/ADT/SmallMap.h	/^  const_iterator begin() const {$/;"	f	class:SmallMap
begin	include/revng/ADT/SmallMap.h	/^  iterator begin() {$/;"	f	class:SmallMap
begin	include/revng/Support/IRHelpers.h	/^  static llvm::BasicBlock::iterator begin(llvm::BasicBlock *BB) {$/;"	f	struct:IteratorDirection
begin	include/revng/Support/IRHelpers.h	/^  static llvm::BasicBlock::reverse_iterator begin(llvm::BasicBlock *BB) {$/;"	f	struct:IteratorDirection
begin	include/revng/Support/MonotoneFramework.h	/^  const_iterator begin() const { return Set.begin(); }$/;"	f	class:MonotoneFrameworkSet
begin	include/revng/Support/Range.h	/^  Iterator begin() const { return Begin; }$/;"	f	class:Range
begin	lib/StackAnalysis/ABIIR.h	/^  const_iterator begin() const { return Instructions.begin(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
begin	lib/StackAnalysis/ABIIR.h	/^  iterator begin() { return Instructions.begin(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
begin	lib/StackAnalysis/Element.h	/^  Container::const_iterator begin() const { return ASOContent.begin(); }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
begin	lib/StackAnalysis/Element.h	/^  Container::const_iterator begin() const { return State.begin(); }$/;"	f	class:StackAnalysis::Intraprocedural::Element
begin	lib/StackAnalysis/FunctionABI.h	/^  const_iterator begin() const { return M.begin(); }$/;"	f	class:StackAnalysis::DefaultMap
begin	lib/StackAnalysis/FunctionABI.h	/^  iterator begin() { return M.begin(); }$/;"	f	class:StackAnalysis::DefaultMap
begin	lib/StackAnalysis/Intraprocedural.h	/^  const_iterator begin() { return RelatedBasicBlocks.begin(); }$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
begin	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  const_iterator begin() const { return Offsets.cbegin(); }$/;"	f	class:CSVOffsets
begin	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  iterator begin() { return Offsets.begin(); }$/;"	f	class:CSVOffsets
begin	tools/revng-lift/JumpTargetManager.h	/^  std::map<uint64_t, JumpTarget>::const_iterator begin() const {$/;"	f	class:JumpTargetManager
begin	tools/revng-lift/OSRA.h	/^      BoundsIterator begin() const {$/;"	f	class:OSRAPass::OSR::Bounds
belongToUBlock	tools/revng-lift/JumpTargetManager.cpp	/^uint32_t JumpTargetManager::belongToUBlock(llvm::BasicBlock *block){$/;"	f	class:JumpTargetManager
belongsTo	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  bool belongsTo(llvm::BasicBlock *OtherBB) const { return OtherBB == BB; }$/;"	f	class:StackAnalysis::Branch
belongsTo	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  bool belongsTo(llvm::BasicBlock *OtherBB) const { return OtherBB == BB; }$/;"	f	class:StackAnalysis::CallSite
binary	tools/revng-lift/JumpTargetManager.h	/^  const BinaryFile &binary() const { return Binary; }$/;"	f	class:JumpTargetManager
block	include/revng/BasicAnalyses/CustomCFG.h	/^  llvm::BasicBlock *block() const { return BB; }$/;"	f	class:CustomCFGNode
boolcast	include/revng/Support/Assert.h	61;"	d
boolcast	include/revng/Support/Assert.h	66;"	d
bottom	include/revng/Support/MonotoneFramework.h	/^  static MonotoneFrameworkSet bottom() { return MonotoneFrameworkSet(); }$/;"	f	class:MonotoneFrameworkSet
bottom	lib/StackAnalysis/Element.h	/^  static Element bottom() { return Element(); }$/;"	f	class:StackAnalysis::Intraprocedural::Element
bottom	lib/StackAnalysis/FunctionABI.cpp	/^  static Element bottom() { return Element(); }$/;"	f	class:StackAnalysis::ABIAnalysis::Element
bottom	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  static IntraproceduralFunctionSummary bottom() {$/;"	f	class:StackAnalysis::IntraproceduralFunctionSummary
bottom	lib/Support/ExampleAnalysis.cpp	/^  static LatticeElement bottom() { return LatticeElement(); }$/;"	f	class:ExampleAnalysis::LatticeElement
boundaries	tools/revng-lift/OSRA.cpp	/^OSR::boundaries(Type *Int64, const DataLayout &DL) const {$/;"	f	class:OSR
boundedValue	tools/revng-lift/OSRA.h	/^    const BoundedValue *boundedValue() const {$/;"	f	class:OSRAPass::OSR
bounds	tools/revng-lift/OSRA.cpp	/^BoundedValue::BoundsVector BoundedValue::bounds() const {$/;"	f	class:BoundedValue
bounds	tools/revng-lift/OSRA.h	/^    Bounds bounds(llvm::Type *T) const {$/;"	f	class:OSRAPass::OSR
branch	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  llvm::Instruction *branch() const { return I; }$/;"	f	class:StackAnalysis::Branch
branchcontent	tools/revng-lift/InstructionTranslator.h	/^  std::map<std::string, llvm::BasicBlock *> &branchcontent() { $/;"	f	class:InstructionTranslator
branchreset	tools/revng-lift/InstructionTranslator.h	/^  void branchreset() { BranchLabeledBasicBlocks.clear(); }$/;"	f	class:InstructionTranslator
branchsize	tools/revng-lift/InstructionTranslator.h	/^  uint32_t branchsize() { return BranchLabeledBasicBlocks.size(); }$/;"	f	class:InstructionTranslator
buildBackLinks	include/revng/BasicAnalyses/CustomCFG.h	/^  void buildBackLinks() {$/;"	f	class:CustomCFG
buildEmptyExecutableSegmentsList	tools/revng-lift/ExternalJumpsHandler.cpp	/^void ExternalJumpsHandler::buildEmptyExecutableSegmentsList() {$/;"	f	class:ExternalJumpsHandler
buildEnvOffsetValue	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static Value *buildEnvOffsetValue(IRBuilder<> Builder,$/;"	f	file:
buildExecutableSegmentsList	tools/revng-lift/ExternalJumpsHandler.cpp	/^void ExternalJumpsHandler::buildExecutableSegmentsList() {$/;"	f	class:ExternalJumpsHandler
buildFilteredCFG	lib/FunctionCallIdentification/FunctionCallIdentification.cpp	/^void FunctionCallIdentification::buildFilteredCFG(llvm::Function &F) {$/;"	f	class:FunctionCallIdentification
buildModule	tests/Unit/LLVMTestHelpers.h	/^inline std::string buildModule(const char *Body) {$/;"	f
buildString	lib/Support/IRHelpers.cpp	/^GlobalVariable *buildString(Module *M, StringRef String, const Twine &Name) {$/;"	f
buildStringPtr	lib/Support/IRHelpers.cpp	/^Constant *buildStringPtr(Module *M, StringRef String, const Twine &Name) {$/;"	f
cacheMustHit	lib/StackAnalysis/Intraprocedural.h	/^  bool cacheMustHit() const { return CacheMustHit; }$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
call	lib/StackAnalysis/ABIIR.h	/^  FunctionCall call() const {$/;"	f	class:StackAnalysis::ABIIRInstruction
call	tests/Analysis/x86_64/call.S	/^call:$/;"	l
callInstruction	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  llvm::Instruction *callInstruction() const { return I; }$/;"	f	class:StackAnalysis::CallSite
callInstruction	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  llvm::Instruction *callInstruction() const { return I; }$/;"	f	class:StackAnalysis::FunctionCall
callee	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  llvm::BasicBlock *callee() const { return BB; }$/;"	f	class:StackAnalysis::FunctionCall
callee	tests/Analysis/x86_64/StackAnalysis/always-dead-return-value.S	/^callee:$/;"	l
callee	tests/Analysis/x86_64/StackAnalysis/dead-register.S	/^callee:$/;"	l
callee	tests/Analysis/x86_64/StackAnalysis/raofc.S	/^callee:$/;"	l
callee	tests/Analysis/x86_64/StackAnalysis/saofc.S	/^callee:$/;"	l
callee	tests/Analysis/x86_64/StackAnalysis/sometimes-dead-return-value.S	/^callee:$/;"	l
callee	tests/Analysis/x86_64/StackAnalysis/stack-argument-contradiction.S	/^callee:$/;"	l
callee	tests/Analysis/x86_64/StackAnalysis/urvofc.S	/^callee:$/;"	l
caller	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  llvm::BasicBlock *caller() const { return BB; }$/;"	f	class:StackAnalysis::CallSite
calls	lib/StackAnalysis/ABIIR.h	/^  calls_const_range calls() const {$/;"	f	class:StackAnalysis::ABIFunction
callsBuiltinMemcpy	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static bool callsBuiltinMemcpy(const Instruction *TheCall) {$/;"	f	file:
calls_size	lib/StackAnalysis/ABIIR.h	/^  size_t calls_size() const { return Calls.size(); }$/;"	f	class:StackAnalysis::ABIFunction
canonicalValues	tools/revng-lift/BinaryFile.h	/^  const std::map<llvm::StringRef, uint64_t> &canonicalValues() const {$/;"	f	class:BinaryFile
capacity	include/revng/ADT/LazySmallBitVector.h	/^    unsigned capacity() const { return Capacity; }$/;"	f	struct:LazySmallBitVector::LargeStorage
capacity	include/revng/ADT/LazySmallBitVector.h	/^  size_t capacity() const {$/;"	f	class:LazySmallBitVector
cfg	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  const CustomCFG &cfg() const { return FilteredCFG; }$/;"	f	class:FunctionCallIdentification
cfgForm	tools/revng-lift/JumpTargetManager.h	/^  CFGForm::Values cfgForm() const { return CurrentCFGForm; }$/;"	f	class:JumpTargetManager
check	include/revng/Support/ClassSentinel.h	/^  void check() const {$/;"	f	class:ClassSentinel
checkDestroy	include/revng/Support/ClassSentinel.h	/^  void checkDestroy() const {$/;"	f	class:ClassSentinel
checkKiller	tools/revng-lift/NoReturnAnalysis.h	/^  bool checkKiller(llvm::BasicBlock *BB) const {$/;"	f	class:NoReturnAnalysis
checkNewVisitAndInsertCrossedCallSite	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  bool checkNewVisitAndInsertCrossedCallSite(CallInst *RootCall, const Use *U) {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
checkNewVisitAndInsertCurCrossedCallSite	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  bool checkNewVisitAndInsertCurCrossedCallSite(const WorkItem &Item) {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
checkNewVisitAndInsertNextCrossedCallSite	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  bool checkNewVisitAndInsertNextCrossedCallSite(const WorkItem &Item) {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
checkOffsetTupleIsValid	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  checkOffsetTupleIsValid(const SmallVector<const CSVOffsets *, 4> &OffsetTuple,$/;"	f	class:AddSubOffsetFolder	file:
checkOffsetTupleIsValid	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  checkOffsetTupleIsValid(const SmallVector<const CSVOffsets *, 4> &OffsetTuple,$/;"	f	class:GEPOffsetFolder	file:
checkOffsetTupleIsValid	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  checkOffsetTupleIsValid(const SmallVector<const CSVOffsets *, 4> &OffsetTuple,$/;"	f	class:NumericOffsetFolder	file:
check_lattice	scripts/monotone-framework.py	/^def check_lattice(lattice):$/;"	f
check_transfer_functions	scripts/monotone-framework.py	/^def check_transfer_functions(tf_graph, reachability, transfer_functions):$/;"	f
child_begin	include/revng/BasicAnalyses/CustomCFG.h	/^  static inline ChildIteratorType child_begin(CustomCFGNode *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	lib/StackAnalysis/ABIIR.h	/^  child_begin(StackAnalysis::ABIIRBasicBlock *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	tools/revng-lift/SubGraph.h	/^  static ChildIteratorType child_begin(NodeRef Parent) {$/;"	f	struct:llvm::GraphTraits
child_end	include/revng/BasicAnalyses/CustomCFG.h	/^  static inline ChildIteratorType child_end(CustomCFGNode *N) {$/;"	f	struct:llvm::GraphTraits
child_end	lib/StackAnalysis/ABIIR.h	/^  static inline ChildIteratorType child_end(StackAnalysis::ABIIRBasicBlock *N) {$/;"	f	struct:llvm::GraphTraits
child_end	tools/revng-lift/SubGraph.h	/^  static ChildIteratorType child_end(NodeRef Parent) {$/;"	f	struct:llvm::GraphTraits
cleanup	lib/StackAnalysis/Element.cpp	/^void Element::cleanup() {$/;"	f	class:StackAnalysis::Intraprocedural::Element
cleanup	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  void cleanup() {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
cleanup	tools/revng-lift/NoReturnAnalysis.h	/^  void cleanup() {$/;"	f	class:NoReturnAnalysis
clear	include/revng/ADT/Queue.h	/^  void clear() {$/;"	f	class:QueueImpl
clear	include/revng/ADT/SmallMap.h	/^  void clear() {$/;"	f	class:SmallMap
clear	include/revng/BasicAnalyses/CustomCFG.h	/^  void clear() { Blocks.clear(); }$/;"	f	class:CustomCFG
clear	include/revng/Support/MonotoneFramework.h	/^  void clear() { Queue.clear(); }$/;"	f	class:MonotoneFrameworkWorkList
clear	include/revng/Support/MonotoneFramework.h	/^  void clear() {$/;"	f	class:MonotoneFrameworkWorkList
clear	include/revng/Support/Statistics.h	/^  void clear() { Map.clear(); }$/;"	f	class:CounterMap
clear	include/revng/Support/Statistics.h	/^  void clear() { N = 0; }$/;"	f	class:RunningStatistics
clear	include/revng/Support/Statistics.h	/^  void clear(K Key) { Map.erase(Key); }$/;"	f	class:CounterMap
clear	lib/StackAnalysis/ABIIR.h	/^  void clear() {$/;"	f	class:StackAnalysis::ABIIRBasicBlock
clear	lib/StackAnalysis/FunctionABI.h	/^  void clear() {$/;"	f	class:StackAnalysis::DefaultMap
clear	lib/StackAnalysis/FunctionABI.h	/^  void clear(V NewDefault) {$/;"	f	class:StackAnalysis::DefaultMap
clear	tools/revng-lift/OSRA.cpp	/^  void clear() {$/;"	f	class:BVMap
clone	include/revng/Support/RandomAccessIterator.h	/^  Derived clone(unsigned NewIndex) const {$/;"	f	class:RandomAccessIterator
cloneInstruction	lib/FunctionIsolation/IsolateFunctions.cpp	/^bool IFI::cloneInstruction(BasicBlock *NewBB,$/;"	f	class:IFI
cloneSisters	tools/revng-lift/VariableManager.cpp	/^  void cloneSisters(Value *Old, Value *New) {$/;"	f	class:OffsetValueStack
cmp	lib/StackAnalysis/ASSlot.h	/^  static unsigned cmp(const T &This, const T &Other, const llvm::Module *M) {$/;"	f	struct:StackAnalysis::debug_cmp
cmp	lib/StackAnalysis/Element.cpp	/^unsigned ASSlot::cmp(const ASSlot &Other, const Module *M) const {$/;"	f	class:StackAnalysis::ASSlot
cmp	lib/StackAnalysis/Element.cpp	/^unsigned AddressSpace::cmp(const AddressSpace &Other, const Module *M) const {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
cmp	lib/StackAnalysis/Element.cpp	/^unsigned Element::cmp(const Element &Other, const Module *M) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
cmp	lib/StackAnalysis/Element.cpp	/^unsigned Value::cmp(const Value &Other, const Module *M) const {$/;"	f	class:StackAnalysis::Intraprocedural::Value
cmp	lib/StackAnalysis/FunctionABI.cpp	/^  static unsigned cmp(const Tuple &, const Tuple &) { return 0; }$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
cmp	lib/StackAnalysis/FunctionABI.cpp	/^  static unsigned cmp(const Tuple &This, const Tuple &Other) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
cmp	lib/StackAnalysis/FunctionABI.cpp	/^  unsigned cmp(const AnalysesWrapper &Other) const {$/;"	f	class:StackAnalysis::AnalysesWrapper
cmp	lib/StackAnalysis/FunctionABI.cpp	/^  unsigned cmp(const Element &Other, const Module *M = nullptr) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
cmp	lib/StackAnalysis/FunctionABI.cpp	/^cmp(const DefaultMap<K, V, N> &This, const DefaultMap<K, V, N> &Other) {$/;"	f	namespace:StackAnalysis::MapHelpers
cmp	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  static unsigned cmp(const MonotoneFrameworkSet<T> &This,$/;"	f	struct:StackAnalysis::debug_cmp
cmpWithModule	lib/StackAnalysis/FunctionABI.cpp	/^unsigned cmpWithModule(const DefaultMap<K, V, N> &This,$/;"	f	namespace:StackAnalysis::MapHelpers
codePointers	tools/revng-lift/BinaryFile.h	/^  const std::set<uint64_t> &codePointers() const { return CodePointers; }$/;"	f	class:BinaryFile
collectDefinitions	tools/revng-lift/NoReturnAnalysis.cpp	/^void NoReturnAnalysis::collectDefinitions(ConditionalReachedLoadsPass &CRL) {$/;"	f	class:NoReturnAnalysis
collectLocalSlots	lib/StackAnalysis/FunctionABI.h	/^  void collectLocalSlots(std::set<ASSlot> &SlotsPool) const {$/;"	f	class:StackAnalysis::FunctionABI
collectMetadata	tools/revng-lift/SET.cpp	/^void SET::collectMetadata() {$/;"	f	class:SET
collectSlots	lib/StackAnalysis/Element.cpp	/^std::set<ASSlot> Element::collectSlots(int32_t CSVCount) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
collectYesRegisters	lib/StackAnalysis/FunctionABI.h	/^  std::pair<std::set<int32_t>, std::set<int32_t>> collectYesRegisters() const {$/;"	f	class:StackAnalysis::FunctionABI
combine	include/revng/Support/MonotoneFramework.h	/^  ElementBase &combine(const ElementBase &RHS) {$/;"	f	class:ElementBase
combine	include/revng/Support/MonotoneFramework.h	/^  void combine(const MonotoneFrameworkSet &Other) {$/;"	f	class:MonotoneFrameworkSet
combine	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^static size_t combine(size_t A, size_t B) {$/;"	f	file:
combine	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^static size_t combine(size_t A, void *Ptr) {$/;"	f	file:
combine	lib/StackAnalysis/Element.cpp	/^Element &Element::combine(const Element &Other) {$/;"	f	class:StackAnalysis::Intraprocedural::Element
combine	lib/StackAnalysis/Element.h	/^  Value &combine(const Value &Other) {$/;"	f	class:StackAnalysis::Intraprocedural::Value
combine	lib/StackAnalysis/FunctionABI.cpp	/^  AnalysesWrapper &combine(const AnalysesWrapper &Other) {$/;"	f	class:StackAnalysis::AnalysesWrapper
combine	lib/StackAnalysis/FunctionABI.cpp	/^  Element &combine(const Element &Other) {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
combine	lib/StackAnalysis/FunctionABI.cpp	/^  static void combine(Tuple &, const Tuple &) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
combine	lib/StackAnalysis/FunctionABI.cpp	/^  static void combine(Tuple &This, const Tuple &Other) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
combine	lib/StackAnalysis/FunctionABI.cpp	/^  void combine(const Inhibitor &Other) {$/;"	f	class:StackAnalysis::Inhibitor
combine	lib/StackAnalysis/FunctionABI.cpp	/^combine(DefaultMap<K, V, N> &This, const DefaultMap<K, Q, N> &Other) {$/;"	f	namespace:StackAnalysis::MapHelpers
combine	lib/StackAnalysis/FunctionABI.cpp	/^static void combine(V &This, const Q &Other) {$/;"	f	namespace:StackAnalysis::MapHelpers
combine	lib/StackAnalysis/FunctionABI.h	/^  CallSiteRegisterState &combine(const T &Other) {$/;"	f	class:StackAnalysis::CallSiteRegisterState
combine	lib/StackAnalysis/FunctionABI.h	/^  combine(FunctionReturnValue &This, UsedReturnValuesOfFunction::Values V) {$/;"	f	struct:StackAnalysis::CombineHelper
combine	lib/StackAnalysis/FunctionABI.h	/^  static void combine(FunctionCallReturnValue &This,$/;"	f	struct:StackAnalysis::CombineHelper
combine	lib/StackAnalysis/FunctionABI.h	/^  static void combine(RegisterArgument<FunctionCall> &This,$/;"	f	struct:StackAnalysis::CombineHelper
combine	lib/StackAnalysis/FunctionABI.h	/^  void combine(const ABIAnalysis::Element<E> &Other) {$/;"	f	class:StackAnalysis::FunctionABI
combine	lib/StackAnalysis/FunctionsSummary.cpp	/^void FCRA::combine(const FRA &Other) {$/;"	f	class:StackAnalysis::FCRA
combine	lib/StackAnalysis/FunctionsSummary.cpp	/^void FRA::combine(const FCRA &Other) {$/;"	f	class:StackAnalysis::FRA
combine	lib/StackAnalysis/FunctionsSummary.cpp	/^void FunctionCallReturnValue::combine(const FunctionReturnValue &Other) {$/;"	f	class:StackAnalysis::FunctionCallReturnValue
combine	lib/StackAnalysis/FunctionsSummary.cpp	/^void FunctionReturnValue::combine(const FunctionCallReturnValue &Other) {$/;"	f	class:StackAnalysis::FunctionReturnValue
combine	lib/Support/ExampleAnalysis.cpp	/^  void combine(const LatticeElement &) { revng_abort(); }$/;"	f	class:ExampleAnalysis::LatticeElement
combine	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  void combine(const CSVOffsets &other) {$/;"	f	class:CSVOffsets
combine	tools/revng-lift/OSRA.cpp	/^bool OSR::combine(unsigned Opcode,$/;"	f	class:OSR
combineHash	lib/StackAnalysis/Element.cpp	/^static size_t combineHash(size_t A, size_t B) {$/;"	f	file:
combineImpl	tools/revng-lift/OSRA.cpp	/^static uint64_t combineImpl(unsigned Opcode,$/;"	f	file:
compare	lib/StackAnalysis/FunctionABI.cpp	/^static inline Comparison compare(T A, T B) {$/;"	f	namespace:StackAnalysis::MapHelpers
compare	scripts/compare-json.py	/^def compare(reference, input, order, exact, verbose, quiet, indent):$/;"	f
compare	tools/revng-lift/OSRA.cpp	/^bool OSR::compare(unsigned short P,$/;"	f	class:OSR
compareOptional	lib/StackAnalysis/Intraprocedural.h	/^inline bool compareOptional(llvm::Optional<T> LHS, llvm::Optional<T> RHS) {$/;"	f
computeAffected	lib/StackAnalysis/Intraprocedural.cpp	/^  std::set<BasicBlock *> computeAffected() {$/;"	f	class:StackAnalysis::Intraprocedural::BasicBlockState
computeAggregatedOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void CPUSAOA::computeAggregatedOffsets() {$/;"	f	class:CPUSAOA
computeBV	tools/revng-lift/OSRA.cpp	/^  BoundedValue computeBV(Value *V, const DataLayout &DL, Type *Int64) const {$/;"	f	class:Reacher
computeCalleeSavedSlots	lib/StackAnalysis/Element.cpp	/^std::set<ASSlot> Element::computeCalleeSavedSlots() const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
computeDirectlyReachableFunctions	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^computeDirectlyReachableFunctions(const Function *RootFunction) {$/;"	f	file:
computeEnvAddress	tools/revng-lift/VariableManager.cpp	/^Value *VariableManager::computeEnvAddress(Type *TargetType,$/;"	f	class:VariableManager
computeIncoherentCalls	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^computeIncoherentCalls(ABIIRBasicBlock *Entry,$/;"	f	namespace:StackAnalysis
computeKillerSet	tools/revng-lift/NoReturnAnalysis.cpp	/^void NoReturnAnalysis::computeKillerSet(PredecessorsMap &CallPredecessors) {$/;"	f	class:NoReturnAnalysis
computeOffsetsFromSources	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void CPUSAOA::computeOffsetsFromSources(const WorkItem &Item, bool IsLoad) {$/;"	f	class:CPUSAOA
computeResetBasicBlocks	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^computeResetBasicBlocks(const ReachingDefinitionsPass &RDP, BranchInst *B) {$/;"	f	file:
computeUnreachable	tools/revng-lift/JumpTargetManager.cpp	/^std::set<BasicBlock *> JumpTargetManager::computeUnreachable() {$/;"	f	class:JumpTargetManager
compute_reachability_matrix	scripts/monotone-framework.py	/^def compute_reachability_matrix(graph):$/;"	f
condition	scripts/monotone-framework.py	/^          condition = condition.format(v1.name, v2.name)$/;"	v
condition	scripts/monotone-framework.py	/^      condition = "(Value == {} && Other.Value == {})"$/;"	v
condition	scripts/monotone-framework.py	/^      condition = condition.format(this.name, other.name)$/;"	v
conditionToPredicate	tools/revng-lift/InstructionTranslator.cpp	/^static CmpInst::Predicate conditionToPredicate(PTCCondition Condition) {$/;"	f	file:
conditions	scripts/monotone-framework.py	/^    conditions = []$/;"	v
conditions_string	scripts/monotone-framework.py	/^    conditions_string = ("\\n        || "$/;"	v
constArgCount	tools/revng-lift/InstructionTranslator.cpp	/^inline unsigned CallInstruction::constArgCount() const {$/;"	f	class:PTC::CallInstruction
constArgCount	tools/revng-lift/InstructionTranslator.cpp	/^inline unsigned Instruction::constArgCount() const {$/;"	f	class:PTC::Instruction
constThisDerived	include/revng/Support/RandomAccessIterator.h	/^  const Derived &constThisDerived() const {$/;"	f	class:RandomAccessIterator
const_global	tests/Runtime/global.c	/^const int const_global = 2;$/;"	v
constant	tools/revng-lift/OSRA.h	/^    uint64_t constant() const {$/;"	f	class:OSRAPass::BoundedValue
constant	tools/revng-lift/OSRA.h	/^    uint64_t constant() const {$/;"	f	class:OSRAPass::OSR
containing	tools/revng-lift/JumpTargetManager.h	/^containing(Map const &m, typename Map::key_type const &k) {$/;"	f
containing	tools/revng-lift/JumpTargetManager.h	/^typename Map::iterator containing(Map &m, typename Map::key_type const &k) {$/;"	f
contains	include/revng/Support/IRHelpers.h	/^inline bool contains(T Range, typename T::value_type V) {$/;"	f
contains	include/revng/Support/MonotoneFramework.h	/^  bool contains(T Key) const { return Set.count(Key); }$/;"	f	class:MonotoneFrameworkSet
contains	include/revng/Support/MonotoneFramework.h	/^  bool contains(std::function<bool(const T &)> Predicate) {$/;"	f	class:MonotoneFrameworkSet
contains	include/revng/Support/MonotoneFramework.h	/^  bool contains(std::set<T> Other) const {$/;"	f	class:MonotoneFrameworkSet
contains	lib/StackAnalysis/Element.h	/^  bool contains(int32_t Offset) const { return ASOContent.count(Offset) != 0; }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
contains	lib/StackAnalysis/FunctionABI.h	/^  bool contains(K Key) const { return M.count(Key) != 0; }$/;"	f	class:StackAnalysis::DefaultMap
contains	tools/revng-lift/BinaryFile.h	/^  bool contains(uint64_t Address) const {$/;"	f	struct:SegmentInfo
contains	tools/revng-lift/BinaryFile.h	/^  bool contains(uint64_t Address, uint64_t Size) const {$/;"	f	class:Label
contains	tools/revng-lift/BinaryFile.h	/^  bool contains(uint64_t Start, uint64_t Size) const {$/;"	f	struct:SegmentInfo
copy	include/revng/Support/MonotoneFramework.h	/^  MonotoneFrameworkSet copy() const { return *this; }$/;"	f	class:MonotoneFrameworkSet
copy	include/revng/Support/Range.h	/^void copy(Range<T> Source, OutputIterator Destination) {$/;"	f
copy	lib/StackAnalysis/Element.h	/^  Element copy() const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
copy	lib/StackAnalysis/FunctionABI.cpp	/^  Element copy() const {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
copy	lib/StackAnalysis/FunctionABI.h	/^  FunctionABI copy() const {$/;"	f	class:StackAnalysis::FunctionABI
copy	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  IFS copy() const {$/;"	f	class:StackAnalysis::IntraproceduralFunctionSummary
copy	lib/Support/ExampleAnalysis.cpp	/^  LatticeElement copy() { revng_abort(); }$/;"	f	class:ExampleAnalysis::LatticeElement
copyContainer	lib/StackAnalysis/Intraprocedural.h	/^inline T copyContainer(const T &I) {$/;"	f	namespace:StackAnalysis
copySource	lib/Support/DebugHelper.cpp	/^bool DebugHelper::copySource() {$/;"	f	class:DebugHelper
correctCPUStateAccesses	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void CPUStateAccessAnalysis::correctCPUStateAccesses() {$/;"	f	class:CPUStateAccessAnalysis
count	include/revng/ADT/SmallMap.h	/^  size_type count(const K &Key) const {$/;"	f	class:SmallMap
cpuID	lib/StackAnalysis/ASSlot.h	/^  static ASID cpuID() { return ASID(CPUAddressSpaceID); }$/;"	f	class:StackAnalysis::ASID
create	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  create(llvm::LoadInst *I, const llvm::DataLayout &DL, const T &Container) {$/;"	f	struct:MemoryInstruction
create	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  create(llvm::StoreInst *I, const llvm::DataLayout &DL, const T &Container) {$/;"	f	struct:MemoryInstruction
create	lib/StackAnalysis/ASSlot.h	/^  static ASSlot create(ASID ID, int32_t Offset) {$/;"	f	class:StackAnalysis::ASSlot
create	lib/StackAnalysis/Intraprocedural.h	/^  static Interrupt create(Element Result, BranchType::Values Type) {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
createAbsoluteValue	tools/revng-lift/BinaryFile.h	/^  static Label createAbsoluteValue(LabelOrigin::Values Origin,$/;"	f	class:Label
createBaseRelativeValue	tools/revng-lift/BinaryFile.h	/^  static Label createBaseRelativeValue(LabelOrigin::Values Origin,$/;"	f	class:Label
createBottom	tools/revng-lift/OSRA.h	/^    static BoundedValue createBottom(const llvm::Value *V) {$/;"	f	class:OSRAPass::BoundedValue
createCPUStateAccessAnalysisPass	tools/revng-lift/VariableManager.h	/^  CPUStateAccessAnalysisPass *createCPUStateAccessAnalysisPass() {$/;"	f	class:VariableManager
createCatchBlock	lib/FunctionIsolation/IsolateFunctions.cpp	/^BasicBlock *IFI::createCatchBlock(Function *Root, BasicBlock *UnexpectedPC) {$/;"	f	class:IFI
createConstant	tools/revng-lift/OSRA.h	/^    static BoundedValue createConstant(const llvm::Value *V, uint64_t Value) {$/;"	f	class:OSRAPass::BoundedValue
createDirectCall	lib/StackAnalysis/ABIIR.h	/^  createDirectCall(FunctionCall Call,$/;"	f	class:StackAnalysis::ABIIRInstruction
createDispatcher	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::createDispatcher(Function *OutputFunction,$/;"	f	class:JumpTargetManager
createEQ	tools/revng-lift/OSRA.h	/^    createEQ(const llvm::Value *V, uint64_t Value, bool Sign) {$/;"	f	class:OSRAPass::BoundedValue
createExternalDispatcher	tools/revng-lift/ExternalJumpsHandler.cpp	/^ExternalJumpsHandler::createExternalDispatcher(BasicBlock *IsExecutable,$/;"	f	class:ExternalJumpsHandler
createExternalJumpsHandler	tools/revng-lift/ExternalJumpsHandler.cpp	/^void ExternalJumpsHandler::createExternalJumpsHandler() {$/;"	f	class:ExternalJumpsHandler
createGE	tools/revng-lift/OSRA.h	/^    createGE(const llvm::Value *V, uint64_t Value, bool Sign) {$/;"	f	class:OSRAPass::BoundedValue
createIndirectCall	lib/StackAnalysis/ABIIR.h	/^  static ABIIRInstruction createIndirectCall(FunctionCall Call) {$/;"	f	class:StackAnalysis::ABIIRInstruction
createIndirectTailCallFunction	lib/StackAnalysis/Intraprocedural.h	/^  createIndirectTailCallFunction(IntraproceduralFunctionSummary Summary) {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
createInvalid	lib/StackAnalysis/Intraprocedural.h	/^  static Interrupt createInvalid() { return Interrupt(); };$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
createInvalid	tools/revng-lift/BinaryFile.h	/^  static Label createInvalid() { return Label(LabelOrigin::Unknown, 0, 0); }$/;"	f	class:Label
createInvokeReturnBlock	lib/FunctionIsolation/IsolateFunctions.cpp	/^IFI::createInvokeReturnBlock(Function *Root, BasicBlock *UnexpectedPC) {$/;"	f	class:IFI
createJTReasonMD	tools/revng-lift/JumpTargetManager.h	/^  void createJTReasonMD() {$/;"	f	class:JumpTargetManager
createLE	tools/revng-lift/OSRA.h	/^    createLE(const llvm::Value *V, uint64_t Value, bool Sign) {$/;"	f	class:OSRAPass::BoundedValue
createLoad	lib/StackAnalysis/ABIIR.h	/^  static ABIIRInstruction createLoad(const ASSlot Target) {$/;"	f	class:StackAnalysis::ABIIRInstruction
createNE	tools/revng-lift/OSRA.h	/^    createNE(const llvm::Value *V, uint64_t Value, bool Sign) {$/;"	f	class:OSRAPass::BoundedValue
createNegatedConstant	tools/revng-lift/OSRA.h	/^    createNegatedConstant(const llvm::Value *V, uint64_t Value) {$/;"	f	class:OSRAPass::BoundedValue
createNegatedRange	tools/revng-lift/OSRA.h	/^    static BoundedValue createNegatedRange(const llvm::Value *V,$/;"	f	class:OSRAPass::BoundedValue
createNoReturn	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  static Interrupt createNoReturn() { return Interrupt(NoReturn); }$/;"	f	class:RDA::Interrupt
createNoReturn	lib/StackAnalysis/FunctionABI.cpp	/^  static Interrupt createNoReturn() { return Interrupt(NoReturn); }$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt
createNoReturn	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  static Interrupt createNoReturn() { return Interrupt(NoReturn); }$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt
createNoReturnFunction	lib/StackAnalysis/Intraprocedural.h	/^  createNoReturnFunction(IntraproceduralFunctionSummary Summary) {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
createNoReturnInterrupt	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  Interrupt createNoReturnInterrupt() const {$/;"	f	class:RDA::Analysis
createNoReturnInterrupt	include/revng/Support/MonotoneFramework.h	/^  Interrupt createNoReturnInterrupt() {$/;"	f	class:MonotoneFramework
createNoReturnInterrupt	lib/StackAnalysis/FunctionABI.cpp	/^  Interrupt<E> createNoReturnInterrupt() const {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
createNoReturnInterrupt	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  Interrupt createNoReturnInterrupt() const {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
createNoReturnInterrupt	lib/StackAnalysis/Intraprocedural.h	/^  Interrupt createNoReturnInterrupt() {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
createNoReturnInterrupt	lib/Support/ExampleAnalysis.cpp	/^  Interrupt createNoReturnInterrupt() const { revng_abort(); }$/;"	f	class:ExampleAnalysis::Analysis
createOSR	tools/revng-lift/OSRA.cpp	/^OSR OSRA::createOSR(Value *V, BasicBlock *BB) const {$/;"	f	class:OSRA
createRange	tools/revng-lift/OSRA.h	/^    static BoundedValue createRange(const llvm::Value *V,$/;"	f	class:OSRAPass::BoundedValue
createRegular	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  static Interrupt createRegular(MISet E) { return Interrupt(Regular, E); }$/;"	f	class:RDA::Interrupt
createRegular	lib/StackAnalysis/FunctionABI.cpp	/^  static Interrupt createRegular(Element<E> Result) {$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt
createRegular	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  static Interrupt createRegular(Element Result) {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt
createRet	tools/revng-lift/CodeGenerator.cpp	/^static ReturnInst *createRet(Instruction *Position) {$/;"	f	file:
createReturn	lib/StackAnalysis/FunctionABI.cpp	/^  static Interrupt createReturn(Element<E> Result) {$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt
createReturn	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  static Interrupt createReturn(Element Result) {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt
createReturnFromExternal	tools/revng-lift/ExternalJumpsHandler.cpp	/^BasicBlock *ExternalJumpsHandler::createReturnFromExternal() {$/;"	f	class:ExternalJumpsHandler
createSerializeAndJumpOut	tools/revng-lift/ExternalJumpsHandler.cpp	/^BasicBlock *ExternalJumpsHandler::createSerializeAndJumpOut() {$/;"	f	class:ExternalJumpsHandler
createSetjmp	tools/revng-lift/ExternalJumpsHandler.cpp	/^llvm::BasicBlock *ExternalJumpsHandler::createSetjmp(BasicBlock *FirstReturn,$/;"	f	class:ExternalJumpsHandler
createStore	lib/StackAnalysis/ABIIR.h	/^  static ABIIRInstruction createStore(const ASSlot Target) {$/;"	f	class:StackAnalysis::ABIIRInstruction
createSummary	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  static Interrupt createSummary() { return Interrupt(Summary); }$/;"	f	class:RDA::Interrupt
createSummary	lib/StackAnalysis/FunctionABI.cpp	/^  static Interrupt createSummary(Element<E> Result) {$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt
createSummary	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  static Interrupt createSummary(Element Result) {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt
createSummary	lib/StackAnalysis/Intraprocedural.cpp	/^IFS Analysis::createSummary() {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
createSummary	lib/StackAnalysis/Intraprocedural.h	/^  static Interrupt createSummary(IntraproceduralFunctionSummary Summary) {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
createSummaryInterrupt	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  Interrupt createSummaryInterrupt() { return Interrupt::createSummary(); }$/;"	f	class:RDA::Analysis
createSummaryInterrupt	include/revng/Support/MonotoneFramework.h	/^  Interrupt createSummaryInterrupt() {$/;"	f	class:MonotoneFramework
createSummaryInterrupt	lib/StackAnalysis/FunctionABI.cpp	/^  Interrupt<E> createSummaryInterrupt() {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
createSummaryInterrupt	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  Interrupt createSummaryInterrupt() {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
createSummaryInterrupt	lib/StackAnalysis/Intraprocedural.h	/^  Interrupt createSummaryInterrupt() {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
createSummaryInterrupt	lib/Support/ExampleAnalysis.cpp	/^  Interrupt createSummaryInterrupt() { revng_abort(); }$/;"	f	class:ExampleAnalysis::Analysis
createSymbol	tools/revng-lift/BinaryFile.h	/^  static Label createSymbol(LabelOrigin::Values Origin,$/;"	f	class:Label
createSymbolRelativeValue	tools/revng-lift/BinaryFile.h	/^  static Label createSymbolRelativeValue(LabelOrigin::Values Origin,$/;"	f	class:Label
createUnhandledCall	lib/StackAnalysis/Intraprocedural.h	/^  static Interrupt createUnhandledCall(llvm::BasicBlock *Callee) {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
createUnreachableBlock	lib/FunctionIsolation/IsolateFunctions.cpp	/^IFI::createUnreachableBlock(StringRef Name, Function *CurrentFunction) {$/;"	f	class:IFI
createWithSuccessor	lib/StackAnalysis/Intraprocedural.h	/^  static Interrupt createWithSuccessor(Element Result,$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
createWithSuccessors	lib/StackAnalysis/Intraprocedural.h	/^  static Interrupt createWithSuccessors(Element Result,$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
csvNameByOffset	lib/StackAnalysis/ASSlot.h	/^  csvNameByOffset(int32_t Offset, const llvm::Module *M) {$/;"	f	class:StackAnalysis::ASSlot
currentSourceUse	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const Use *currentSourceUse() const {$/;"	f	class:WorkItem
currentSourceValue	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  Value *currentSourceValue() const {$/;"	f	class:WorkItem
current_argument	tests/Runtime/calc.c	/^  uint16_t current_argument;$/;"	m	struct:__anon8	file:
cut	tools/revng-lift/SET.cpp	/^  void cut(unsigned Height) {$/;"	f	class:OperationsStack
debug_cmp	lib/StackAnalysis/ASSlot.h	/^struct debug_cmp {$/;"	s	namespace:StackAnalysis
debug_cmp	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^struct debug_cmp<MonotoneFrameworkSet<T>> {$/;"	s	namespace:StackAnalysis	file:
debug_function	include/revng/Support/Debug.h	28;"	d
debug_function	lib/StackAnalysis/ABIIR.h	/^  bool verify() const debug_function;$/;"	m	class:StackAnalysis::ABIFunction
debug_function	lib/StackAnalysis/ABIIR.h	/^  void dumpDot() const debug_function;$/;"	m	class:StackAnalysis::ABIFunction
debug_function	tools/revng-lift/OSRA.h	/^    void dump() const debug_function;$/;"	m	class:OSRAPass::OSR
default	scripts/monotone-framework.py	/^  default = [v.name$/;"	v
defaultAlignment	include/revng/Support/revng.h	/^  uint32_t defaultAlignment() const { return DefaultAlignment; }$/;"	f	class:Architecture
default_handler	runtime/support.c	/^static struct sigaction default_handler;$/;"	v	typeref:struct:sigaction	file:
delaySlotSize	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  unsigned delaySlotSize() const { return DelaySlotSize; }$/;"	f	class:GeneratedCodeBasicInfo
delaySlotSize	include/revng/Support/revng.h	/^  uint32_t delaySlotSize() const { return DelaySlotSize; }$/;"	f	class:Architecture
delaySlotSize	tools/revng-lift/JumpTargetManager.h	/^  unsigned delaySlotSize() const {$/;"	f	class:JumpTargetManager
dereference	include/revng/ADT/LazySmallBitVector.h	/^  unsigned dereference() const {$/;"	f	class:LazySmallBitVectorIterator
derived	include/revng/Support/MonotoneFramework.h	/^  D &derived() { return *static_cast<D *>(this); }$/;"	f	class:MonotoneFramework
derived	include/revng/Support/MonotoneFramework.h	/^  const D &derived() const { return *static_cast<const D *>(this); }$/;"	f	class:MonotoneFramework
describe	tools/revng-lift/JumpTargetManager.h	/^    std::string describe() const {$/;"	f	class:JumpTargetManager::JumpTarget
describe	tools/revng-lift/OSRA.cpp	/^std::string BoundedValue::describe() const {$/;"	f	class:BoundedValue
describe	tools/revng-lift/OSRA.cpp	/^std::string OSR::describe() const {$/;"	f	class:OSR
describe	tools/revng-lift/OSRA.cpp	/^void BVMap::describe(formatted_raw_ostream &O, const BasicBlock *BB) const {$/;"	f	class:BVMap
describe	tools/revng-lift/OSRA.cpp	/^void OSR::describe(raw_ostream &O) const {$/;"	f	class:OSR
describe	tools/revng-lift/OSRA.cpp	/^void OSRA::describe(formatted_raw_ostream &O, const BasicBlock *BB) const {$/;"	f	class:OSRA
describe	tools/revng-lift/OSRA.cpp	/^void OSRA::describe(formatted_raw_ostream &O, const Instruction *I) const {$/;"	f	class:OSRA
description	include/revng/Support/Debug.h	/^  llvm::StringRef description() const { return ""; }$/;"	f	class:Logger
differ	tools/revng-lift/OSRA.cpp	/^differ(SmallVector<BoundedValue, 2> &Old, SmallVector<BoundedValue, 2> &New) {$/;"	f	file:
digitsCount	include/revng/Support/Statistics.h	/^inline size_t digitsCount(T Value) {$/;"	f
directCall	lib/StackAnalysis/FunctionABI.cpp	/^  void directCall(const FunctionABI &CalleeABI) {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
directContent	lib/StackAnalysis/Element.h	/^  const ASSlot *directContent() const {$/;"	f	class:StackAnalysis::Intraprocedural::Value
disable	include/revng/Support/Debug.h	/^  void disable() { Enabled = false; }$/;"	f	class:Logger
disable	include/revng/Support/Debug.h	/^  void disable(llvm::StringRef Name) {$/;"	f	class:LoggersRegistry
disable	include/revng/Support/MonotoneFramework.h	/^    void disable() { Enabled = false; }$/;"	f	class:MonotoneFrameworkWorkList::PostOrderEntry
disable	lib/StackAnalysis/FunctionABI.cpp	/^  static void disable(Tuple &) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
disable	lib/StackAnalysis/FunctionABI.cpp	/^  static void disable(Tuple &This) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
disable	lib/StackAnalysis/FunctionABI.cpp	/^  void disable() { Enabled = false; }$/;"	f	class:StackAnalysis::Inhibitor
disable	lib/StackAnalysis/FunctionABI.cpp	/^  void disable() { H::disable(this->Analyses); }$/;"	f	class:StackAnalysis::AnalysesWrapper
disable	lib/StackAnalysis/FunctionABI.cpp	/^void disable(DefaultMap<K, T1, N> &This) {$/;"	f	namespace:StackAnalysis::MapHelpers
disassemble	tools/revng-lift/PTCDump.cpp	/^void disassemble(std::ostream &Result,$/;"	f
dispatcher	tools/revng-lift/JumpTargetManager.h	/^  llvm::BasicBlock *dispatcher() const { return Dispatcher; }$/;"	f	class:JumpTargetManager
dispatcherFail	tools/revng-lift/JumpTargetManager.h	/^  llvm::BasicBlock *dispatcherFail() const { return DispatcherFail; }$/;"	f	class:JumpTargetManager
do_log	scripts/compare-json.py	/^def do_log(indent, message, *args):$/;"	f
draof	tests/Analysis/x86_64/StackAnalysis/draof.S	/^draof:$/;"	l
drop	include/revng/Support/MonotoneFramework.h	/^  void drop(T Key) { Set.erase(Key); }$/;"	f	class:MonotoneFrameworkSet
drop	lib/StackAnalysis/FunctionABI.h	/^  void drop(ASSlot Slot) {$/;"	f	class:StackAnalysis::FunctionABI
drop_edge_if	scripts/monotone-framework.py	/^def drop_edge_if(graph, condition):$/;"	f
drvofc	tests/Analysis/x86_64/StackAnalysis/drvofc.S	/^drvofc:$/;"	l
dsaof	tests/Analysis/x86_64/StackAnalysis/dsaof.S	/^dsaof:$/;"	l
dump	include/revng/BasicAnalyses/CustomCFG.h	/^  void dump(T &Output) const {$/;"	f	class:CustomCFG
dump	include/revng/BasicAnalyses/CustomCFG.h	/^  void dump(T &Output, const char *Prefix) const {$/;"	f	class:CustomCFGNode
dump	include/revng/StackAnalysis/FunctionsSummary.h	/^  void dump() const { dump(dbg); }$/;"	f	class:StackAnalysis::FunctionCallReturnValue
dump	include/revng/StackAnalysis/FunctionsSummary.h	/^  void dump() const { dump(dbg); }$/;"	f	class:StackAnalysis::FunctionReturnValue
dump	include/revng/StackAnalysis/FunctionsSummary.h	/^  void dump() const { dump(dbg); }$/;"	f	class:StackAnalysis::RegisterArgument
dump	include/revng/StackAnalysis/FunctionsSummary.h	/^  void dump(T &Output) const {$/;"	f	class:StackAnalysis::FunctionCallReturnValue
dump	include/revng/StackAnalysis/FunctionsSummary.h	/^  void dump(T &Output) const {$/;"	f	class:StackAnalysis::FunctionReturnValue
dump	include/revng/StackAnalysis/FunctionsSummary.h	/^  void dump(T &Output) const {$/;"	f	class:StackAnalysis::RegisterArgument
dump	include/revng/StackAnalysis/FunctionsSummary.h	/^  void dump(const llvm::Module *M) const { dump(M, dbg); }$/;"	f	class:StackAnalysis::FunctionsSummary
dump	include/revng/StackAnalysis/FunctionsSummary.h	/^  void dump(const llvm::Module *M, O &Output) const {$/;"	f	class:StackAnalysis::FunctionsSummary
dump	include/revng/Support/MonotoneFramework.h	/^  void dump() const { dump(dbg); }$/;"	f	class:MonotoneFrameworkSet
dump	include/revng/Support/MonotoneFramework.h	/^  void dump(O &Output) const {$/;"	f	class:MonotoneFrameworkSet
dump	include/revng/Support/Statistics.h	/^  void dump() { dump(MaxCounterMapDump, dbg); }$/;"	f	class:CounterMap
dump	include/revng/Support/Statistics.h	/^  void dump() { dump(dbg); }$/;"	f	class:RunningStatistics
dump	include/revng/Support/Statistics.h	/^  void dump() {$/;"	f	class:OnQuitRegistry
dump	include/revng/Support/Statistics.h	/^  void dump(T &Output) {$/;"	f	class:RunningStatistics
dump	include/revng/Support/Statistics.h	/^  void dump(size_t Max) { dump(Max, dbg); }$/;"	f	class:CounterMap
dump	include/revng/Support/Statistics.h	/^  void dump(size_t Max, O &Output) {$/;"	f	class:CounterMap
dump	lib/StackAnalysis/ABIIR.h	/^  void dump(T &Output, const llvm::Module *M) const {$/;"	f	class:StackAnalysis::ABIFunction
dump	lib/StackAnalysis/ABIIR.h	/^  void dump(T &Output, const llvm::Module *M) const {$/;"	f	class:StackAnalysis::ABIIRInstruction
dump	lib/StackAnalysis/ABIIR.h	/^  void dump(T &Output, const llvm::Module *M, const char *Prefix = "") const {$/;"	f	class:StackAnalysis::ABIIRBasicBlock
dump	lib/StackAnalysis/ASSlot.h	/^  void dump(T &Output) const {$/;"	f	class:StackAnalysis::ASID
dump	lib/StackAnalysis/ASSlot.h	/^  void dump(const llvm::Module *M, T &Output) const {$/;"	f	class:StackAnalysis::ASSlot
dump	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  void dump(T &Output) const {$/;"	f	class:StackAnalysis::BasicBlockInstructionPair
dump	lib/StackAnalysis/Element.h	/^  void dump(const llvm::Module *M, T &Output) const {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
dump	lib/StackAnalysis/Element.h	/^  void dump(const llvm::Module *M, T &Output) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
dump	lib/StackAnalysis/Element.h	/^  void dump(const llvm::Module *M, T &Output) const {$/;"	f	class:StackAnalysis::Intraprocedural::Value
dump	lib/StackAnalysis/FunctionABI.cpp	/^  void dump() const { dump(dbg); }$/;"	f	class:StackAnalysis::Inhibitor
dump	lib/StackAnalysis/FunctionABI.cpp	/^  void dump(T &Output) const {$/;"	f	class:StackAnalysis::Inhibitor
dump	lib/StackAnalysis/FunctionABI.cpp	/^  void dump(T &Output, const char *Prefix = "  ") const {$/;"	f	class:StackAnalysis::AnalysesWrapper
dump	lib/StackAnalysis/FunctionABI.cpp	/^  void dump(const Module *M, T &Output) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
dump	lib/StackAnalysis/FunctionABI.cpp	/^dump(const Module *M, T &Output, const DefaultMap<int32_t, V, N> &D, ASID ID) {$/;"	f	namespace:StackAnalysis::MapHelpers
dump	lib/StackAnalysis/FunctionABI.cpp	/^inline void dump(const Module *M,$/;"	f	namespace:StackAnalysis::MapHelpers
dump	lib/StackAnalysis/FunctionABI.h	/^  void dump(T &Output) const {$/;"	f	class:StackAnalysis::RegisterState
dump	lib/StackAnalysis/FunctionABI.h	/^  void dump(T &Output, const char *Prefix) const {$/;"	f	class:StackAnalysis::CallSiteRegisterState
dump	lib/StackAnalysis/FunctionABI.h	/^  void dump(const llvm::Module *M, T &Output) const {$/;"	f	class:StackAnalysis::FunctionABI
dump	lib/StackAnalysis/InterproceduralAnalysis.h	/^  void dump(const llvm::Module *M, T &Output) const {$/;"	f	class:StackAnalysis::ResultsPool
dump	lib/StackAnalysis/Intraprocedural.h	/^  void dump(const llvm::Module *M, T &Output) const {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
dump	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  void dump(const llvm::Module *M, T &Output) const {$/;"	f	class:StackAnalysis::IntraproceduralFunctionSummary
dump	lib/Support/ExampleAnalysis.cpp	/^  void dump() { revng_abort(); }$/;"	f	class:ExampleAnalysis::LatticeElement
dump	tools/revng-lift/BinaryFile.h	/^  void dump(T &Output) const {$/;"	f	class:Label
dump	tools/revng-lift/OSRA.cpp	/^    void dump(T &Output) const {$/;"	f	struct:BVMap::MapValue
dump	tools/revng-lift/OSRA.cpp	/^void OSR::dump() const {$/;"	f	class:OSR
dump	tools/revng-lift/OSRA.cpp	/^void OSRA::dump() {$/;"	f	class:OSRA
dump	tools/revng-lift/OSRA.h	/^    void dump(T &O) const {$/;"	f	class:OSRAPass::BoundedValue
dump	tools/revng-lift/SET.cpp	/^  void dump(O &Output) const {$/;"	f	class:OperationsStack
dumpAnalysis	lib/StackAnalysis/FunctionABI.cpp	/^  static void dumpAnalysis(const Tuple &, T &, const char *) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
dumpAnalysis	lib/StackAnalysis/FunctionABI.cpp	/^  static void dumpAnalysis(const Tuple &This, T &Output, const char *Prefix) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
dumpAnalysis	lib/StackAnalysis/FunctionABI.h	/^inline void dumpAnalysis(T &Output, const char *Prefix, const V &Analysis) {$/;"	f	namespace:StackAnalysis
dumpDot	lib/StackAnalysis/ABIIR.cpp	/^void ABIFunction::dumpDot() const {$/;"	f	class:StackAnalysis::ABIFunction
dumpFinalState	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  void dumpFinalState() const {}$/;"	f	class:RDA::Analysis
dumpFinalState	include/revng/Support/MonotoneFramework.h	/^  void dumpFinalState() const { return derived().dumpFinalState(); }$/;"	f	class:MonotoneFramework
dumpFinalState	lib/StackAnalysis/FunctionABI.cpp	/^  void dumpFinalState() const {}$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
dumpFinalState	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  void dumpFinalState() const {}$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
dumpFinalState	lib/StackAnalysis/Intraprocedural.h	/^  void dumpFinalState() const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
dumpFinalState	lib/Support/ExampleAnalysis.cpp	/^  void dumpFinalState() const { revng_abort(); }$/;"	f	class:ExampleAnalysis::Analysis
dumpInstruction	tools/revng-lift/PTCDump.cpp	/^int dumpInstruction(std::ostream &Result,$/;"	f
dumpInternal	lib/StackAnalysis/FunctionABI.cpp	/^  void dumpInternal(const Module *M, std::stringstream &Output) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Element	file:
dumpInternal	lib/StackAnalysis/FunctionABI.cpp	/^void FunctionABI::dumpInternal(const Module *M,$/;"	f	class:StackAnalysis::FunctionABI
dumpInternal	lib/StackAnalysis/FunctionsSummary.cpp	/^void FunctionsSummary::dumpInternal(const Module *M,$/;"	f	class:StackAnalysis::FunctionsSummary
dumpModule	lib/Support/IRHelpers.cpp	/^void dumpModule(const Module *M, const char *Path) {$/;"	f
dumpOffset	lib/StackAnalysis/ASSlot.h	/^  dumpOffset(const llvm::Module *M, ASID AS, int32_t Offset, T &Output) {$/;"	f	class:StackAnalysis::ASSlot
dumpOffset	lib/StackAnalysis/ASSlot.h	/^  static void dumpOffset(const llvm::Module *M, ASID AS, int32_t Offset) {$/;"	f	class:StackAnalysis::ASSlot
dumpToString	include/revng/Support/IRHelpers.h	/^inline std::string dumpToString(const llvm::Module *M) {$/;"	f
dumpToString	include/revng/Support/IRHelpers.h	/^inline std::string dumpToString(const llvm::Value *V) {$/;"	f
dumpTranslation	tools/revng-lift/PTCDump.cpp	/^int dumpTranslation(std::ostream &Result, PTCInstructionList *Instructions) {$/;"	f
ehFrameFromEhFrameHdr	tools/revng-lift/BinaryFile.cpp	/^BinaryFile::ehFrameFromEhFrameHdr(uint64_t EHFrameHdrAddress) {$/;"	f	class:BinaryFile
emit	lib/Support/Debug.cpp	/^void Logger<X>::emit() {$/;"	f	class:Logger
emitBasicBlockStartAnnot	tools/revng-lift/OSRA.cpp	/^  virtual void emitBasicBlockStartAnnot(const BasicBlock *BB,$/;"	f	class:OSRAnnotationWriter
emitInstructionAnnot	lib/Support/DebugHelper.cpp	/^void DAW::emitInstructionAnnot(const Instruction *Instr,$/;"	f	class:DAW
emitInstructionAnnot	tools/revng-lift/OSRA.cpp	/^  emitInstructionAnnot(const Instruction *I, formatted_raw_ostream &Output) {$/;"	f	class:OSRAnnotationWriter
empty	include/revng/ADT/Queue.h	/^  bool empty() const { return Queue.empty(); }$/;"	f	class:QueueImpl
empty	include/revng/ADT/SmallMap.h	/^  bool empty() const { return Size == 0 && Map.empty(); }$/;"	f	class:SmallMap
empty	include/revng/ADT/UniquedStack.h	/^  bool empty() const { return Queue.empty(); }$/;"	f	class:UniquedStack
empty	include/revng/Support/MonotoneFramework.h	/^  bool empty() const { return Next == InvalidIndex; }$/;"	f	class:MonotoneFrameworkWorkList
empty	include/revng/Support/MonotoneFramework.h	/^  bool empty() const { return Queue.empty(); }$/;"	f	class:MonotoneFrameworkWorkList
empty	lib/StackAnalysis/Element.h	/^  static Value empty() { return Value(); }$/;"	f	class:StackAnalysis::Intraprocedural::Value
empty	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  size_type empty() const { return Offsets.empty(); }$/;"	f	class:CSVOffsets
empty	tools/revng-lift/JumpTargetManager.h	/^  bool empty() { return Unexplored.empty(); }$/;"	f	class:JumpTargetManager
empty	tools/revng-lift/SET.cpp	/^  bool empty() const { return Operations.empty(); }$/;"	f	class:OperationsStack
empty	tools/revng-lift/VariableManager.cpp	/^  bool empty() { return Stack.empty(); }$/;"	f	class:OffsetValueStack
enable	include/revng/Support/Debug.h	/^  void enable() {$/;"	f	class:Logger
enable	include/revng/Support/Debug.h	/^  void enable(llvm::StringRef Name) {$/;"	f	class:LoggersRegistry
enable	include/revng/Support/MonotoneFramework.h	/^    void enable() { Enabled = true; }$/;"	f	class:MonotoneFrameworkWorkList::PostOrderEntry
enable	lib/StackAnalysis/FunctionABI.cpp	/^  static void enable(Tuple &) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
enable	lib/StackAnalysis/FunctionABI.cpp	/^  static void enable(Tuple &This) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
enable	lib/StackAnalysis/FunctionABI.cpp	/^  void enable() { Enabled = true; }$/;"	f	class:StackAnalysis::Inhibitor
enable	lib/StackAnalysis/FunctionABI.cpp	/^  void enable() { H::enable(this->Analyses); }$/;"	f	class:StackAnalysis::AnalysesWrapper
enable	lib/StackAnalysis/FunctionABI.cpp	/^void enable(DefaultMap<K, T1, N> &This) {$/;"	f	namespace:StackAnalysis::MapHelpers
end	include/revng/ADT/LazySmallBitVector.h	/^  const_iterator end() const { return const_iterator(this, 0); }$/;"	f	class:LazySmallBitVector
end	include/revng/ADT/LazySmallBitVector.h	/^  iterator end() { return iterator(this, 0); }$/;"	f	class:LazySmallBitVector
end	include/revng/ADT/SmallMap.h	/^  const_iterator end() const {$/;"	f	class:SmallMap
end	include/revng/ADT/SmallMap.h	/^  iterator end() {$/;"	f	class:SmallMap
end	include/revng/Support/IRHelpers.h	/^  static llvm::BasicBlock::iterator end(llvm::BasicBlock *BB) {$/;"	f	struct:IteratorDirection
end	include/revng/Support/IRHelpers.h	/^  static llvm::BasicBlock::reverse_iterator end(llvm::BasicBlock *BB) {$/;"	f	struct:IteratorDirection
end	include/revng/Support/MonotoneFramework.h	/^  const_iterator end() const { return Set.end(); }$/;"	f	class:MonotoneFrameworkSet
end	include/revng/Support/Range.h	/^  Iterator end() const { return End; }$/;"	f	class:Range
end	lib/StackAnalysis/ABIIR.h	/^  const_iterator end() const { return Instructions.end(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
end	lib/StackAnalysis/ABIIR.h	/^  iterator end() { return Instructions.end(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
end	lib/StackAnalysis/Element.h	/^  Container::const_iterator end() const { return ASOContent.end(); }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
end	lib/StackAnalysis/Element.h	/^  Container::const_iterator end() const { return State.end(); }$/;"	f	class:StackAnalysis::Intraprocedural::Element
end	lib/StackAnalysis/FunctionABI.h	/^  const_iterator end() const { return M.end(); }$/;"	f	class:StackAnalysis::DefaultMap
end	lib/StackAnalysis/FunctionABI.h	/^  iterator end() { return M.end(); }$/;"	f	class:StackAnalysis::DefaultMap
end	lib/StackAnalysis/Intraprocedural.h	/^  const_iterator end() { return RelatedBasicBlocks.end(); }$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
end	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  const_iterator end() const { return Offsets.cend(); }$/;"	f	class:CSVOffsets
end	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  iterator end() { return Offsets.end(); }$/;"	f	class:CSVOffsets
end	tools/revng-lift/JumpTargetManager.h	/^  std::map<uint64_t, JumpTarget>::const_iterator end() const {$/;"	f	class:JumpTargetManager
end	tools/revng-lift/OSRA.h	/^      BoundsIterator end() const {$/;"	f	class:OSRAPass::OSR::Bounds
endianess	include/revng/Support/revng.h	/^  EndianessType endianess() const { return Endianess; }$/;"	f	class:Architecture
endsUpIn	tools/revng-lift/NoReturnAnalysis.cpp	/^bool NoReturnAnalysis::endsUpIn(Instruction *I, BasicBlock *Target) {$/;"	f	class:NoReturnAnalysis
enqueue	tools/revng-lift/JumpTargetManager.cpp	/^  void enqueue(BasicBlock *BB) {$/;"	f	class:BasicBlockVisitor
enqueueStores	tools/revng-lift/SET.cpp	/^bool SET::enqueueStores(LoadInst *Start) {$/;"	f	class:SET
enqueueUsers	tools/revng-lift/OSRA.cpp	/^void OSRA::enqueueUsers(Instruction *I) {$/;"	f	class:OSRA
entry	include/revng/Support/MonotoneFramework.h	/^    Iterated entry() const { return Entry; }$/;"	f	class:MonotoneFrameworkWorkList::PostOrderEntry
entry	lib/StackAnalysis/ABIIR.h	/^  ABIIRBasicBlock *entry() const { return IREntry; }$/;"	f	class:StackAnalysis::ABIFunction
entry	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  llvm::BasicBlock *entry() const { return BB; }$/;"	f	class:StackAnalysis::Branch
entry	lib/StackAnalysis/Intraprocedural.h	/^  llvm::BasicBlock *entry() const { return Entry; }$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
entryPoint	tools/revng-lift/BinaryFile.h	/^  uint64_t entryPoint() const { return EntryPoint; }$/;"	f	class:BinaryFile
enumerate_graph	scripts/monotone-framework.py	/^def enumerate_graph(graph):$/;"	f
eof	tools/revng-lift/BinaryFile.cpp	/^  bool eof() const { return Cursor >= End; }$/;"	f	class:DwarfReader
epilogue	tests/Analysis/arm/fake-function-without-push.S	/^epilogue:$/;"	l
epilogue	tests/Analysis/arm/fake-function.S	/^epilogue:$/;"	l
equal	include/revng/ADT/LazySmallBitVector.h	/^  bool equal(LazySmallBitVectorIterator const &Other) const {$/;"	f	class:LazySmallBitVectorIterator
equal	lib/StackAnalysis/Element.h	/^  bool equal(const Element &RHS) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
erase	include/revng/ADT/SmallMap.h	/^  void erase(const K &Key) {$/;"	f	class:SmallMap
erase	include/revng/Support/MonotoneFramework.h	/^  const_iterator erase(const_iterator It) { return Set.erase(It); }$/;"	f	class:MonotoneFrameworkSet
erase	lib/StackAnalysis/FunctionABI.h	/^  void erase(K Key) { M.erase(Key); }$/;"	f	class:StackAnalysis::DefaultMap
eraseASO	lib/StackAnalysis/Element.h	/^  ASOContentIt eraseASO(ASOContentIt It) {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
eraseInstruction	tools/revng-lift/JumpTargetManager.h	/^  void eraseInstruction(llvm::Instruction *I) {$/;"	f	class:JumpTargetManager
erase_if	include/revng/Support/IRHelpers.h	/^inline void erase_if(Container &C, UnaryPredicate P) {$/;"	f
erase_if	include/revng/Support/MonotoneFramework.h	/^  void erase_if(std::function<bool(const T &)> Predicate) {$/;"	f	class:MonotoneFrameworkSet
evaluate	tools/revng-lift/OSRA.cpp	/^Constant *OSR::evaluate(Constant *Value, Type *Int64) const {$/;"	f	class:OSR
evaluate	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  virtual bool evaluate(unsigned Assignments) const { revng_abort(); }$/;"	f	class:Term
evaluate	tools/revng-lift/SimplifyComparisonsPass.cpp	/^bool BinaryTerm::evaluate(unsigned Assignments) const {$/;"	f	class:BinaryTerm
evaluate	tools/revng-lift/SimplifyComparisonsPass.cpp	/^bool VariableTerm::evaluate(unsigned Assignments) const {$/;"	f	class:VariableTerm
exception_personality	runtime/support.c	/^int exception_personality(int version,$/;"	f
exception_warning	runtime/support.c	/^void exception_warning(Reason Code,$/;"	f
excessDivide	include/revng/ADT/LazySmallBitVector.h	/^inline T excessDivide(T A, unsigned B) {$/;"	f
exitTB	tools/revng-lift/JumpTargetManager.h	/^  llvm::Function *exitTB() { return ExitTB; }$/;"	f	class:JumpTargetManager
exitTBCleanup	tools/revng-lift/JumpTargetManager.cpp	/^static void exitTBCleanup(Instruction *ExitTBCall) {$/;"	f	file:
explore	tools/revng-lift/SET.cpp	/^void OperationsStack::explore(Constant *NewOperand) {$/;"	f	class:OperationsStack
exploreImmediateSources	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void CPUSAOA::exploreImmediateSources(Value *V, bool IsLoad) {$/;"	f	class:CPUSAOA
extract	include/revng/Support/IRHelpers.h	/^  T extract(const llvm::MDTuple *Tuple, unsigned Index) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^  T extract(const llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^  T extract(llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^QuickMetadata::extract<const llvm::MDString *>(const llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^QuickMetadata::extract<llvm::Constant *>(const llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^QuickMetadata::extract<llvm::Constant *>(llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^QuickMetadata::extract<llvm::MDString *>(llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^QuickMetadata::extract<llvm::MDTuple *>(llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^QuickMetadata::extract<llvm::StringRef>(const llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^QuickMetadata::extract<llvm::StringRef>(llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^inline uint32_t QuickMetadata::extract<uint32_t>(const llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^inline uint32_t QuickMetadata::extract<uint32_t>(llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^inline uint64_t QuickMetadata::extract<uint64_t>(const llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extract	include/revng/Support/IRHelpers.h	/^inline uint64_t QuickMetadata::extract<uint64_t>(llvm::Metadata *MD) {$/;"	f	class:QuickMetadata
extractAs	tools/revng-lift/BinaryFile.cpp	/^  ArrayRef<T> extractAs(const std::vector<SegmentInfo> &Segments) const {$/;"	f	class:FilePortion
extractData	tools/revng-lift/BinaryFile.cpp	/^  extractData(const std::vector<SegmentInfo> &Segments) const {$/;"	f	class:FilePortion
extractResult	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  MISet &&extractResult() { return std::move(E); }$/;"	f	class:RDA::Interrupt
extractResult	lib/StackAnalysis/FunctionABI.cpp	/^  Element<E> &&extractResult() { return std::move(Result); }$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt
extractResult	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  Element &&extractResult() { return std::move(Result); }$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt
extractResult	lib/StackAnalysis/Intraprocedural.h	/^  Element &&extractResult() {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
extractResult	lib/Support/ExampleAnalysis.cpp	/^  LatticeElement &&extractResult() { revng_abort(); }$/;"	f	class:ExampleAnalysis::Interrupt
extractResults	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  extractResults() {$/;"	f	class:RDA::Analysis
extractString	tools/revng-lift/BinaryFile.cpp	/^  StringRef extractString(const std::vector<SegmentInfo> &Segments) const {$/;"	f	class:FilePortion
extract_lattice	scripts/monotone-framework.py	/^def extract_lattice(input_graph):$/;"	f
extract_transfer_function_graph	scripts/monotone-framework.py	/^def extract_transfer_function_graph(input_graph, call_arcs):$/;"	f
extremalLabels	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  typename Base::LabelRange extremalLabels() const {$/;"	f	class:RDA::Analysis
extremalLabels	include/revng/Support/MonotoneFramework.h	/^  LabelRange extremalLabels() const { return derived().extremalLabels(); }$/;"	f	class:MonotoneFramework
extremalLabels	lib/Support/ExampleAnalysis.cpp	/^  LabelRange extremalLabels() const { revng_abort(); }$/;"	f	class:ExampleAnalysis::Analysis
extremalValue	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  MISet extremalValue(llvm::BasicBlock *) const { return MISet(); }$/;"	f	class:RDA::Analysis
extremalValue	include/revng/Support/MonotoneFramework.h	/^  LatticeElement extremalValue(Label L) const {$/;"	f	class:MonotoneFramework
extremalValue	lib/StackAnalysis/FunctionABI.cpp	/^  Element<E> extremalValue(ABIIRBasicBlock *BB) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
extremalValue	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  Element extremalValue(ABIIRBasicBlock *) const { return Element(); }$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
extremalValue	lib/StackAnalysis/Intraprocedural.h	/^  Element extremalValue(llvm::BasicBlock *) const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
extremalValue	lib/Support/ExampleAnalysis.cpp	/^  LatticeElement extremalValue(Label *) const { revng_abort(); }$/;"	f	class:ExampleAnalysis::Analysis
factor	tools/revng-lift/OSRA.h	/^    uint64_t factor() const { return Factor; }$/;"	f	class:OSRAPass::OSR
fibonacci	tests/Analysis/x86_64/fibonacci.c	/^unsigned fibonacci(unsigned n) {$/;"	f
filtered_pred_begin	tools/revng-lift/OSRA.cpp	/^  node_const_iterator filtered_pred_begin(const BasicBlock *BB) {$/;"	f	class:OSRA
filtered_pred_begin	tools/revng-lift/OSRA.cpp	/^  node_iterator filtered_pred_begin(BasicBlock *BB) {$/;"	f	class:OSRA
filtered_pred_end	tools/revng-lift/OSRA.cpp	/^  node_const_iterator filtered_pred_end(const BasicBlock *BB) {$/;"	f	class:OSRA
filtered_pred_end	tools/revng-lift/OSRA.cpp	/^  node_iterator filtered_pred_end(BasicBlock *BB) {$/;"	f	class:OSRA
filtered_predecessors	tools/revng-lift/OSRA.cpp	/^  node_const_range filtered_predecessors(const BasicBlock *BB) {$/;"	f	class:OSRA
filtered_predecessors	tools/revng-lift/OSRA.cpp	/^  node_range filtered_predecessors(BasicBlock *BB) {$/;"	f	class:OSRA
filtered_succ_begin	tools/revng-lift/OSRA.cpp	/^  node_const_iterator filtered_succ_begin(const BasicBlock *BB) {$/;"	f	class:OSRA
filtered_succ_begin	tools/revng-lift/OSRA.cpp	/^  node_iterator filtered_succ_begin(BasicBlock *BB) {$/;"	f	class:OSRA
filtered_succ_end	tools/revng-lift/OSRA.cpp	/^  node_const_iterator filtered_succ_end(const BasicBlock *BB) {$/;"	f	class:OSRA
filtered_succ_end	tools/revng-lift/OSRA.cpp	/^  node_iterator filtered_succ_end(BasicBlock *BB) {$/;"	f	class:OSRA
filtered_successors	tools/revng-lift/OSRA.cpp	/^  node_const_range filtered_successors(const BasicBlock *BB) {$/;"	f	class:OSRA
filtered_successors	tools/revng-lift/OSRA.cpp	/^  node_range filtered_successors(BasicBlock *BB) {$/;"	f	class:OSRA
final	tests/Analysis/arm/memset.S	/^final:$/;"	l
finalize	lib/StackAnalysis/ABIIR.cpp	/^void ABIFunction::finalize() {$/;"	f	class:StackAnalysis::ABIFunction
finalize	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^FunctionsSummary ResultsPool::finalize(Module *M) {$/;"	f	class:StackAnalysis::ResultsPool
finalize	tools/revng-lift/VariableManager.cpp	/^void VariableManager::finalize() {$/;"	f	class:VariableManager
finalizeJumpTargets	tools/revng-lift/JumpTargetManager.h	/^  void finalizeJumpTargets() {$/;"	f	class:JumpTargetManager
finalizeNewPCMarkers	tools/revng-lift/InstructionTranslator.cpp	/^void IT::finalizeNewPCMarkers(std::string &CoveragePath) {$/;"	f	class:IT
finals	lib/StackAnalysis/ABIIR.h	/^  returns_const_range finals() const {$/;"	f	class:StackAnalysis::ABIFunction
finals_size	lib/StackAnalysis/ABIIR.h	/^  size_t finals_size() const { return FinalBBs.size(); }$/;"	f	class:StackAnalysis::ABIFunction
find	include/revng/ADT/SmallMap.h	/^  const_iterator find(const K &Key) const {$/;"	f	class:SmallMap
find	include/revng/ADT/SmallMap.h	/^  iterator find(const K &Key) {$/;"	f	class:SmallMap
findCodePointers	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::findCodePointers(uint64_t StartVirtualAddress,$/;"	f	class:JumpTargetManager
findFiles	tools/revng-lift/Main.cpp	/^static void findFiles(const char *Architecture) {$/;"	f	file:
findFirstBit	include/revng/ADT/LazySmallBitVector.h	/^inline unsigned findFirstBit(T Value) {$/;"	f
findFirstBit	include/revng/ADT/LazySmallBitVector.h	/^inline unsigned findFirstBit(enable_if_int<T> Value) {$/;"	f
findFirstBit	include/revng/ADT/LazySmallBitVector.h	/^inline unsigned findFirstBit(enable_if_long<T> Value) {$/;"	f
findFirstBit	include/revng/ADT/LazySmallBitVector.h	/^inline unsigned findFirstBit(enable_if_long_long<T> Value) {$/;"	f
findIncoherentFunctions	lib/StackAnalysis/Intraprocedural.cpp	/^void Analysis::findIncoherentFunctions(const IFS &ABISummary) {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
findInfinteLoops	tools/revng-lift/NoReturnAnalysis.cpp	/^void NoReturnAnalysis::findInfinteLoops() {$/;"	f	class:NoReturnAnalysis
findNext	include/revng/ADT/LazySmallBitVector.h	/^  unsigned findNext(unsigned StartIndex) const {$/;"	f	class:LazySmallBitVector
findNextExitTB	tools/revng-lift/JumpTargetManager.cpp	/^CallInst *JumpTargetManager::findNextExitTB(Instruction *Start) {$/;"	f	class:JumpTargetManager
findOldest	tools/revng-lift/SimplifyComparisonsPass.cpp	/^Value *SimplifyComparisonsPass::findOldest(Value *V) {$/;"	f	class:SimplifyComparisonsPass
findOperand	include/revng/Support/IRHelpers.h	/^inline bool findOperand(llvm::Value *Op, T &Result) {$/;"	f
findOrInsert	tools/revng-lift/SubGraph.h	/^  Node &findOrInsert(InnerNodeType Value) {$/;"	f	class:SubGraph
findSegment	tools/revng-lift/BinaryFile.h	/^  SegmentInfo *findSegment(uint64_t Address) {$/;"	f	class:BinaryFile
findSegment	tools/revng-lift/BinaryFile.h	/^  const SegmentInfo *findSegment(uint64_t Address) const {$/;"	f	class:BinaryFile
findSubtraction	tools/revng-lift/SimplifyComparisonsPass.cpp	/^findSubtraction(SimplifyComparisonsPass *SCP, User *Cmp) {$/;"	f	file:
first	include/revng/ADT/SmallMap.h	/^  struct first {$/;"	s	class:Iteratall
first	scripts/monotone-framework.py	/^    first = False$/;"	v
first	scripts/monotone-framework.py	/^  first = True$/;"	v
fixEnv2EnvMemCopies	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static void fixEnv2EnvMemCopies(const Module &M,$/;"	f	file:
flip	tools/revng-lift/OSRA.h	/^    void flip() {$/;"	f	class:OSRAPass::BoundedValue
flush_trace_buffer	runtime/support.c	/^static void flush_trace_buffer(void) {$/;"	f	file:
flush_trace_buffer_signal_handler	runtime/support.c	/^void flush_trace_buffer_signal_handler(int signal) {$/;"	f
fold	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  void fold(const WorkItem &Item, ValueCallSiteOffsetMap &OffsetMap) {$/;"	f	class:CRTPOffsetFolder
foldOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CSVOffsets foldOffsets(CSVOffsets::Kind ResKind,$/;"	f	class:CRTPOffsetFolder	file:
foldOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CSVOffsets foldOffsets(CSVOffsets::Kind ResultKind,$/;"	f	class:AddSubOffsetFolder	file:
foldOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CSVOffsets foldOffsets(CSVOffsets::Kind ResultKind,$/;"	f	class:GEPOffsetFolder	file:
foldOffsets	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  CSVOffsets foldOffsets(CSVOffsets::Kind ResultKind,$/;"	f	class:NumericOffsetFolder	file:
foldSet	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::foldSet(std::vector<legalValue> &legalSet){$/;"	f	class:JumpTargetManager
foldStack	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::foldStack(legalValue *&relatedInstPtr){$/;"	f	class:JumpTargetManager
forceBV	tools/revng-lift/OSRA.cpp	/^  BoundedValue &forceBV(BasicBlock *BB, Value *V, BoundedValue BV) {$/;"	f	class:BVMap
forceBV	tools/revng-lift/OSRA.cpp	/^  BoundedValue &forceBV(Instruction *V, BoundedValue BV) {$/;"	f	class:BVMap
forceFallthroughAfterHelper	tools/revng-lift/JumpTargetManager.cpp	/^bool TranslateDirectBranchesPass::forceFallthroughAfterHelper(CallInst *Call) {$/;"	f	class:TranslateDirectBranchesPass
forwardTaintAnalysis	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^forwardTaintAnalysis(GlobalVariable *CPUStatePtr,$/;"	f	file:
frameSizeAt	lib/StackAnalysis/Intraprocedural.h	/^  llvm::Optional<int32_t> frameSizeAt(FunctionCall Location) const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
freeContainer	include/revng/Support/IRHelpers.h	/^inline void freeContainer(T &Container) {$/;"	f
fromBytes	tools/revng-lift/VariableManager.cpp	/^static ConstantInt *fromBytes(IntegerType *Type, void *Data) {$/;"	f	file:
fromELF	tools/revng-lift/BinaryFile.h	/^inline SymbolType::Values fromELF(unsigned char ELFSymbolType) {$/;"	f	namespace:SymbolType
fromName	include/revng/StackAnalysis/FunctionsSummary.h	/^inline Values fromName(llvm::StringRef Name) {$/;"	f	namespace:StackAnalysis::BranchType
fromName	include/revng/Support/revng.h	/^inline Values fromName(llvm::StringRef Name) {$/;"	f	namespace:KillReason
fromName	include/revng/Support/revng.h	/^inline Values fromName(llvm::StringRef ReasonName) {$/;"	f	namespace:JTReason
fromSlot	lib/StackAnalysis/Element.h	/^  static Value fromSlot(ASID ID, int32_t Offset) {$/;"	f	class:StackAnalysis::Intraprocedural::Value
fromSlot	lib/StackAnalysis/Element.h	/^  static Value fromSlot(ASSlot Slot) {$/;"	f	class:StackAnalysis::Intraprocedural::Value
fromTag	lib/StackAnalysis/Element.h	/^  static Value fromTag(ASSlot TheTag) {$/;"	f	class:StackAnalysis::Intraprocedural::Value
func	tests/Analysis/x86_64/StackAnalysis/always-dead-return-value.S	/^func:$/;"	l
func	tests/Analysis/x86_64/StackAnalysis/dead-on-one-path.S	/^func:$/;"	l
func	tests/Analysis/x86_64/StackAnalysis/dead-register.S	/^func:$/;"	l
func	tests/Analysis/x86_64/StackAnalysis/stack-argument-contradiction.S	/^func:$/;"	l
func1	tests/Analysis/x86_64/StackAnalysis/sometimes-dead-return-value.S	/^func1:$/;"	l
func2	tests/Analysis/x86_64/StackAnalysis/sometimes-dead-return-value.S	/^func2:$/;"	l
function	tests/Analysis/arm/call.S	/^function:$/;"	l
function	tests/Analysis/mips/jump-table-base-before-function-call.S	/^function:$/;"	l
function_call	tests/Analysis/x86_64/try-catch-ehframe.S	/^function_call:$/;"	l
function_traits	include/revng/Support/Transform.h	/^struct function_traits : public function_traits<decltype(&T::operator())> {};$/;"	s
function_traits	include/revng/Support/Transform.h	/^struct function_traits<ReturnType (ClassType::*)(Args...) const> {$/;"	s
g_free	runtime/support.c	/^void g_free(void *memory) {$/;"	f
g_malloc	runtime/support.c	/^void *g_malloc(size_t n_bytes) {$/;"	f
g_malloc0_n	runtime/support.c	/^void *g_malloc0_n(size_t n, size_t size) {$/;"	f
generateDebugInfo	lib/Support/DebugHelper.cpp	/^void DebugHelper::generateDebugInfo() {$/;"	f	class:DebugHelper
generateName	tools/revng-lift/CodeGenerator.cpp	/^std::string SegmentInfo::generateName() {$/;"	f	class:SegmentInfo
get	include/revng/Support/IRHelpers.h	/^  llvm::ConstantAsMetadata *get(llvm::Constant *C) {$/;"	f	class:QuickMetadata
get	include/revng/Support/IRHelpers.h	/^  llvm::ConstantAsMetadata *get(uint32_t Integer) {$/;"	f	class:QuickMetadata
get	include/revng/Support/IRHelpers.h	/^  llvm::ConstantAsMetadata *get(uint64_t Integer) {$/;"	f	class:QuickMetadata
get	include/revng/Support/IRHelpers.h	/^  llvm::MDNode *get() { return llvm::MDNode::get(C, {}); }$/;"	f	class:QuickMetadata
get	include/revng/Support/IRHelpers.h	/^  llvm::MDString *get(const char *String) {$/;"	f	class:QuickMetadata
get	include/revng/Support/IRHelpers.h	/^  llvm::MDString *get(llvm::StringRef String) {$/;"	f	class:QuickMetadata
get	include/revng/Support/RandomAccessIterator.h	/^  reference get(unsigned Index) const { return constThisDerived().get(Index); }$/;"	f	class:RandomAccessIterator
get	lib/StackAnalysis/ABIIR.h	/^  ABIIRBasicBlock &get(llvm::BasicBlock *BB) {$/;"	f	class:StackAnalysis::ABIFunction
get	lib/StackAnalysis/ABIIR.h	/^  const ABIIRBasicBlock &get(llvm::BasicBlock *BB) const {$/;"	f	class:StackAnalysis::ABIFunction
get	lib/StackAnalysis/Cache.cpp	/^Cache::get(BasicBlock *Function) const {$/;"	f	class:StackAnalysis::Cache
get	lib/StackAnalysis/Element.h	/^  const Value *get(int32_t Offset) const {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
get	lib/StackAnalysis/FunctionABI.cpp	/^  get(const Tuple &This) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
get	lib/StackAnalysis/FunctionABI.cpp	/^  static typename tuple_element<Index, Tuple>::type &get(Tuple &This) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
get	lib/StackAnalysis/FunctionABI.h	/^  const V &get(const K Key) const {$/;"	f	class:StackAnalysis::DefaultMap
get	lib/StackAnalysis/Intraprocedural.cpp	/^  Value get(llvm::Value *V) const {$/;"	f	class:StackAnalysis::Intraprocedural::BasicBlockState
get	tools/revng-lift/InstructionTranslator.cpp	/^InstructionArgumentsIterator<Const, false>::get(unsigned Index) const {$/;"	f	class:PTC::InstructionArgumentsIterator
get	tools/revng-lift/InstructionTranslator.cpp	/^InstructionArgumentsIterator<Const, true>::get(unsigned Index) const {$/;"	f	class:PTC::InstructionArgumentsIterator
get	tools/revng-lift/InstructionTranslator.cpp	/^InstructionArgumentsIterator<In, false>::get(unsigned Index) const {$/;"	f	class:PTC::InstructionArgumentsIterator
get	tools/revng-lift/InstructionTranslator.cpp	/^InstructionArgumentsIterator<In, true>::get(unsigned Index) const {$/;"	f	class:PTC::InstructionArgumentsIterator
get	tools/revng-lift/InstructionTranslator.cpp	/^InstructionArgumentsIterator<Out, false>::get(unsigned Index) const {$/;"	f	class:PTC::InstructionArgumentsIterator
get	tools/revng-lift/InstructionTranslator.cpp	/^InstructionArgumentsIterator<Out, true>::get(unsigned Index) const {$/;"	f	class:PTC::InstructionArgumentsIterator
get	tools/revng-lift/OSRA.cpp	/^  BoundedValue &get(BasicBlock *BB, const Value *V) {$/;"	f	class:BVMap
get	tools/revng-lift/SubGraph.h	/^    InnerNodeType get() const { return Value; }$/;"	f	class:SubGraph::Node
getAddend	tools/revng-lift/BinaryFile.cpp	/^  static uint64_t getAddend(llvm::object::Elf_Rel_Impl<T, false> Relocation) {$/;"	f	struct:RelocationHelper
getAddend	tools/revng-lift/BinaryFile.cpp	/^  static uint64_t getAddend(llvm::object::Elf_Rel_Impl<T, true> Relocation) {$/;"	f	struct:RelocationHelper
getAddressData	tools/revng-lift/BinaryFile.h	/^  getAddressData(uint64_t Address) const {$/;"	f	class:BinaryFile
getAnalysisUsage	tools/revng-lift/CodeGenerator.cpp	/^void CpuLoopFunctionPass::getAnalysisUsage(llvm::AnalysisUsage &AU) const {$/;"	f	class:CpuLoopFunctionPass
getAnalysisUsage	tools/revng-lift/JumpTargetManager.cpp	/^void TranslateDirectBranchesPass::getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:TranslateDirectBranchesPass
getAnalysisUsage	tools/revng-lift/SET.cpp	/^void SETPass::getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:SETPass
getBV	tools/revng-lift/OSRA.cpp	/^  getBV(const BoundedValue &Base, boost::icl::interval_set<T> Intervals) {$/;"	f	class:BoundedValueHelpers
getBasicBlockPC	include/revng/Support/IRHelpers.h	/^inline uint64_t getBasicBlockPC(llvm::BasicBlock *BB) {$/;"	f
getBlockAt	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::BasicBlock *getBlockAt(uint64_t PC) const {$/;"	f	class:GeneratedCodeBasicInfo
getBlockAt	tools/revng-lift/JumpTargetManager.cpp	/^BasicBlock *JumpTargetManager::getBlockAt(uint64_t PC) {$/;"	f	class:JumpTargetManager
getBlockColors	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  const ColorsList &getBlockColors(llvm::BasicBlock *BB) const {$/;"	f	class:RDA::Analysis
getBlockColors	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  getBlockColors(const NullColorsProvider &CP, llvm::BasicBlock *BB) {$/;"	f	struct:RDA::ColorsProviderTraits
getBlockColors	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^  getBlockColors(const ConditionNumberingPass &CNP, llvm::BasicBlock *BB) {$/;"	f	struct:RDA::ColorsProviderTraits
getBlockColors	tests/Unit/ReachingDefinitionsPass.cpp	/^  static const ColorsList &getBlockColors(const ColorMap &CP, BasicBlock *BB) {$/;"	f	struct:RDA::ColorsProviderTraits
getByCPUStateOffset	tools/revng-lift/VariableManager.cpp	/^VariableManager::getByCPUStateOffset(intptr_t Offset, std::string Name) {$/;"	f	class:VariableManager
getByCPUStateOffsetInternal	tools/revng-lift/VariableManager.cpp	/^VariableManager::getByCPUStateOffsetInternal(intptr_t Offset,$/;"	f	class:VariableManager
getByEnvOffset	tools/revng-lift/VariableManager.h	/^  getByEnvOffset(intptr_t Offset, std::string Name = "") {$/;"	f	class:VariableManager
getByType	lib/StackAnalysis/FunctionABI.h	/^CallSiteRegisterState::getByType() const {$/;"	f	class:StackAnalysis::CallSiteRegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline DeadRegisterArgumentsOfFunction &RegisterState::getByType() {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline DeadReturnValuesOfFunctionCall &CallSiteRegisterState::getByType() {$/;"	f	class:StackAnalysis::CallSiteRegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline DeadReturnValuesOfFunctionCall &RegisterState::getByType() {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline RegisterArgumentsOfFunctionCall &CallSiteRegisterState::getByType() {$/;"	f	class:StackAnalysis::CallSiteRegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline RegisterArgumentsOfFunctionCall &RegisterState::getByType() {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline UsedArgumentsOfFunction &RegisterState::getByType() {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline UsedReturnValuesOfFunction &RegisterState::getByType() {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline UsedReturnValuesOfFunctionCall &CallSiteRegisterState::getByType() {$/;"	f	class:StackAnalysis::CallSiteRegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline UsedReturnValuesOfFunctionCall &RegisterState::getByType() {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline const DeadRegisterArgumentsOfFunction &RegisterState::getByType() const {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline const DeadReturnValuesOfFunctionCall &RegisterState::getByType() const {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline const RegisterArgumentsOfFunctionCall &RegisterState::getByType() const {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline const UsedArgumentsOfFunction &RegisterState::getByType() const {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline const UsedReturnValuesOfFunction &RegisterState::getByType() const {$/;"	f	class:StackAnalysis::RegisterState
getByType	lib/StackAnalysis/FunctionABI.h	/^inline const UsedReturnValuesOfFunctionCall &RegisterState::getByType() const {$/;"	f	class:StackAnalysis::RegisterState
getCPUStateType	tools/revng-lift/VariableManager.h	/^  llvm::StructType *getCPUStateType() const { return CPUStateType; }$/;"	f	class:VariableManager
getCall	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  llvm::CallInst *getCall(llvm::BasicBlock *BB) const {$/;"	f	class:FunctionCallIdentification
getCall	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  llvm::CallInst *getCall(llvm::Instruction *I) const {$/;"	f	class:FunctionCallIdentification
getCall	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  llvm::CallInst *getCall(llvm::TerminatorInst *T) const {$/;"	f	class:FunctionCallIdentification
getCallTo	include/revng/Support/IRHelpers.h	/^inline llvm::CallInst *getCallTo(llvm::Instruction *I, llvm::StringRef Name) {$/;"	f
getCallee	include/revng/Support/IRHelpers.h	/^inline const llvm::Function *getCallee(const llvm::Instruction *I) {$/;"	f
getCallee	include/revng/Support/IRHelpers.h	/^inline llvm::Function *getCallee(llvm::Instruction *I) {$/;"	f
getCallee	lib/StackAnalysis/Intraprocedural.h	/^  llvm::BasicBlock *getCallee() const {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
getClobbered	include/revng/StackAnalysis/StackAnalysis.h	/^  getClobbered(llvm::BasicBlock *Function) const {$/;"	f	class:StackAnalysis::StackAnalysis
getColors	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  const llvm::SmallVector<int32_t, 4> *getColors(llvm::BasicBlock *BB) const {$/;"	f	class:ConditionNumberingPass
getComparison	tools/revng-lift/SimplifyComparisonsPass.h	/^  Comparison getComparison(llvm::CmpInst *Cmp) {$/;"	f	class:SimplifyComparisonsPass
getConstNode	tools/revng-lift/OSRA.cpp	/^static const llvm::BasicBlock *getConstNode(const CFGNode *Node) {$/;"	f	file:
getConstValue	include/revng/Support/IRHelpers.h	/^getConstValue(llvm::Constant *C, const llvm::DataLayout &DL) {$/;"	f
getConstantOffset	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static ConstantInt *getConstantOffset(Type *Int64Ty, int64_t O) {$/;"	f	file:
getContext	include/revng/Support/IRHelpers.h	/^inline llvm::LLVMContext &getContext(const llvm::BasicBlock *BB) {$/;"	f
getContext	include/revng/Support/IRHelpers.h	/^inline llvm::LLVMContext &getContext(const llvm::Function *F) {$/;"	f
getContext	include/revng/Support/IRHelpers.h	/^inline llvm::LLVMContext &getContext(const llvm::Instruction *I) {$/;"	f
getContext	include/revng/Support/IRHelpers.h	/^inline llvm::LLVMContext &getContext(const llvm::Module *M) {$/;"	f
getContext	include/revng/Support/IRHelpers.h	/^inline llvm::LLVMContext &getContext(const llvm::Value *I) {$/;"	f
getCurSourceRootCall	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^getCurSourceRootCall(const WorkItem &Item, const Function *Root) {$/;"	f	file:
getDestBRPCWrite	tools/revng-lift/JumpTargetManager.cpp	/^int64_t JumpTargetManager::getDestBRPCWrite(llvm::BasicBlock *block) {$/;"	f	class:JumpTargetManager
getEdge	tools/revng-lift/OSRA.cpp	/^  getEdge(BasicBlock *BB, BasicBlock *Predecessor, const Value *V) {$/;"	f	class:BVMap
getEdgeColor	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  getEdgeColor(llvm::BasicBlock *Source, llvm::BasicBlock *Destination) const {$/;"	f	class:RDA::Analysis
getEdgeColor	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  static int32_t getEdgeColor(const NullColorsProvider &CP,$/;"	f	struct:RDA::ColorsProviderTraits
getEdgeColor	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  getEdgeColor(llvm::BasicBlock *Source, llvm::BasicBlock *Destination) const {$/;"	f	class:ConditionNumberingPass
getEdgeColor	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^  static int32_t getEdgeColor(const ConditionNumberingPass &CNP,$/;"	f	struct:RDA::ColorsProviderTraits
getEdgeColor	tests/Unit/ReachingDefinitionsPass.cpp	/^  static int32_t getEdgeColor(const ColorMap &CP,$/;"	f	struct:RDA::ColorsProviderTraits
getEntryNode	include/revng/BasicAnalyses/CustomCFG.h	/^  static NodeType *getEntryNode(CustomCFGNode *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	lib/StackAnalysis/ABIIR.h	/^  static NodeRef getEntryNode(StackAnalysis::ABIIRBasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	tools/revng-lift/SubGraph.h	/^  static NodeRef getEntryNode(GraphType &G) { return G.EntryNode; }$/;"	f	struct:llvm::GraphTraits
getEquivalentPredicate	tools/revng-lift/SimplifyComparisonsPass.cpp	/^static Predicate getEquivalentPredicate(SimplifyComparisonsPass *SCP,$/;"	f	file:
getExtValue	include/revng/Support/IRHelpers.h	/^getExtValue(llvm::Constant *C, bool Sign, const llvm::DataLayout &DL) {$/;"	f
getFallthrough	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  llvm::BasicBlock *getFallthrough(llvm::BasicBlock *BB) const {$/;"	f	class:FunctionCallIdentification
getFallthrough	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  llvm::BasicBlock *getFallthrough(llvm::TerminatorInst *T) const {$/;"	f	class:FunctionCallIdentification
getFunctionCall	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::CallInst *getFunctionCall(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
getFunctionCall	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::CallInst *getFunctionCall(llvm::TerminatorInst *T) const {$/;"	f	class:GeneratedCodeBasicInfo
getFunctionCallCallee	include/revng/Support/revng.h	/^inline llvm::BasicBlock *getFunctionCallCallee(llvm::BasicBlock *BB) {$/;"	f
getFunctionNameString	lib/FunctionIsolation/IsolateFunctions.cpp	/^StringRef IFI::getFunctionNameString(MDNode *Node) {$/;"	f	class:IFI
getFunctionSummary	lib/StackAnalysis/Intraprocedural.h	/^  const IntraproceduralFunctionSummary &getFunctionSummary() {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
getGCBIOrNull	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^getGCBIOrNull<GeneratedCodeBasicInfo>(const GeneratedCodeBasicInfo &GCBI) {$/;"	f	namespace:RDA
getGCBIOrNull	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^inline const GeneratedCodeBasicInfo *getGCBIOrNull(const T &Obj) {$/;"	f	namespace:RDA
getIllegalValueDFG	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::getIllegalValueDFG(llvm::Value *v,$/;"	f	class:JumpTargetManager
getInterval	tools/revng-lift/OSRA.cpp	/^  static boost::icl::interval_set<T> getInterval(const BoundedValue &BV) {$/;"	f	class:BoundedValueHelpers
getJTReasons	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  uint32_t getJTReasons(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
getJTReasons	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  uint32_t getJTReasons(llvm::TerminatorInst *T) const {$/;"	f	class:GeneratedCodeBasicInfo
getKillReason	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  KillReason::Values getKillReason(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
getKillReason	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  KillReason::Values getKillReason(llvm::TerminatorInst *T) const {$/;"	f	class:GeneratedCodeBasicInfo
getKind	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  enum Kind getKind() const { return OffsetKind; }$/;"	f	class:CSVOffsets
getLarge	include/revng/ADT/LazySmallBitVector.h	/^  LargeStorage &getLarge() {$/;"	f	class:LazySmallBitVector
getLarge	include/revng/ADT/LazySmallBitVector.h	/^  const LargeStorage &getLarge() const {$/;"	f	class:LazySmallBitVector
getLastAssignment	tools/revng-lift/JumpTargetManager.cpp	/^JumpTargetManager:: getLastAssignment(llvm::Value *v, $/;"	f	class:JumpTargetManager
getLastUniqueWrite	tools/revng-lift/InstructionTranslator.cpp	/^static StoreInst *getLastUniqueWrite(BasicBlock *BB, const Value *Register) {$/;"	f	file:
getLegalValueRange	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::getLegalValueRange(llvm::BasicBlock *thisBlock){$/;"	f	class:JumpTargetManager
getLimitedValue	include/revng/Support/IRHelpers.h	/^inline uint64_t getLimitedValue(const llvm::Value *V) {$/;"	f
getLinkRegister	lib/StackAnalysis/Cache.h	/^  llvm::GlobalVariable *getLinkRegister(llvm::BasicBlock *Function) const {$/;"	f	class:StackAnalysis::Cache
getLoadAddressValue	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static Value *getLoadAddressValue(Instruction *I) {$/;"	f	file:
getLoadedType	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static Type *getLoadedType(Instruction *I) {$/;"	f	file:
getMaxValue	tools/revng-lift/InstructionTranslator.cpp	/^static uint64_t getMaxValue(unsigned Bits) {$/;"	f	file:
getModifyAndReassign	lib/StackAnalysis/Intraprocedural.cpp	/^static llvm::Value *getModifyAndReassign(Instruction *I) {$/;"	f	namespace:StackAnalysis::Intraprocedural
getModule	include/revng/Support/IRHelpers.h	/^inline const llvm::Module *getModule(const llvm::BasicBlock *BB) {$/;"	f
getModule	include/revng/Support/IRHelpers.h	/^inline const llvm::Module *getModule(const llvm::Function *F) {$/;"	f
getModule	include/revng/Support/IRHelpers.h	/^inline const llvm::Module *getModule(const llvm::Instruction *I) {$/;"	f
getModule	include/revng/Support/IRHelpers.h	/^inline const llvm::Module *getModule(const llvm::Value *I) {$/;"	f
getName	include/revng/StackAnalysis/FunctionsSummary.h	/^inline const char *getName(Values Type) {$/;"	f	namespace:StackAnalysis::BranchType
getName	include/revng/StackAnalysis/FunctionsSummary.h	/^inline const char *getName(Values Type) {$/;"	f	namespace:StackAnalysis::FunctionType
getName	include/revng/Support/IRHelpers.h	/^inline std::string getName(const llvm::BasicBlock *BB) {$/;"	f
getName	include/revng/Support/IRHelpers.h	/^inline std::string getName(const llvm::Instruction *I) {$/;"	f
getName	include/revng/Support/IRHelpers.h	/^inline std::string getName(const llvm::Value *V) {$/;"	f
getName	include/revng/Support/revng.h	/^inline const char *getName(Values Reason) {$/;"	f	namespace:JTReason
getName	include/revng/Support/revng.h	/^inline llvm::StringRef getName(Values Reason) {$/;"	f	namespace:KillReason
getName	lib/StackAnalysis/ABIIR.h	/^  llvm::StringRef getName() const { return ::getName(BB); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
getName	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^inline const char *getName(Values Type) {$/;"	f	namespace:StackAnalysis::LocalSlotType
getName	tools/revng-lift/BinaryFile.h	/^inline const char *getName(Values V) {$/;"	f	namespace:LabelOrigin
getName	tools/revng-lift/BinaryFile.h	/^inline const char *getName(Values V) {$/;"	f	namespace:LabelType
getName	tools/revng-lift/BinaryFile.h	/^inline const char *getName(Values V) {$/;"	f	namespace:SymbolType
getName	tools/revng-lift/JumpTargetManager.h	/^inline const char *getName(Values V) {$/;"	f	namespace:CFGForm
getNext	include/revng/Support/IRHelpers.h	/^inline llvm::Instruction *getNext(llvm::Instruction *I) {$/;"	f
getNextPC	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  uint64_t getNextPC(llvm::Instruction *TheInstruction) const {$/;"	f	class:GeneratedCodeBasicInfo
getNextPC	tools/revng-lift/JumpTargetManager.cpp	/^uint64_t TranslateDirectBranchesPass::getNextPC(Instruction *TheInstruction) {$/;"	f	class:TranslateDirectBranchesPass
getNextPC	tools/revng-lift/JumpTargetManager.h	/^  uint64_t getNextPC(llvm::Instruction *TheInstruction) const {$/;"	f	class:JumpTargetManager
getNextSourceRootCall	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^getNextSourceRootCall(const WorkItem &Item, const Function *Root) {$/;"	f	file:
getNode	include/revng/BasicAnalyses/CustomCFG.h	/^  CustomCFGNode *getNode(llvm::BasicBlock *BB) {$/;"	f	class:CustomCFG
getNode	include/revng/BasicAnalyses/CustomCFG.h	/^  const CustomCFGNode *getNode(const llvm::BasicBlock *BB) const {$/;"	f	class:CustomCFG
getNode	tools/revng-lift/OSRA.cpp	/^static llvm::BasicBlock *getNode(CFGNode *Node) {$/;"	f	file:
getNumSources	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  SmallVector<const Use *, 3>::size_type getNumSources() const {$/;"	f	class:WorkItem
getOSR	tools/revng-lift/OSRA.cpp	/^  const OSR *getOSR(const Value *V) const {$/;"	f	class:OSRA
getOSR	tools/revng-lift/OSRA.h	/^  const OSR *getOSR(const llvm::Value *V) {$/;"	f	class:OSRAPass
getOffsetsOrExploreSrc	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^CPUSAOA::getOffsetsOrExploreSrc(Value *V, WorkItem &Item, bool IsLoad) const {$/;"	f	class:CPUSAOA
getOperand	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  Term *getOperand(unsigned OperandIndex) {$/;"	f	class:BinaryTerm
getOperandUse	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  TermUse getOperandUse(unsigned OperandIndex) {$/;"	f	class:BinaryTerm
getOption	tools/revng-lift/JumpTargetManager.cpp	/^getOption(StringMap<cl::Option *> &Options, const char *Name) {$/;"	f	file:
getOrCreate	tools/revng-lift/VariableManager.cpp	/^Value *VariableManager::getOrCreate(unsigned TemporaryId, bool Reading) {$/;"	f	class:VariableManager
getOrDefault	lib/StackAnalysis/FunctionABI.h	/^  const V &getOrDefault(const K Key) const {$/;"	f	class:StackAnalysis::DefaultMap
getPC	lib/BasicAnalyses/GeneratedCodeBasicInfo.cpp	/^GeneratedCodeBasicInfo::getPC(Instruction *TheInstruction) const {$/;"	f	class:GeneratedCodeBasicInfo
getPC	tools/revng-lift/JumpTargetManager.cpp	/^  uint64_t getPC(BasicBlock *BB) {$/;"	f	class:BasicBlockVisitor	file:
getPC	tools/revng-lift/JumpTargetManager.cpp	/^JumpTargetManager::getPC(Instruction *TheInstruction) const {$/;"	f	class:JumpTargetManager
getPCFromNewPCCall	tools/revng-lift/JumpTargetManager.h	/^  uint64_t getPCFromNewPCCall(llvm::Instruction *I) {$/;"	f	class:JumpTargetManager
getPointer	tools/revng-lift/BinaryFile.h	/^  uint64_t getPointer(Pointer Ptr) const {$/;"	f	class:BinaryFile
getPrevPCWrite	tools/revng-lift/JumpTargetManager.cpp	/^StoreInst *JumpTargetManager::getPrevPCWrite(Instruction *TheInstruction) {$/;"	f	class:JumpTargetManager
getPrevious	include/revng/Support/IRHelpers.h	/^inline llvm::Instruction *getPrevious(llvm::Instruction *I) {$/;"	f
getReachedLoads	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^ConditionalReachedLoadsPass::getReachedLoads(const Instruction *I) const {$/;"	f	class:ConditionalReachedLoadsPass
getReachers	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  getReachers(llvm::LoadInst *I) const {$/;"	f	class:RDA::Analysis
getReachingDefinitions	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  getReachingDefinitions(llvm::LoadInst *Load) const {$/;"	f	class:ConditionalReachedLoadsPass
getReachingDefinitions	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  getReachingDefinitions(llvm::LoadInst *Load) const {$/;"	f	class:ReachingDefinitionsPass
getReasonNames	tools/revng-lift/JumpTargetManager.h	/^    std::vector<const char *> getReasonNames() const {$/;"	f	class:JumpTargetManager::JumpTarget
getReasons	tools/revng-lift/JumpTargetManager.h	/^    uint32_t getReasons() const { return Reasons; }$/;"	f	class:JumpTargetManager::JumpTarget
getRecursionRoot	lib/StackAnalysis/InterproceduralAnalysis.h	/^  const Analysis *getRecursionRoot(llvm::BasicBlock *Entry) const {$/;"	f	class:StackAnalysis::InterproceduralAnalysis
getRegisterSize	tools/revng-lift/InstructionTranslator.cpp	/^static unsigned getRegisterSize(unsigned Opcode) {$/;"	f	file:
getResetColors	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  getResetColors(const NullColorsProvider &CP, llvm::BasicBlock *BB) {$/;"	f	struct:RDA::ColorsProviderTraits
getResetColors	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  getResetColors(llvm::BasicBlock *BB) const {$/;"	f	class:RDA::Analysis
getResetColors	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  getResetColors(llvm::BasicBlock *BB) const {$/;"	f	class:ConditionNumberingPass
getResetColors	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^  getResetColors(const ConditionNumberingPass &CNP, llvm::BasicBlock *BB) {$/;"	f	struct:RDA::ColorsProviderTraits
getResetColors	tests/Unit/ReachingDefinitionsPass.cpp	/^  getResetColors(const ColorMap &CNP, llvm::BasicBlock *BB) {$/;"	f	struct:RDA::ColorsProviderTraits
getSExtValue	include/revng/Support/IRHelpers.h	/^inline uint64_t getSExtValue(llvm::Constant *C, const llvm::DataLayout &DL) {$/;"	f
getSignedLimitedValue	include/revng/Support/IRHelpers.h	/^inline uint64_t getSignedLimitedValue(const llvm::Value *V) {$/;"	f
getSize	include/revng/Support/MemoryAccess.h	/^  unsigned getSize(llvm::Type *T) {$/;"	f	class:TypeSizeProvider
getSmall	include/revng/ADT/LazySmallBitVector.h	/^  uintptr_t getSmall() const {$/;"	f	class:LazySmallBitVector
getStoreAddressValue	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static Value *getStoreAddressValue(Instruction *I) {$/;"	f	file:
getStoredType	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^static Type *getStoredType(Instruction *I) {$/;"	f	file:
getTemporaryName	tools/revng-lift/PTCDump.cpp	/^static void getTemporaryName(char *Buffer,$/;"	f	file:
getText	lib/Support/DebugHelper.cpp	/^static StringRef getText(const Instruction *Instruction, unsigned Kind) {$/;"	f	file:
getType	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  BlockType getType(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
getType	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  BlockType getType(llvm::TerminatorInst *T) const {$/;"	f	class:GeneratedCodeBasicInfo
getTypeAtOffset	tools/revng-lift/VariableManager.cpp	/^getTypeAtOffset(const DataLayout *TheLayout, Type *VarType, intptr_t Offset) {$/;"	f	file:
getUniqueString	lib/Support/IRHelpers.cpp	/^Constant *getUniqueString(Module *M,$/;"	f
getZExtValue	include/revng/Support/IRHelpers.h	/^inline uint64_t getZExtValue(llvm::Constant *C, const llvm::DataLayout &DL) {$/;"	f
get_unique	scripts/monotone-framework.py	/^def get_unique(container):$/;"	f
global	tests/Runtime/global.c	/^int global = 1;$/;"	v
globalID	lib/StackAnalysis/ASSlot.h	/^  static ASID globalID() { return ASID(GlobalID); }$/;"	f	class:StackAnalysis::ASID
globalVariable	include/revng/Support/MemoryAccess.h	/^  llvm::Value *globalVariable() const {$/;"	f	class:MemoryAccess
greaterThan	include/revng/Support/MonotoneFramework.h	/^  bool greaterThan(const ElementBase &RHS) const {$/;"	f	class:ElementBase
greaterThan	include/revng/Support/MonotoneFramework.h	/^  bool greaterThan(const MonotoneFrameworkSet &Other) const {$/;"	f	class:MonotoneFrameworkSet
greaterThan	lib/StackAnalysis/ASSlot.h	/^  bool greaterThan(const ASID &Other) const {$/;"	f	class:StackAnalysis::ASID
greaterThan	lib/StackAnalysis/ASSlot.h	/^  bool greaterThan(const ASSlot &Other) const {$/;"	f	class:StackAnalysis::ASSlot
greaterThan	lib/StackAnalysis/Element.h	/^  bool greaterThan(const AddressSpace &Other) const {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
greaterThan	lib/StackAnalysis/Element.h	/^  bool greaterThan(const Element &RHS) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
greaterThan	lib/StackAnalysis/Element.h	/^  bool greaterThan(const Value &Other) const {$/;"	f	class:StackAnalysis::Intraprocedural::Value
greaterThan	lib/StackAnalysis/FunctionABI.cpp	/^  bool greaterThan(const Element &Other) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
greaterThan	lib/StackAnalysis/FunctionABI.cpp	/^  bool greaterThan(const Inhibitor &Other) const {$/;"	f	class:StackAnalysis::Inhibitor
greaterThan	lib/Support/ExampleAnalysis.cpp	/^  bool greaterThan(const LatticeElement &) { revng_abort(); }$/;"	f	class:ExampleAnalysis::LatticeElement
half	tests/Runtime/function-call.c	/^int half(int parameter) {$/;"	f
handleArithmeticOperator	tools/revng-lift/OSRA.cpp	/^void OSRA::handleArithmeticOperator(Instruction *I) {$/;"	f	class:OSRA
handleBinaryOperation	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::handleBinaryOperation(llvm::Instruction *current, $/;"	f	class:JumpTargetManager
handleBranch	tools/revng-lift/OSRA.cpp	/^void OSRA::handleBranch(Instruction *I) {$/;"	f	class:OSRA
handleCall	lib/StackAnalysis/Intraprocedural.cpp	/^Interrupt Analysis::handleCall(Instruction *Caller,$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
handleComparison	tools/revng-lift/OSRA.cpp	/^void OSRA::handleComparison(Instruction *I) {$/;"	f	class:OSRA
handleConversionOperations	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::handleConversionOperations(llvm::Instruction *current,$/;"	f	class:JumpTargetManager
handleEdge	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  llvm::Optional<MISet> handleEdge(const MISet &Original,$/;"	f	class:RDA::Analysis
handleEdge	include/revng/Support/MonotoneFramework.h	/^  llvm::Optional<LatticeElement> handleEdge(const LatticeElement &Original,$/;"	f	class:MonotoneFramework
handleEdge	lib/StackAnalysis/FunctionABI.cpp	/^  llvm::Optional<Element<E>> handleEdge(const Element<E> &Original,$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
handleEdge	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  llvm::Optional<Element> handleEdge(const Element &Original,$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
handleEdge	lib/StackAnalysis/Intraprocedural.h	/^  llvm::Optional<Element> handleEdge(const Element &Original,$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
handleEdge	lib/Support/ExampleAnalysis.cpp	/^  llvm::Optional<LatticeElement> handleEdge(const LatticeElement &Original,$/;"	f	class:ExampleAnalysis::Analysis
handleGenericInstruction	lib/StackAnalysis/Intraprocedural.cpp	/^  void handleGenericInstruction(Instruction *I) {$/;"	f	class:StackAnalysis::Intraprocedural::BasicBlockState
handleIllegalJumpAddress	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::handleIllegalJumpAddress(llvm::BasicBlock *thisBlock, $/;"	f	class:JumpTargetManager
handleIllegalMemoryAccess	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::handleIllegalMemoryAccess(llvm::BasicBlock *thisBlock){$/;"	f	class:JumpTargetManager
handleIndirectInst	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::handleIndirectInst(llvm::BasicBlock *thisBlock, $/;"	f	class:JumpTargetManager
handleInstruction	tools/revng-lift/SET.cpp	/^Value *SET::handleInstruction(Instruction *Target, Value *V) {$/;"	f	class:SET
handleInstructionWithOSRA	tools/revng-lift/SET.cpp	/^bool SET::handleInstructionWithOSRA(Instruction *Target, Value *V) {$/;"	f	class:SET
handleLogicalOperator	tools/revng-lift/OSRA.cpp	/^void OSRA::handleLogicalOperator(Instruction *I) {$/;"	f	class:OSRA
handleMemoryAccess	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::handleMemoryAccess(llvm::Instruction *current, $/;"	f	class:JumpTargetManager
handleMemoryOperation	tools/revng-lift/OSRA.cpp	/^void OSRA::handleMemoryOperation(Instruction *I) {$/;"	f	class:OSRA
handleSelectOperation	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::handleSelectOperation(llvm::Instruction *current, $/;"	f	class:JumpTargetManager
handleSumJump	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::handleSumJump(Instruction *SumJump) {$/;"	f	class:JumpTargetManager
handleTerminator	lib/StackAnalysis/Intraprocedural.cpp	/^Interrupt Analysis::handleTerminator(TerminatorInst *T,$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
handleUnaryOperator	tools/revng-lift/OSRA.cpp	/^void OSRA::handleUnaryOperator(Instruction *I) {$/;"	f	class:OSRA
handle_sigsegv	runtime/support.c	/^void handle_sigsegv(int signo, siginfo_t *info, void *opaque_context) {$/;"	f
harvest	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::harvest() {$/;"	f	class:JumpTargetManager
harvestBTBasicBlock	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::harvestBTBasicBlock(llvm::BasicBlock *thisBlock,$/;"	f	class:JumpTargetManager
harvestCallBasicBlock	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::harvestCallBasicBlock(llvm::BasicBlock *thisBlock,uint64_t thisAddr){$/;"	f	class:JumpTargetManager
harvestGlobalData	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::harvestGlobalData() {$/;"	f	class:JumpTargetManager
harvestbranchBasicBlock	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::harvestbranchBasicBlock(uint64_t nextAddr,$/;"	f	class:JumpTargetManager
hasDirectContent	lib/StackAnalysis/Element.h	/^  bool hasDirectContent() const { return !DirectContent.isInvalid(); }$/;"	f	class:StackAnalysis::Intraprocedural::Value
hasEnv	tools/revng-lift/VariableManager.h	/^  bool hasEnv() const { return Env != nullptr; }$/;"	f	class:VariableManager
hasIndirectTailCall	lib/StackAnalysis/Intraprocedural.h	/^  bool hasIndirectTailCall() const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
hasJT	tools/revng-lift/JumpTargetManager.h	/^  bool hasJT(uint64_t PC) { return JumpTargets.count(PC) != 0; }$/;"	f	class:JumpTargetManager
hasNode	include/revng/BasicAnalyses/CustomCFG.h	/^  bool hasNode(const llvm::BasicBlock *BB) const {$/;"	f	class:CustomCFG
hasOffsetSet	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool hasOffsetSet() const { return hasOffsetSet(OffsetKind); }$/;"	f	class:CSVOffsets
hasOffsetSet	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static bool hasOffsetSet(const Kind K) {$/;"	f	class:CSVOffsets
hasPredecessor	include/revng/Support/IRHelpers.h	/^inline bool hasPredecessor(llvm::BasicBlock *BB, llvm::BasicBlock *Target) {$/;"	f
hasPredecessors	include/revng/BasicAnalyses/CustomCFG.h	/^  bool hasPredecessors() const { return Predecessors.size() != 0; }$/;"	f	class:CustomCFGNode
hasPredecessors	tools/revng-lift/JumpTargetManager.cpp	/^bool JumpTargetManager::hasPredecessors(BasicBlock *BB) const {$/;"	f	class:JumpTargetManager
hasReason	include/revng/Support/revng.h	/^inline bool hasReason(uint32_t Reasons, Values ToCheck) {$/;"	f	namespace:JTReason
hasReason	tools/revng-lift/JumpTargetManager.h	/^    bool hasReason(JTReason::Values Reason) const {$/;"	f	class:JumpTargetManager::JumpTarget
hasRelocationAddend	include/revng/Support/revng.h	/^  bool hasRelocationAddend() const { return HasRelocationAddend; }$/;"	f	class:Architecture
hasSignedness	tools/revng-lift/OSRA.h	/^    bool hasSignedness() const {$/;"	f	class:OSRAPass::BoundedValue
hasSuccessors	include/revng/BasicAnalyses/CustomCFG.h	/^  bool hasSuccessors() const { return Successors.size() != 0; }$/;"	f	class:CustomCFGNode
hasSuccessors	lib/StackAnalysis/Intraprocedural.h	/^  bool hasSuccessors() const {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
hasSymbol	tools/revng-lift/SET.cpp	/^  bool hasSymbol() const { return SymbolName.hasValue(); }$/;"	f	class:MaterializedValue
hasSyscalls	tools/revng-lift/NoReturnAnalysis.h	/^  bool hasSyscalls() const { return NoDCE != nullptr; }$/;"	f	class:NoReturnAnalysis
hasTag	lib/StackAnalysis/Element.h	/^  bool hasTag() const { return not TheTag.isInvalid(); }$/;"	f	class:StackAnalysis::Intraprocedural::Value
hasTrackedValues	tools/revng-lift/SET.cpp	/^  bool hasTrackedValues() const { return not TrackedValues.empty(); }$/;"	f	class:OperationsStack
hash	lib/StackAnalysis/ASSlot.h	/^struct hash<StackAnalysis::ASID> {$/;"	s	namespace:std
hash	lib/StackAnalysis/ASSlot.h	/^struct hash<StackAnalysis::ASSlot> {$/;"	s	namespace:std
hash	lib/StackAnalysis/Element.cpp	/^size_t ASID::hash() const {$/;"	f	class:StackAnalysis::ASID
hash	lib/StackAnalysis/Element.cpp	/^size_t ASSlot::hash() const {$/;"	f	class:StackAnalysis::ASSlot
hash	lib/StackAnalysis/Element.cpp	/^size_t AddressSpace::hash() const {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
hash	lib/StackAnalysis/Element.cpp	/^size_t Element::hash() const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
hash	lib/StackAnalysis/Element.cpp	/^size_t Value::hash() const {$/;"	f	class:StackAnalysis::Intraprocedural::Value
hash	lib/StackAnalysis/Element.h	/^struct hash<StackAnalysis::Intraprocedural::AddressSpace> {$/;"	s	namespace:std
hash	lib/StackAnalysis/Element.h	/^struct hash<StackAnalysis::Intraprocedural::Element> {$/;"	s	namespace:std
hash	lib/StackAnalysis/Element.h	/^struct hash<StackAnalysis::Intraprocedural::Value> {$/;"	s	namespace:std
haveBB	tools/revng-lift/JumpTargetManager.h	/^  unsigned int haveBB;$/;"	m	class:JumpTargetManager
haveTranslatedPC	tools/revng-lift/JumpTargetManager.cpp	/^bool JumpTargetManager::haveTranslatedPC(uint64_t pc, uint64_t next){$/;"	f	class:JumpTargetManager
head	include/revng/ADT/Queue.h	/^  T head() const { return Queue.front(); }$/;"	f	class:QueueImpl
head	include/revng/Support/MonotoneFramework.h	/^  Iterated head() const { return Queue.head(); }$/;"	f	class:MonotoneFrameworkWorkList
head	include/revng/Support/MonotoneFramework.h	/^  Iterated head() const {$/;"	f	class:MonotoneFrameworkWorkList
head	tools/revng-lift/JumpTargetManager.h	/^    llvm::BasicBlock *head() const { return BB; }$/;"	f	class:JumpTargetManager::JumpTarget
height	tools/revng-lift/SET.cpp	/^  unsigned height() const { return Operations.size(); }$/;"	f	class:OperationsStack
helper	tests/Analysis/x86_64/StackAnalysis/helper.S	/^helper:$/;"	l
helperName	tools/revng-lift/InstructionTranslator.cpp	/^  std::string helperName() const {$/;"	f	class:PTC::InstructionImpl
highlightConditionEdges	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^inline std::set<llvm::BasicBlock *> highlightConditionEdges(llvm::Function &F) {$/;"	f
i1	scripts/monotone-framework.py	/^        i1 = int(v1.attr["index"])$/;"	v
i2	scripts/monotone-framework.py	/^        i2 = int(v2.attr["index"])$/;"	v
id	lib/StackAnalysis/ASSlot.h	/^  uint32_t id() const { return ID; }$/;"	f	class:StackAnalysis::ASID
id	lib/StackAnalysis/Element.h	/^  ASID id() const { return ID; }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
identifyComparisonOperands	tools/revng-lift/OSRA.cpp	/^OSRA::identifyComparisonOperands(Value *V, BasicBlock *BB) const {$/;"	f	class:OSRA
identifyIdentityLoads	lib/StackAnalysis/Cache.cpp	/^void Cache::identifyIdentityLoads(const Function *F) {$/;"	f	class:StackAnalysis::Cache
identifyLinkRegisters	lib/StackAnalysis/Cache.cpp	/^void Cache::identifyLinkRegisters(const Module *M) {$/;"	f	class:StackAnalysis::Cache
identifyOperands	tools/revng-lift/OSRA.cpp	/^  identifyOperands(const Instruction *I, const DataLayout &DL) {$/;"	f	class:OSRA
identifyOperands	tools/revng-lift/OSRA.cpp	/^OSRAPass::identifyOperands(std::map<const Value *, const OSR> &OSRs,$/;"	f	class:OSRAPass
identifyOperands	tools/revng-lift/OSRA.h	/^  identifyOperands(const llvm::Instruction *I, const llvm::DataLayout &DL) {$/;"	f	class:OSRAPass
identifyPartialStores	lib/StackAnalysis/Cache.cpp	/^void Cache::identifyPartialStores(const Function *F) {$/;"	f	class:StackAnalysis::Cache
ignore	runtime/early-linked.c	/^intptr_t ignore(void) {$/;"	f
importHelperFunctionDeclaration	tools/revng-lift/CodeGenerator.cpp	/^Function *CodeGenerator::importHelperFunctionDeclaration(StringRef Name) {$/;"	f	class:CodeGenerator
inArgCount	tools/revng-lift/InstructionTranslator.cpp	/^inline unsigned CallInstruction::inArgCount() const {$/;"	f	class:PTC::CallInstruction
inArgCount	tools/revng-lift/InstructionTranslator.cpp	/^inline unsigned Instruction::inArgCount() const {$/;"	f	class:PTC::Instruction
inBlackList	tools/revng-lift/OSRA.cpp	/^  bool inBlackList(BasicBlock *BB) { return BlockBlackList.count(BB) > 0; }$/;"	f	class:OSRA
inMContext	include/revng/Support/revng.h	/^  bool inMContext() const { return MContextIndex != NotInMContext; }$/;"	f	class:ABIRegister
incoherentCalls	lib/StackAnalysis/ABIIR.cpp	/^std::set<FunctionCall> ABIFunction::incoherentCalls() {$/;"	f	class:StackAnalysis::ABIFunction
incoherentCalls	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  const std::set<FunctionCall> &incoherentCalls() { return Incoherent; }$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
incoherentFunctions	lib/StackAnalysis/Intraprocedural.h	/^  const std::set<llvm::BasicBlock *> &incoherentFunctions() const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
increment	include/revng/ADT/LazySmallBitVector.h	/^inline void LazySmallBitVectorIterator<LSBV>::increment() {$/;"	f	class:LazySmallBitVectorIterator
indent	include/revng/Support/Debug.h	/^  void indent(unsigned Level = 1) {$/;"	f	class:Logger
indirectCall	lib/StackAnalysis/FunctionABI.cpp	/^  void indirectCall() {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
indirect_caller	tests/Analysis/x86_64/StackAnalysis/indirect-call-callee-saved.S	/^indirect_caller:$/;"	l
indirect_jump	tests/Analysis/arm/switch-disjoint-ranges.S	/^indirect_jump:$/;"	l
indirectcall	tests/Analysis/arm/indirect-call.S	/^indirectcall:$/;"	l
indirectcall	tests/Analysis/x86_64/indirect-call.S	/^indirectcall:$/;"	l
init	include/revng/Support/Debug.h	/^inline void Logger<false>::init() {$/;"	f	class:Logger
init	include/revng/Support/Debug.h	/^inline void Logger<true>::init() {$/;"	f	class:Logger
init	include/revng/Support/Statistics.h	/^inline void CounterMap<K, T>::init() {$/;"	f	class:CounterMap
init	include/revng/Support/Statistics.h	/^inline void RunningStatistics::init() {$/;"	f	class:RunningStatistics
init_tracing	runtime/support.c	/^void init_tracing(void) {$/;"	f
initial	lib/StackAnalysis/Element.h	/^  static Element initial() {$/;"	f	class:StackAnalysis::Intraprocedural::Element
initial	lib/StackAnalysis/FunctionABI.cpp	/^  static AnalysesWrapper initial(bool IsReturn) {$/;"	f	class:StackAnalysis::AnalysesWrapper
initial	lib/StackAnalysis/FunctionABI.cpp	/^  static void initial(Tuple &, bool) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
initial	lib/StackAnalysis/FunctionABI.cpp	/^  static void initial(Tuple &This, bool IsReturn) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
initialize	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  void initialize() {$/;"	f	class:RDA::Analysis
initialize	include/revng/Support/MemoryAccess.h	/^  void initialize(llvm::Value *Pointer) {$/;"	f	class:MemoryAccess
initialize	include/revng/Support/MemoryAccess.h	/^  void initialize(llvm::Value *Pointer,$/;"	f	class:MemoryAccess
initialize	include/revng/Support/MonotoneFramework.h	/^  void initialize() {$/;"	f	class:MonotoneFramework
initialize	lib/StackAnalysis/FunctionABI.cpp	/^  void initialize() {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
initialize	lib/StackAnalysis/Intraprocedural.cpp	/^void Analysis::initialize() {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
initialize	tools/revng-lift/OSRA.cpp	/^  void initialize(std::set<BasicBlock *> *BlackList,$/;"	f	class:BVMap
insert	include/revng/ADT/Queue.h	/^  void insert(T Element) {$/;"	f	class:QueueImpl
insert	include/revng/ADT/SmallMap.h	/^  std::pair<iterator, bool> insert(const Pair &P) {$/;"	f	class:SmallMap
insert	include/revng/ADT/UniquedStack.h	/^  void insert(T Element) {$/;"	f	class:UniquedStack
insert	include/revng/Support/MonotoneFramework.h	/^  void insert(Iterated Entry) { Queue.insert(Entry); }$/;"	f	class:MonotoneFrameworkWorkList
insert	include/revng/Support/MonotoneFramework.h	/^  void insert(Iterated Entry) {$/;"	f	class:MonotoneFrameworkWorkList
insert	include/revng/Support/MonotoneFramework.h	/^  void insert(T Key) { Set.insert(Key); }$/;"	f	class:MonotoneFrameworkSet
insert	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  void insert(int64_t O) { Offsets.insert(O); }$/;"	f	class:CSVOffsets
insert	tools/revng-lift/SET.cpp	/^  void insert(Instruction *I) {$/;"	f	class:OperationsStack
insertCallSiteOffset	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void CPUSAOA::insertCallSiteOffset(Value *V, CSVOffsets &&Offset) {$/;"	f	class:CPUSAOA
insertExecutableRanges	tools/revng-lift/BinaryFile.h	/^  void insertExecutableRanges(std::back_insert_iterator<C> Inserter) const {$/;"	f	struct:SegmentInfo
insertIfNew	tools/revng-lift/SET.cpp	/^  bool insertIfNew(Instruction *I) { return insertIfNew(I, I); }$/;"	f	class:OperationsStack
insertIfNew	tools/revng-lift/SET.cpp	/^  bool insertIfNew(Instruction *I, Instruction *Ref) {$/;"	f	class:OperationsStack
insertOrCombine	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  static void insertOrCombine(Value *V,$/;"	f	class:CRTPOffsetFolder
insert_or_assign	include/revng/Support/MonotoneFramework.h	/^  static void insert_or_assign(std::map<K, V> &Map, K Key, V &&Value) {$/;"	f	class:MonotoneFramework
install	lib/Support/Statistics.cpp	/^void OnQuitRegistry::install() {$/;"	f	class:OnQuitRegistry
installStatistics	lib/Support/Statistics.cpp	/^void installStatistics() {$/;"	f
install_sigsegv_handler	runtime/support.c	/^void install_sigsegv_handler(void) {$/;"	f
instructionAlignment	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  unsigned instructionAlignment() const { return InstructionAlignment; }$/;"	f	class:GeneratedCodeBasicInfo
instructionAlignment	include/revng/Support/revng.h	/^  uint32_t instructionAlignment() const { return InstructionAlignment; }$/;"	f	class:Architecture
instructionByName	tests/Unit/LLVMTestHelpers.h	/^instructionByName(llvm::Function *F, const char *Name) {$/;"	f
instructionRange	lib/StackAnalysis/ABIIR.h	/^instructionRange<ABIIRBasicBlock::range, true>(ABIIRBasicBlock *BB) {$/;"	f	namespace:StackAnalysis
instructionRange	lib/StackAnalysis/ABIIR.h	/^instructionRange<ABIIRBasicBlock::reverse_range, false>(ABIIRBasicBlock *BB) {$/;"	f	namespace:StackAnalysis
intermediate	tests/Analysis/x86_64/StackAnalysis/recursion.S	/^intermediate:$/;"	l
intersect	include/revng/Support/MemoryAccess.h	/^  bool intersect(std::pair<uint64_t, uint64_t> A,$/;"	f	class:MemoryAccess
invalid	lib/StackAnalysis/ASSlot.h	/^  static ASSlot invalid() { return ASSlot(ASID::invalidID(), 0); }$/;"	f	class:StackAnalysis::ASSlot
invalid	tools/revng-lift/SET.cpp	/^  static MaterializedValue invalid() { return MaterializedValue(); }$/;"	f	class:MaterializedValue
invalidID	lib/StackAnalysis/ASSlot.h	/^  static ASID invalidID() { return ASID(InvalidID); }$/;"	f	class:StackAnalysis::ASID
is64	tools/revng-lift/BinaryFile.cpp	/^bool DwarfReader<object::ELF32BE>::is64() const {$/;"	f	class:DwarfReader
is64	tools/revng-lift/BinaryFile.cpp	/^bool DwarfReader<object::ELF32LE>::is64() const {$/;"	f	class:DwarfReader
is64	tools/revng-lift/BinaryFile.cpp	/^bool DwarfReader<object::ELF64BE>::is64() const {$/;"	f	class:DwarfReader
is64	tools/revng-lift/BinaryFile.cpp	/^bool DwarfReader<object::ELF64LE>::is64() const {$/;"	f	class:DwarfReader
isAbsoluteValue	tools/revng-lift/BinaryFile.h	/^  bool isAbsoluteValue() const { return Type == LabelType::AbsoluteValue; }$/;"	f	class:Label
isActive	tools/revng-lift/OSRA.cpp	/^  bool isActive(unsigned CurrentHeight) const {$/;"	f	class:Reacher
isApproximate	tools/revng-lift/SET.cpp	/^  bool isApproximate() const { return Approximate; }$/;"	f	class:OperationsStack
isArgument	lib/StackAnalysis/FunctionABI.h	/^  bool isArgument() const {$/;"	f	class:StackAnalysis::RegisterState
isAvailable	tools/revng-lift/BinaryFile.cpp	/^  bool isAvailable() const { return HasAddress; }$/;"	f	class:FilePortion
isBaseRelativeValue	tools/revng-lift/BinaryFile.h	/^  bool isBaseRelativeValue() const {$/;"	f	class:Label
isBetterThan	tools/revng-lift/JumpTargetManager.cpp	/^static bool isBetterThan(const Label *NewCandidate, const Label *OldCandidate) {$/;"	f	file:
isBlacklisted	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isBlacklisted(llvm::BasicBlock *Value) const {$/;"	f	struct:BlackListTrait
isBlacklisted	include/revng/Support/IRHelpers.h	/^  bool isBlacklisted(B Value) const { return false; }$/;"	f	struct:BlackListTrait
isBlacklisted	include/revng/Support/IRHelpers.h	/^  bool isBlacklisted(B Value) const { return this->Obj.count(Value) != 0; }$/;"	f	struct:BlackListTrait
isBlacklisted	include/revng/Support/IRHelpers.h	/^  bool isBlacklisted(C Value) const { return Value == this->Obj; }$/;"	f	struct:BlackListTrait
isBlacklisted	tools/revng-lift/JumpTargetManager.h	/^  bool isBlacklisted(llvm::BasicBlock *Value) {$/;"	f	struct:BlackListTrait
isBottom	lib/StackAnalysis/Element.h	/^  bool isBottom() const { return State.size() == 0; }$/;"	f	class:StackAnalysis::Intraprocedural::Element
isBottom	tools/revng-lift/OSRA.h	/^    bool isBottom() const { return Bottom; }$/;"	f	class:OSRAPass::BoundedValue
isCSV	lib/StackAnalysis/Intraprocedural.h	/^  bool isCSV(ASSlot Slot) const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
isCall	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  bool isCall(llvm::BasicBlock *BB) const {$/;"	f	class:FunctionCallIdentification
isCall	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  bool isCall(llvm::Instruction *I) const { return getCall(I) != nullptr; }$/;"	f	class:FunctionCallIdentification
isCall	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  bool isCall(llvm::TerminatorInst *T) const { return getCall(T) != nullptr; }$/;"	f	class:FunctionCallIdentification
isCall	lib/StackAnalysis/ABIIR.h	/^  bool isCall() const { return O == DirectCall or O == IndirectCall; }$/;"	f	class:StackAnalysis::ABIIRInstruction
isCallTo	include/revng/Support/IRHelpers.h	/^inline bool isCallTo(const llvm::Instruction *I, llvm::StringRef Name) {$/;"	f
isCallToHelper	include/revng/Support/IRHelpers.h	/^inline bool isCallToHelper(const llvm::Instruction *I) {$/;"	f
isCode	tools/revng-lift/BinaryFile.h	/^  bool isCode() const { return SymbolType == SymbolType::Code; }$/;"	f	class:Label
isCoherent	lib/StackAnalysis/Intraprocedural.cpp	/^bool Analysis::isCoherent(const FunctionABI &CallerSummary,$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
isCompatible	tools/revng-lift/InstructionTranslator.cpp	/^  bool isCompatible(const InstructionArgumentsIterator &r) const {$/;"	f	class:PTC::InstructionArgumentsIterator
isConstant	tools/revng-lift/OSRA.h	/^    bool isConstant() const {$/;"	f	class:OSRAPass::BoundedValue
isConstant	tools/revng-lift/OSRA.h	/^    bool isConstant() const {$/;"	f	class:OSRAPass::OSR
isContradiction	include/revng/StackAnalysis/FunctionsSummary.h	/^  bool isContradiction() const { return Value == Contradiction; }$/;"	f	class:StackAnalysis::FunctionCallReturnValue
isContradiction	include/revng/StackAnalysis/FunctionsSummary.h	/^  bool isContradiction() const { return Value == Contradiction; }$/;"	f	class:StackAnalysis::FunctionReturnValue
isContradiction	include/revng/StackAnalysis/FunctionsSummary.h	/^  bool isContradiction() const { return Value == Contradiction; }$/;"	f	class:StackAnalysis::RegisterArgument
isCorrelationWithNext	tools/revng-lift/JumpTargetManager.cpp	/^bool JumpTargetManager::isCorrelationWithNext(llvm::Value *preValue, llvm::Instruction *Inst){$/;"	f	class:JumpTargetManager
isDead	tools/revng-lift/OSRA.cpp	/^bool OSRA::isDead(Instruction *I) const {$/;"	f	class:OSRA
isDestroyed	include/revng/Support/ClassSentinel.h	/^  bool isDestroyed() const { return Destroyed; }$/;"	f	class:ClassSentinel
isECS	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^      bool isECS() const { return ECS > Total \/ 2; }$/;"	f	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult::ECSVote
isEmpty	lib/StackAnalysis/Element.h	/^  bool isEmpty() const { return not(hasDirectContent() || hasTag()); }$/;"	f	class:StackAnalysis::Intraprocedural::Value
isEnabled	include/revng/Support/Debug.h	/^  bool isEnabled() const { return StaticEnabled && Enabled; }$/;"	f	class:Logger
isEnabled	include/revng/Support/MonotoneFramework.h	/^    bool isEnabled() const { return Enabled; }$/;"	f	class:MonotoneFrameworkWorkList::PostOrderEntry
isEnabled	lib/StackAnalysis/FunctionABI.cpp	/^  bool isEnabled() const { return Enabled; }$/;"	f	class:StackAnalysis::Inhibitor
isEnv	tools/revng-lift/VariableManager.cpp	/^bool VariableManager::isEnv(Value *TheValue) {$/;"	f	class:VariableManager
isExact	tools/revng-lift/BinaryFile.cpp	/^  bool isExact() const {$/;"	f	class:FilePortion
isExecutableAddress	tools/revng-lift/JumpTargetManager.h	/^  bool isExecutableAddress(uint64_t PC) const {$/;"	f	class:JumpTargetManager
isExecutableRange	tools/revng-lift/JumpTargetManager.h	/^  bool isExecutableRange(uint64_t Start, uint64_t End) const {$/;"	f	class:JumpTargetManager
isFakeFunction	lib/StackAnalysis/Cache.h	/^  bool isFakeFunction(llvm::BasicBlock *Function) const {$/;"	f	class:StackAnalysis::Cache
isFallthrough	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  bool isFallthrough(llvm::BasicBlock *BB) const {$/;"	f	class:FunctionCallIdentification
isFallthrough	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  bool isFallthrough(llvm::TerminatorInst *I) const {$/;"	f	class:FunctionCallIdentification
isFallthrough	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  bool isFallthrough(uint64_t Address) const {$/;"	f	class:FunctionCallIdentification
isFinalState	lib/StackAnalysis/Intraprocedural.h	/^  bool isFinalState() const {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
isFirst	include/revng/Support/IRHelpers.h	/^inline bool isFirst(T *I) {$/;"	f
isForced	tools/revng-lift/OSRA.cpp	/^  bool isForced(std::map<MapIndex, MapValue>::iterator &It) const {$/;"	f	class:BVMap	file:
isFunctionCall	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isFunctionCall(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
isFunctionCall	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isFunctionCall(llvm::TerminatorInst *T) const {$/;"	f	class:GeneratedCodeBasicInfo
isIdentityLoad	lib/StackAnalysis/Cache.h	/^  bool isIdentityLoad(const llvm::LoadInst *L) const {$/;"	f	class:StackAnalysis::Cache
isIdentityStore	lib/StackAnalysis/Cache.h	/^  bool isIdentityStore(const llvm::StoreInst *S) const {$/;"	f	class:StackAnalysis::Cache
isInExploration	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  bool isInExploration(const Value *V) {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
isInOutPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool isInOutPtr() const { return isInOutPtr(OffsetKind); }$/;"	f	class:CSVOffsets
isInOutPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static bool isInOutPtr(const Kind K) {$/;"	f	class:CSVOffsets
isIndirect	tools/revng-lift/BinaryFile.h	/^  bool isIndirect() const { return IsIndirect; }$/;"	f	class:Pointer
isIndirectTailCall	lib/StackAnalysis/Cache.h	/^  bool isIndirectTailCall(llvm::BasicBlock *Function) const {$/;"	f	class:StackAnalysis::Cache
isInstructionAligned	tools/revng-lift/JumpTargetManager.h	/^  bool isInstructionAligned(uint64_t PC) const {$/;"	f	class:JumpTargetManager
isInvalid	lib/StackAnalysis/ASSlot.h	/^  bool isInvalid() const { return AS == ASID::invalidID(); }$/;"	f	class:StackAnalysis::ASSlot
isInvalid	tools/revng-lift/BinaryFile.h	/^  bool isInvalid() const { return Type == LabelType::Invalid; }$/;"	f	class:Label
isJump	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isJump(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
isJump	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isJump(llvm::TerminatorInst *T) const {$/;"	f	class:GeneratedCodeBasicInfo
isJump	tools/revng-lift/JumpTargetManager.h	/^  bool isJump(llvm::TerminatorInst *T) const {$/;"	f	class:JumpTargetManager
isJumpOutSupported	include/revng/Support/revng.h	/^  bool isJumpOutSupported() const {$/;"	f	class:Architecture
isJumpTarget	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isJumpTarget(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
isJumpTarget	tools/revng-lift/JumpTargetManager.h	/^  bool isJumpTarget(llvm::BasicBlock *BB) {$/;"	f	class:JumpTargetManager
isJumpTarget	tools/revng-lift/JumpTargetManager.h	/^  bool isJumpTarget(uint64_t PC) const { return JumpTargets.count(PC); }$/;"	f	class:JumpTargetManager
isKiller	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isKiller(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
isKiller	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isKiller(llvm::TerminatorInst *T) const {$/;"	f	class:GeneratedCodeBasicInfo
isKiller	tools/revng-lift/NoReturnAnalysis.h	/^  bool isKiller(llvm::BasicBlock *BB) const {$/;"	f	class:NoReturnAnalysis
isKnownInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool isKnownInPtr() const { return isKnownInPtr(OffsetKind); }$/;"	f	class:CSVOffsets
isKnownInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static bool isKnownInPtr(const Kind K) {$/;"	f	class:CSVOffsets
isLTR	tools/revng-lift/OSRA.cpp	/^  bool isLTR(BasicBlock *BB) const { return LTR.count(BB) != 0; }$/;"	f	class:Reacher
isLittleEndian	include/revng/Support/revng.h	/^  bool isLittleEndian() const { return Endianess == LittleEndian; }$/;"	f	class:Architecture
isMarker	include/revng/Support/revng.h	/^inline bool isMarker(llvm::Instruction *I) {$/;"	f
isMoved	include/revng/Support/ClassSentinel.h	/^  bool isMoved() const { return Moved; }$/;"	f	class:ClassSentinel
isNewInstruction	lib/Dump/CollectCFG.cpp	/^bool CollectCFG::isNewInstruction(BasicBlock *BB) {$/;"	f	class:CollectCFG
isNewVisitWithCallSite	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  bool isNewVisitWithCallSite(Value *V, CallInst *NewCallSite) const {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
isNoReturnFunction	lib/StackAnalysis/Cache.h	/^  bool isNoReturnFunction(llvm::BasicBlock *Function) const {$/;"	f	class:StackAnalysis::Cache
isNoreturnBasicBlock	tools/revng-lift/NoReturnAnalysis.h	/^  bool isNoreturnBasicBlock(llvm::BasicBlock *BB) {$/;"	f	class:NoReturnAnalysis
isNull	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  bool isNull() const { return I == nullptr || BB == nullptr; }$/;"	f	class:StackAnalysis::BasicBlockInstructionPair
isNumeric	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool isNumeric() const { return isNumeric(OffsetKind); }$/;"	f	class:CSVOffsets
isNumeric	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static bool isNumeric(const Kind K) { return K == Kind::Numeric; }$/;"	f	class:CSVOffsets
isOnlyInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool isOnlyInPtr() const { return isOnlyInPtr(OffsetKind); }$/;"	f	class:CSVOffsets
isOnlyInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static bool isOnlyInPtr(const Kind K) {$/;"	f	class:CSVOffsets
isOnlyReason	tools/revng-lift/JumpTargetManager.h	/^    bool isOnlyReason(JTReason::Values Reason) const {$/;"	f	class:JumpTargetManager::JumpTarget
isPC	tools/revng-lift/JumpTargetManager.h	/^  bool isPC(uint64_t PC) const {$/;"	f	class:JumpTargetManager
isPCReg	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isPCReg(const llvm::GlobalVariable *GV) const {$/;"	f	class:GeneratedCodeBasicInfo
isPCReg	tools/revng-lift/JumpTargetManager.h	/^  bool isPCReg(llvm::Value *TheValue) const { return TheValue == PCReg; }$/;"	f	class:JumpTargetManager
isPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool isPtr() const { return isPtr(OffsetKind); }$/;"	f	class:CSVOffsets
isPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static bool isPtr(const Kind K) {$/;"	f	class:CSVOffsets
isRelativeTo	tools/revng-lift/OSRA.h	/^    bool isRelativeTo(const llvm::Value *V) const { return BV->value() == V; }$/;"	f	class:OSRAPass::OSR
isReturn	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  bool isReturn() const { return false; }$/;"	f	class:RDA::Interrupt
isReturn	lib/StackAnalysis/ABIIR.h	/^  bool isReturn() const { return IsReturn; }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
isReturn	lib/StackAnalysis/FunctionABI.cpp	/^  bool isReturn() const {$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt
isReturn	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  bool isReturn() const { return TheReason == Return; }$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt
isReturn	lib/StackAnalysis/Intraprocedural.h	/^  bool isReturn() const { return Type == BranchType::Return; }$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
isReturn	lib/Support/ExampleAnalysis.cpp	/^  bool isReturn() const { revng_abort(); }$/;"	f	class:ExampleAnalysis::Interrupt
isReturnOnly	lib/StackAnalysis/FunctionABI.cpp	/^constexpr bool isReturnOnly<UsedReturnValuesOfFunction>() {$/;"	f	namespace:StackAnalysis
isReturnOnly	lib/StackAnalysis/FunctionABI.cpp	/^static constexpr bool isReturnOnly() {$/;"	f	namespace:StackAnalysis
isReturnValue	lib/StackAnalysis/FunctionABI.h	/^  bool isReturnValue() const {$/;"	f	class:StackAnalysis::RegisterState
isRightOpen	tools/revng-lift/OSRA.h	/^    bool isRightOpen() const {$/;"	f	class:OSRAPass::BoundedValue
isSPReg	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isSPReg(const llvm::GlobalVariable *GV) const {$/;"	f	class:GeneratedCodeBasicInfo
isSPReg	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isSPReg(const llvm::Value *V) const {$/;"	f	class:GeneratedCodeBasicInfo
isSigned	tools/revng-lift/OSRA.h	/^    bool isSigned() const {$/;"	f	class:OSRAPass::BoundedValue
isSizeVirtual	tools/revng-lift/BinaryFile.h	/^  bool isSizeVirtual() const { return SizeIsVirtual; }$/;"	f	class:Label
isSmall	include/revng/ADT/LazySmallBitVector.h	/^  bool isSmall() const { return Storage & 1; }$/;"	f	class:LazySmallBitVector
isSmall	include/revng/ADT/SmallMap.h	/^  bool isSmall() const { return Map.empty(); }$/;"	f	class:SmallMap
isStack	lib/StackAnalysis/ASSlot.h	/^  bool isStack() const { return ID == LastStackID; }$/;"	f	class:StackAnalysis::ASID
isStore	lib/StackAnalysis/ABIIR.h	/^  bool isStore() const { return O == Store; }$/;"	f	class:StackAnalysis::ABIIRInstruction
isSumJump	tools/revng-lift/JumpTargetManager.cpp	/^static bool isSumJump(StoreInst *PCWrite) {$/;"	f	file:
isSupported	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  static bool isSupported(unsigned Opcode) {$/;"	f	class:BinaryTerm
isSupportedOperation	tools/revng-lift/OSRA.cpp	/^static bool isSupportedOperation(unsigned Opcode,$/;"	f	file:
isSupportedOperator	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^static bool isSupportedOperator(unsigned Opcode) {$/;"	f	file:
isSymbol	tools/revng-lift/BinaryFile.h	/^  bool isSymbol() const { return Type == LabelType::Symbol; }$/;"	f	class:Label
isSymbolRelativeValue	tools/revng-lift/BinaryFile.h	/^  bool isSymbolRelativeValue() const {$/;"	f	class:Label
isTerminatorWithInvalidTarget	lib/FunctionIsolation/IsolateFunctions.cpp	/^bool IFI::isTerminatorWithInvalidTarget(Instruction *I,$/;"	f	class:IFI
isTop	tools/revng-lift/OSRA.h	/^    bool isTop() const {$/;"	f	class:OSRAPass::BoundedValue
isTranslated	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool isTranslated(llvm::BasicBlock *BB) const {$/;"	f	class:GeneratedCodeBasicInfo
isTranslatedBB	tools/revng-lift/JumpTargetManager.h	/^  bool isTranslatedBB(llvm::BasicBlock *BB) const {$/;"	f	class:JumpTargetManager
isUninitialized	tools/revng-lift/OSRA.h	/^    bool isUninitialized() const { return Sign == UnknownSignedness; }$/;"	f	class:OSRAPass::BoundedValue
isUnknown	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool isUnknown() const { return isUnknown(OffsetKind); }$/;"	f	class:CSVOffsets
isUnknown	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static bool isUnknown(const Kind K) { return K == Kind::Unknown; }$/;"	f	class:CSVOffsets
isUnknownInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool isUnknownInPtr() const { return isUnknownInPtr(OffsetKind); }$/;"	f	class:CSVOffsets
isUnknownInPtr	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static bool isUnknownInPtr(const Kind K) {$/;"	f	class:CSVOffsets
isValid	include/revng/Support/MemoryAccess.h	/^  bool isValid() const { return Type != Invalid; }$/;"	f	class:MemoryAccess
isValid	lib/StackAnalysis/ASSlot.h	/^  bool isValid() const { return ID != InvalidID; }$/;"	f	class:StackAnalysis::ASID
isValid	tools/revng-lift/SET.cpp	/^  bool isValid() const { return IsValid; }$/;"	f	class:MaterializedValue
isVariable	include/revng/Support/MemoryAccess.h	/^  bool isVariable(llvm::Value *V) const {$/;"	f	class:MemoryAccess
isZero	include/revng/ADT/LazySmallBitVector.h	/^  bool isZero() const { return requiredBits() == 0; }$/;"	f	class:LazySmallBitVector
is_cyclic	scripts/monotone-framework.py	/^def is_cyclic(graph, entry):$/;"	f
is_either	include/revng/ADT/LazySmallBitVector.h	/^constexpr bool is_either() {$/;"	f
is_executable	runtime/support.c	/^bool is_executable(uint64_t pc) {$/;"	f
isa_with_op	include/revng/Support/IRHelpers.h	/^inline I *isa_with_op(llvm::Instruction *Inst) {$/;"	f
islegalAddr	tools/revng-lift/JumpTargetManager.cpp	/^bool JumpTargetManager::islegalAddr(llvm::Value *v){$/;"	f	class:JumpTargetManager
iterator	include/revng/Support/IRHelpers.h	/^  static llvm::BasicBlock::iterator iterator(llvm::Instruction *I) {$/;"	f	struct:IteratorDirection
iterator	include/revng/Support/IRHelpers.h	/^  static llvm::BasicBlock::reverse_iterator iterator(llvm::Instruction *I) {$/;"	f	struct:IteratorDirection
jmp_buffer	runtime/support.c	/^jmp_buf jmp_buffer;$/;"	v
jumpAsm	include/revng/Support/revng.h	/^  llvm::StringRef jumpAsm() const { return JumpAsm; }$/;"	f	class:Architecture
jumps	tools/revng-lift/SET.h	/^  const std::vector<JumpInfo> &jumps() const { return Jumps; }$/;"	f	class:SETPass
jumptable	tests/Analysis/mips/jump-table-base-before-function-call.S	/^jumptable:$/;"	l
jumptable	tests/Analysis/mips/switch-jump-table-stack.S	/^jumptable:$/;"	l
jumptable	tests/Analysis/mips/switch-jump-table.S	/^jumptable:$/;"	l
jumptable	tests/Analysis/x86_64/rda-in-memory.S	/^jumptable:$/;"	l
jumptable	tests/Analysis/x86_64/switch-jump-table.S	/^jumptable:$/;"	l
key	scripts/monotone-framework.py	/^                     key=lambda i: reachability[i1][i] + reachability[i2][i])$/;"	v
labels	tools/revng-lift/BinaryFile.h	/^  const LabelIntervalMap &labels() const { return LabelsMap; }$/;"	f	class:BinaryFile
landingPads	tools/revng-lift/BinaryFile.h	/^  const std::set<uint64_t> &landingPads() const { return LandingPads; }$/;"	f	class:BinaryFile
lastMerge	tools/revng-lift/OSRA.cpp	/^  unsigned lastMerge() const { return LastMergeHeight; }$/;"	f	class:Reacher
legalValue	tools/revng-lift/JumpTargetManager.h	/^  legalValue(std::vector<llvm::Instruction *>inst):$/;"	f	class:legalValue
legalValue	tools/revng-lift/JumpTargetManager.h	/^  legalValue(std::vector<llvm::Value *>v, std::vector<llvm::Instruction *>inst):$/;"	f	class:legalValue
legalValue	tools/revng-lift/JumpTargetManager.h	/^class legalValue {$/;"	c
literal_status	tests/Runtime/calc.c	/^typedef enum { none, positive, negative } literal_status;$/;"	t	typeref:enum:__anon7	file:
llvm	include/revng/BasicAnalyses/CustomCFG.h	/^namespace llvm {$/;"	n
llvm	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^namespace llvm {$/;"	n
llvm	include/revng/Dump/CollectNoreturn.h	/^namespace llvm {$/;"	n
llvm	include/revng/StackAnalysis/FunctionsSummary.h	/^namespace llvm {$/;"	n
llvm	include/revng/Support/DebugHelper.h	/^namespace llvm {$/;"	n
llvm	include/revng/Support/revng.h	/^namespace llvm {$/;"	n
llvm	lib/StackAnalysis/ABIIR.h	/^namespace llvm {$/;"	n
llvm	lib/StackAnalysis/BasicBlockInstructionPair.h	/^namespace llvm {$/;"	n
llvm	lib/Support/ExampleAnalysis.cpp	/^namespace llvm {$/;"	n	file:
llvm	tools/revng-lift/BinaryFile.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^namespace llvm {$/;"	n	file:
llvm	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/CodeGenerator.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/InstructionTranslator.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/JumpTargetManager.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/NoReturnAnalysis.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/OSRA.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/SET.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/SubGraph.h	/^namespace llvm {$/;"	n
llvm	tools/revng-lift/VariableManager.h	/^namespace llvm {$/;"	n
load	lib/StackAnalysis/Element.h	/^  Value load(ASSlot Address) const {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
load	lib/StackAnalysis/Element.h	/^  Value load(const Value &TargetAddress) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
loadFromCPUStateOffset	tools/revng-lift/VariableManager.cpp	/^Value *VariableManager::loadFromCPUStateOffset(IRBuilder<> &Builder,$/;"	f	class:VariableManager
loadFromEnvOffset	tools/revng-lift/VariableManager.h	/^  llvm::Value *loadFromEnvOffset(llvm::IRBuilder<> &Builder,$/;"	f	class:VariableManager
loadModule	tests/Unit/LLVMTestHelpers.h	/^loadModule(llvm::LLVMContext &C, const char *Body) {$/;"	f
loadPTCLibrary	tools/revng-lift/Main.cpp	/^static int loadPTCLibrary(LibraryPointer &PTCLibrary) {$/;"	f	file:
locals	tools/revng-lift/VariableManager.h	/^  std::vector<llvm::AllocaInst *> locals() {$/;"	f	class:VariableManager
log	scripts/compare-json.py	/^  def log(message, *args):$/;"	f	function:compare
log	scripts/monotone-framework.py	/^log = lambda string: sys.stderr.write(string + "\\n")$/;"	v
longjmp	tests/Analysis/arm/longjmp.S	/^longjmp:$/;"	l
longjmp	tests/Analysis/x86_64/longjmp.S	/^longjmp:$/;"	l
loop	tests/Analysis/arm/memset.S	/^loop:$/;"	l
lowerBound	tools/revng-lift/OSRA.h	/^    uint64_t lowerBound() const {$/;"	f	class:OSRAPass::BoundedValue
lowerExtreme	tools/revng-lift/OSRA.h	/^    uint64_t lowerExtreme() const {$/;"	f	class:OSRAPass::BoundedValue
lowerThanOrEqual	include/revng/Support/MonotoneFramework.h	/^  bool lowerThanOrEqual(const ElementBase &RHS) const {$/;"	f	class:ElementBase
lowerThanOrEqual	include/revng/Support/MonotoneFramework.h	/^  bool lowerThanOrEqual(const MonotoneFrameworkSet &Other) const {$/;"	f	class:MonotoneFrameworkSet
lowerThanOrEqual	lib/StackAnalysis/ASSlot.h	/^  bool lowerThanOrEqual(const ASID &Other) const { return ID == Other.ID; }$/;"	f	class:StackAnalysis::ASID
lowerThanOrEqual	lib/StackAnalysis/Element.cpp	/^bool ASSlot::lowerThanOrEqual(const ASSlot &Other) const {$/;"	f	class:StackAnalysis::ASSlot
lowerThanOrEqual	lib/StackAnalysis/Element.cpp	/^bool AddressSpace::lowerThanOrEqual(const AddressSpace &Other) const {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
lowerThanOrEqual	lib/StackAnalysis/Element.cpp	/^bool Element::lowerThanOrEqual(const Element &Other) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
lowerThanOrEqual	lib/StackAnalysis/Element.cpp	/^bool Value::lowerThanOrEqual(const Value &Other) const {$/;"	f	class:StackAnalysis::Intraprocedural::Value
lowerThanOrEqual	lib/StackAnalysis/FunctionABI.cpp	/^  bool lowerThanOrEqual(const Element &Other) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
lowerThanOrEqual	lib/StackAnalysis/FunctionABI.cpp	/^  bool lowerThanOrEqual(const Inhibitor &Other) const {$/;"	f	class:StackAnalysis::Inhibitor
main	docs/instrument.py	/^def main():$/;"	f
main	runtime/support.c	/^int main(int argc, char *argv[]) {$/;"	f
main	scripts/compare-json.py	/^def main():$/;"	f
main	scripts/compile-time-constants.py	/^def main():$/;"	f
main	scripts/monotone-framework.py	/^def main():$/;"	f
main	tests/Runtime/calc.c	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/Runtime/floating-point.c	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/Runtime/function-call.c	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/Runtime/global.c	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/Runtime/printf.c	/^int main(int argc, char *argv[]) {$/;"	f
main	tests/Runtime/syscall.c	/^int main(int argc, char *argv[]) {$/;"	f
main	tools/revng-lift/Main.cpp	/^int main(int argc, const char *argv[]) {$/;"	f
makeUnknown	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static enum Kind makeUnknown(const Kind K) {$/;"	f	class:CSVOffsets
make_array	include/revng/Support/Statistics.h	/^inline std::array<T, sizeof...(Args)> make_array(Args &&... args) {$/;"	f
make_array	tools/revng-lift/CodeGenerator.cpp	/^inline std::array<T, sizeof...(Args)> make_array(Args &&... args) {$/;"	f
make_blacklist	include/revng/Support/IRHelpers.h	/^inline BlackListTrait<C, B> make_blacklist(C Obj) {$/;"	f
make_blacklist	include/revng/Support/IRHelpers.h	/^make_blacklist(const std::set<B> &Obj) {$/;"	f
make_blacklist	tools/revng-lift/JumpTargetManager.h	/^make_blacklist(const JumpTargetManager &JTM) {$/;"	f
make_range	include/revng/Support/Range.h	/^RangeFromContainer<ContainerT> make_range(ContainerT &&Container) {$/;"	f
markAsFake	lib/StackAnalysis/Cache.h	/^  void markAsFake(llvm::BasicBlock *Function) {$/;"	f	class:StackAnalysis::Cache
markAsIndirectTailCall	lib/StackAnalysis/Cache.h	/^  void markAsIndirectTailCall(llvm::BasicBlock *Function) {$/;"	f	class:StackAnalysis::Cache
markAsNoReturn	lib/StackAnalysis/Cache.h	/^  void markAsNoReturn(llvm::BasicBlock *Function) {$/;"	f	class:StackAnalysis::Cache
markJT	tools/revng-lift/JumpTargetManager.h	/^  void markJT(uint64_t PC, JTReason::Values Reason) {$/;"	f	class:JumpTargetManager
mask	lib/StackAnalysis/ASSlot.h	/^  void mask(uint64_t Operand) { Offset = Offset & Operand; }$/;"	f	class:StackAnalysis::ASSlot
mask	lib/StackAnalysis/Element.h	/^  bool mask(uint64_t Operand) {$/;"	f	class:StackAnalysis::Intraprocedural::Value
matches	tools/revng-lift/BinaryFile.h	/^  bool matches(uint64_t Address, uint64_t Size) const {$/;"	f	class:Label
materialize	tools/revng-lift/SET.cpp	/^OperationsStack::materialize(Constant *NewOperand, bool HandleSymbols) {$/;"	f	class:OperationsStack
materializeSimple	tools/revng-lift/SET.cpp	/^  uint64_t materializeSimple(Constant *NewOperand) {$/;"	f	class:OperationsStack
matrix_multiplication	scripts/monotone-framework.py	/^  def matrix_multiplication(a, b):$/;"	f
mayAlias	include/revng/Support/MemoryAccess.h	/^  bool mayAlias(const MemoryAccess &Other) const {$/;"	f	class:MemoryAccess
mayAlias	include/revng/Support/MemoryAccess.h	/^  static bool mayAlias(llvm::BasicBlock *BB,$/;"	f	class:MemoryAccess
mayAlias	lib/StackAnalysis/Cache.cpp	/^static bool mayAlias(const llvm::Value *A, const llvm::Value *B) {$/;"	f	namespace:StackAnalysis
maybe	include/revng/StackAnalysis/FunctionsSummary.h	/^  static FunctionCallReturnValue maybe() {$/;"	f	class:StackAnalysis::FunctionCallReturnValue
maybe	include/revng/StackAnalysis/FunctionsSummary.h	/^  static FunctionReturnValue maybe() {$/;"	f	class:StackAnalysis::FunctionReturnValue
maybe	include/revng/StackAnalysis/FunctionsSummary.h	/^  static RegisterArgument maybe() {$/;"	f	class:StackAnalysis::RegisterArgument
mcontextIndex	include/revng/Support/revng.h	/^  unsigned mcontextIndex() const {$/;"	f	class:ABIRegister
mean	include/revng/Support/Statistics.h	/^  double mean() const { return (N > 0) ? NewM : 0.0; }$/;"	f	class:RunningStatistics
memcpyAtEnvOffset	tools/revng-lift/VariableManager.cpp	/^bool VariableManager::memcpyAtEnvOffset(llvm::IRBuilder<> &Builder,$/;"	f	class:VariableManager
memset	tests/Analysis/arm/memset.S	/^memset:$/;"	l
merge	tools/revng-lift/OSRA.cpp	/^bool BoundedValue::merge(BoundedValue Other,$/;"	f	class:BoundedValue
mergeASState	lib/StackAnalysis/Element.cpp	/^void Element::mergeASState(AddressSpace &ThisState,$/;"	f	class:StackAnalysis::Intraprocedural::Element
mergeBVVectors	tools/revng-lift/OSRA.cpp	/^static bool mergeBVVectors(BVVector &Base,$/;"	f	file:
mergeBranches	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^void ResultsPool::mergeBranches(BasicBlock *Function,$/;"	f	class:StackAnalysis::ResultsPool
mergeCallSites	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^void ResultsPool::mergeCallSites(BasicBlock *Entry,$/;"	f	class:StackAnalysis::ResultsPool
mergeFunction	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^void ResultsPool::mergeFunction(BasicBlock *Function,$/;"	f	class:StackAnalysis::ResultsPool
mergeImpl	tools/revng-lift/OSRA.cpp	/^BoundedValue BoundedValue::mergeImpl(const BoundedValue &Other) const {$/;"	f	class:BoundedValue
mergeLoadReacher	tools/revng-lift/OSRA.cpp	/^void OSRA::mergeLoadReacher(LoadInst *Load) {$/;"	f	class:OSRA
mergePredicate	tools/revng-lift/OSRA.cpp	/^BoundedValue OSRA::mergePredicate(OSR &BaseOp, Predicate P, Constant *ConstOp) {$/;"	f	class:OSRA
moveTo	tools/revng-lift/BinaryFile.cpp	/^  void moveTo(uint64_t Offset) {$/;"	f	class:DwarfReader
moveTo	tools/revng-lift/OSRA.cpp	/^BoundedValue BoundedValue::moveTo(llvm::Value *V,$/;"	f	class:BoundedValue
name	include/revng/Support/Debug.h	/^  llvm::StringRef name() const { return Name; }$/;"	f	class:Logger
name	include/revng/Support/revng.h	/^  const char *name() const {$/;"	f	class:Architecture
name	include/revng/Support/revng.h	/^  llvm::StringRef name() const { return Name; }$/;"	f	class:ABIRegister
nameForAddress	tools/revng-lift/JumpTargetManager.cpp	/^JumpTargetManager::nameForAddress(uint64_t Address, uint64_t Size) const {$/;"	f	class:JumpTargetManager
nanoseconds	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^static uint64_t nanoseconds(T Span) {$/;"	f	file:
neededLibraryNames	tools/revng-lift/BinaryFile.h	/^  const std::vector<std::string> &neededLibraryNames() const {$/;"	f	class:BinaryFile
negative	tests/Runtime/calc.c	/^typedef enum { none, positive, negative } literal_status;$/;"	e	enum:__anon7	file:
nestedCmpWithModule	lib/StackAnalysis/FunctionABI.cpp	/^unsigned nestedCmpWithModule(const MapOfMaps<FunctionCall, N1, K, V, N2> &This,$/;"	f	namespace:StackAnalysis::MapHelpers
newBasicBlock	tools/revng-lift/VariableManager.cpp	/^void VariableManager::newBasicBlock(BasicBlock *Delimiter,$/;"	f	class:VariableManager
newBasicBlock	tools/revng-lift/VariableManager.cpp	/^void VariableManager::newBasicBlock(Instruction *Delimiter,$/;"	f	class:VariableManager
newBranch	tools/revng-lift/JumpTargetManager.h	/^  void newBranch() { NewBranches++; }$/;"	f	class:JumpTargetManager
newFunction	tools/revng-lift/VariableManager.cpp	/^void VariableManager::newFunction(Instruction *Delimiter,$/;"	f	class:VariableManager
newHeight	tools/revng-lift/OSRA.cpp	/^  void newHeight(unsigned NewHeight) {$/;"	f	class:Reacher
newInstruction	tools/revng-lift/InstructionTranslator.cpp	/^IT::newInstruction(PTCInstruction *Instr,$/;"	f	class:IT
newPC	tools/revng-lift/JumpTargetManager.cpp	/^BasicBlock *JumpTargetManager::newPC(uint64_t PC, bool &ShouldContinue) {$/;"	f	class:JumpTargetManager
newpc	runtime/support.c	/^void newpc(uint64_t pc,$/;"	f
next	lib/StackAnalysis/ABIIR.h	/^  links_const_range next() const {$/;"	f	class:StackAnalysis::ABIIRBasicBlock
nextNonMarker	include/revng/Support/revng.h	/^inline llvm::Instruction *nextNonMarker(llvm::Instruction *I) {$/;"	f
nextSourceUse	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const Use *nextSourceUse() const {$/;"	f	class:WorkItem
nextSourceValue	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  const Value *nextSourceValue() const {$/;"	f	class:WorkItem
next_size	lib/StackAnalysis/ABIIR.h	/^  size_t next_size() const {$/;"	f	class:StackAnalysis::ABIIRBasicBlock
no	include/revng/StackAnalysis/FunctionsSummary.h	/^  static FunctionCallReturnValue no() {$/;"	f	class:StackAnalysis::FunctionCallReturnValue
no	include/revng/StackAnalysis/FunctionsSummary.h	/^  static FunctionReturnValue no() {$/;"	f	class:StackAnalysis::FunctionReturnValue
no	include/revng/StackAnalysis/FunctionsSummary.h	/^  static RegisterArgument no() {$/;"	f	class:StackAnalysis::RegisterArgument
no	tests/Analysis/arm/switch-ldrls.S	/^no:$/;"	l
no1	tests/Analysis/arm/switch-disjoint-ranges.S	/^no1:$/;"	l
no2	tests/Analysis/arm/switch-disjoint-ranges.S	/^no2:$/;"	l
no3	tests/Analysis/arm/switch-disjoint-ranges.S	/^no3:$/;"	l
noReturn	tools/revng-lift/JumpTargetManager.h	/^  NoReturnAnalysis &noReturn() { return NoReturn; }$/;"	f	class:JumpTargetManager
noReturnSyscalls	include/revng/Support/revng.h	/^  llvm::ArrayRef<uint64_t> noReturnSyscalls() const { return NoReturnSyscalls; }$/;"	f	class:Architecture
noWritesTo	lib/StackAnalysis/Cache.cpp	/^static bool noWritesTo(const Instruction *Start,$/;"	f	namespace:StackAnalysis
node_by_index	scripts/monotone-framework.py	/^  node_by_index = lambda index: get_unique([x$/;"	v
nodes_begin	tools/revng-lift/SubGraph.h	/^  static nodes_iterator nodes_begin(GraphType *G) { return G->Nodes.begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	tools/revng-lift/SubGraph.h	/^  static nodes_iterator nodes_end(GraphType *G) { return G->Nodes.end(); }$/;"	f	struct:llvm::GraphTraits
none	tests/Runtime/calc.c	/^typedef enum { none, positive, negative } literal_status;$/;"	e	enum:__anon7	file:
nonzero	scripts/monotone-framework.py	/^        nonzero = lambda i: set([x[0]$/;"	v
noret	include/revng/Support/Assert.h	62;"	d
noret	include/revng/Support/Assert.h	70;"	d
noret	include/revng/Support/Assert.h	72;"	d
noret	include/revng/Support/Assert.h	89;"	d
notAvailable	include/revng/StackAnalysis/FunctionsSummary.h	/^  void notAvailable() { revng_abort(); }$/;"	f	class:StackAnalysis::FunctionReturnValue
notAvailable	include/revng/StackAnalysis/FunctionsSummary.h	/^  void notAvailable() {$/;"	f	class:StackAnalysis::FunctionCallReturnValue
notAvailable	include/revng/StackAnalysis/FunctionsSummary.h	/^  void notAvailable() {$/;"	f	class:StackAnalysis::RegisterArgument
notNull	include/revng/Support/revng.h	/^inline T *notNull(T *Pointer) {$/;"	f
np	scripts/monotone-framework.py	/^  np = None$/;"	v
nullptr	tests/Analysis/mips/jump-table-base-before-function-call.S	/^nullptr:$/;"	l
nullptr	tests/Analysis/mips/switch-jump-table-stack.S	/^nullptr:$/;"	l
nullptr	tests/Analysis/mips/switch-jump-table.S	/^nullptr:$/;"	l
object	tools/revng-lift/BinaryFile.h	/^namespace object {$/;"	n	namespace:llvm
object	tools/revng-lift/CodeGenerator.h	/^namespace object {$/;"	n	namespace:llvm
offset	lib/StackAnalysis/ASSlot.h	/^  int32_t offset() const { return Offset; }$/;"	f	class:StackAnalysis::ASSlot
offset	tools/revng-lift/BinaryFile.cpp	/^  uint64_t offset() const { return Cursor - Start; }$/;"	f	class:DwarfReader
offset	tools/revng-lift/BinaryFile.h	/^  uint64_t offset() const {$/;"	f	class:Label
onQuit	include/revng/Support/Statistics.h	/^  virtual void onQuit() { dump(); }$/;"	f	class:CounterMap
onQuit	lib/Support/Statistics.cpp	/^static void onQuit() {$/;"	f	file:
onQuit	lib/Support/Statistics.cpp	/^void RunningStatistics::onQuit() {$/;"	f	class:RunningStatistics
onQuitSignalHandler	lib/Support/Statistics.cpp	/^static void onQuitSignalHandler(int Signal) {$/;"	f	file:
on_exit_syscall	runtime/support.c	/^void on_exit_syscall(void) {$/;"	f
one	tests/Analysis/arm/switch-ldrls.S	/^one:$/;"	l
one	tests/Analysis/mips/jump-table-base-before-function-call.S	/^one:$/;"	l
one	tests/Analysis/mips/switch-jump-table-stack.S	/^one:$/;"	l
one	tests/Analysis/mips/switch-jump-table.S	/^one:$/;"	l
one	tests/Analysis/x86_64/rda-in-memory.S	/^one:$/;"	l
one	tests/Analysis/x86_64/switch-jump-table.S	/^one:$/;"	l
opcode	lib/StackAnalysis/ABIIR.h	/^  Opcode opcode() const { return O; }$/;"	f	class:StackAnalysis::ABIIRInstruction
opcode	tools/revng-lift/InstructionTranslator.cpp	/^  PTCOpcode opcode() const { return TheInstruction->opc; }$/;"	f	class:PTC::InstructionImpl
opcodeToBinaryOp	tools/revng-lift/InstructionTranslator.cpp	/^static Instruction::BinaryOps opcodeToBinaryOp(PTCOpcode Opcode) {$/;"	f	file:
operandsByType	include/revng/Support/IRHelpers.h	/^inline std::tuple<T...> operandsByType(llvm::User *V) {$/;"	f
operation_t	tests/Runtime/calc.c	/^} operation_t;$/;"	t	typeref:struct:__anon8	file:
operator	tests/Runtime/calc.c	/^  uint8_t operator;$/;"	m	struct:__anon8	file:
operator !=	include/revng/ADT/LazySmallBitVector.h	/^  bool operator!=(const LazySmallBitVector &Other) const {$/;"	f	class:LazySmallBitVector
operator !=	include/revng/ADT/SmallMap.h	/^  bool operator!=(const Iteratall &Other) const { return !(*this == Other); }$/;"	f	class:Iteratall
operator !=	include/revng/Support/IteratorWrapper.h	/^  bool operator!=(const type &r2) { return Iterator != r2.Iterator; }$/;"	f	class:IteratorWrapper
operator !=	include/revng/Support/MemoryAccess.h	/^  bool operator!=(const MemoryAccess &Other) const { return !(*this == Other); }$/;"	f	class:MemoryAccess
operator !=	include/revng/Support/RandomAccessIterator.h	/^  bool operator!=(const type &r2) {$/;"	f	class:RandomAccessIterator
operator !=	lib/StackAnalysis/ASSlot.h	/^  bool operator!=(const ASID &Other) const { return not(*this == Other); }$/;"	f	class:StackAnalysis::ASID
operator !=	lib/StackAnalysis/ASSlot.h	/^  bool operator!=(const ASSlot &Other) const { return not(*this == Other); }$/;"	f	class:StackAnalysis::ASSlot
operator !=	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  bool operator!=(const BasicBlockInstructionPair &Other) const {$/;"	f	class:StackAnalysis::BasicBlockInstructionPair
operator !=	lib/StackAnalysis/Element.h	/^  bool operator!=(const AddressSpace &Other) const { return !(*this == Other); }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
operator !=	lib/StackAnalysis/Element.h	/^  bool operator!=(const Element &Other) const { return !(*this == Other); }$/;"	f	class:StackAnalysis::Intraprocedural::Element
operator !=	lib/StackAnalysis/Element.h	/^  bool operator!=(const Value &Other) const { return !(*this == Other); }$/;"	f	class:StackAnalysis::Intraprocedural::Value
operator !=	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^    bool operator!=(const IterationResult &Other) const {$/;"	f	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult
operator !=	tools/revng-lift/OSRA.h	/^      bool operator!=(BoundsIterator &Other) const { return !(*this == Other); }$/;"	f	class:OSRAPass::OSR::BoundsIterator
operator !=	tools/revng-lift/OSRA.h	/^    bool operator!=(const BoundedValue &Other) { return !(*this == Other); }$/;"	f	class:OSRAPass::BoundedValue
operator !=	tools/revng-lift/OSRA.h	/^    bool operator!=(const OSR &Other) const { return !(*this == Other); }$/;"	f	class:OSRAPass::OSR
operator &=	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector &operator&=(const LazySmallBitVector &Other) {$/;"	f	class:LazySmallBitVector
operator ()	include/revng/ADT/SmallMap.h	/^    Iteratall operator()(T &It) const {$/;"	f	struct:Iteratall::PostincrementVisitor
operator ()	include/revng/ADT/SmallMap.h	/^    Iteratall operator()(T &It) const {$/;"	f	struct:Iteratall::PreincrementVisitor
operator ()	include/revng/ADT/SmallMap.h	/^    bool operator()(T &, R &) const {$/;"	f	struct:Iteratall::CompareVisitor
operator ()	include/revng/ADT/SmallMap.h	/^    bool operator()(T &It, T &Other) const {$/;"	f	struct:Iteratall::CompareVisitor
operator ()	include/revng/ADT/SmallMap.h	/^    reference operator()(T &It) const {$/;"	f	struct:Iteratall::DereferenceVisitor
operator ()	include/revng/Dump/CollectCFG.h	/^  bool operator()(const T *LHS, const T *RHS) const {$/;"	f	struct:CompareByName
operator ()	lib/Dump/CollectNoreturn.cpp	/^  bool operator()(const T *LHS, const T *RHS) const {$/;"	f	struct:CompareByName
operator ()	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^bool ConditionEqualTo::operator()(BranchRef BA, BranchRef BB) const {$/;"	f	class:ConditionEqualTo
operator ()	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^size_t ConditionHash::operator()(BranchInst *const &B) const {$/;"	f	class:ConditionHash
operator ()	lib/StackAnalysis/ASSlot.h	/^  size_t operator()(const StackAnalysis::ASID &K) const { return K.hash(); }$/;"	f	struct:std::hash
operator ()	lib/StackAnalysis/ASSlot.h	/^  size_t operator()(const StackAnalysis::ASSlot &K) const { return K.hash(); }$/;"	f	struct:std::hash
operator ()	lib/StackAnalysis/Element.h	/^  operator()(const StackAnalysis::Intraprocedural::AddressSpace &K) const {$/;"	f	struct:std::hash
operator ()	lib/StackAnalysis/Element.h	/^  size_t operator()(const StackAnalysis::Intraprocedural::Element &K) const {$/;"	f	struct:std::hash
operator ()	lib/StackAnalysis/Element.h	/^  size_t operator()(const StackAnalysis::Intraprocedural::Value &K) const {$/;"	f	struct:std::hash
operator ()	lib/StackAnalysis/FunctionBoundariesDetectionPass.cpp	/^  bool operator()(const T *LHS, const T *RHS) const {$/;"	f	struct:StackAnalysis::CompareByName
operator ()	tools/revng-lift/SubGraph.h	/^    bool operator()(const Node &A, const Node &B) const {$/;"	f	struct:SubGraph::CompareNodes
operator *	include/revng/ADT/SmallMap.h	/^  reference operator*() const {$/;"	f	class:Iteratall
operator *	include/revng/Support/IteratorWrapper.h	/^  reference operator*() const { return *Iterator; }$/;"	f	class:IteratorWrapper
operator *	include/revng/Support/RandomAccessIterator.h	/^  reference operator*() const { return get(Index); }$/;"	f	class:RandomAccessIterator
operator *	include/revng/Support/Transform.h	/^  reference operator*() const { return F(base::operator*()); }$/;"	f	class:TransformIterator
operator *	tools/revng-lift/OSRA.cpp	/^uint64_t OSR::BoundsIterator::operator*() const {$/;"	f	class:OSR::BoundsIterator
operator +	include/revng/Support/IteratorWrapper.h	/^  type operator+(const IteratorWrapper<O> &r2) {$/;"	f	class:IteratorWrapper
operator +	include/revng/Support/IteratorWrapper.h	/^  type operator+(const difference_type &n) const { return type(Iterator + n); }$/;"	f	class:IteratorWrapper
operator +	include/revng/Support/RandomAccessIterator.h	/^  Derived operator+(const RandomAccessIterator<T, D, R> &r2) {$/;"	f	class:RandomAccessIterator
operator +	include/revng/Support/RandomAccessIterator.h	/^  Derived operator+(const difference_type &n) const { return clone(Index + n); }$/;"	f	class:RandomAccessIterator
operator ++	include/revng/ADT/SmallMap.h	/^  Iteratall operator++() {$/;"	f	class:Iteratall
operator ++	include/revng/ADT/SmallMap.h	/^  Iteratall operator++(int) {$/;"	f	class:Iteratall
operator ++	include/revng/Support/IteratorWrapper.h	/^  type &operator++() {$/;"	f	class:IteratorWrapper
operator ++	include/revng/Support/IteratorWrapper.h	/^  type operator++(int) { return type(Iterator++); }$/;"	f	class:IteratorWrapper
operator ++	include/revng/Support/RandomAccessIterator.h	/^  Derived &operator++() {$/;"	f	class:RandomAccessIterator
operator ++	include/revng/Support/RandomAccessIterator.h	/^  Derived operator++(int) { return clone(Index++); }$/;"	f	class:RandomAccessIterator
operator ++	tools/revng-lift/OSRA.h	/^      BoundsIterator &operator++() {$/;"	f	class:OSRAPass::OSR::BoundsIterator
operator +=	include/revng/Support/IteratorWrapper.h	/^  type &operator+=(difference_type n) {$/;"	f	class:IteratorWrapper
operator +=	include/revng/Support/RandomAccessIterator.h	/^  Derived &operator+=(difference_type n) {$/;"	f	class:RandomAccessIterator
operator +=	tools/revng-lift/BinaryFile.cpp	/^static LabelList &operator+=(LabelList &This, const LabelList &Other) {$/;"	f	file:
operator -	include/revng/Support/IteratorWrapper.h	/^  difference_type operator-(const IteratorWrapper<O> &r2) {$/;"	f	class:IteratorWrapper
operator -	include/revng/Support/IteratorWrapper.h	/^  type operator-(const difference_type &n) const { return type(Iterator - n); }$/;"	f	class:IteratorWrapper
operator -	include/revng/Support/RandomAccessIterator.h	/^  Derived operator-(const difference_type &n) const { return clone(Index - n); }$/;"	f	class:RandomAccessIterator
operator -	include/revng/Support/RandomAccessIterator.h	/^  difference_type operator-(const RandomAccessIterator<T, D, R> &r2) const {$/;"	f	class:RandomAccessIterator
operator --	include/revng/Support/IteratorWrapper.h	/^  type &operator--() {$/;"	f	class:IteratorWrapper
operator --	include/revng/Support/IteratorWrapper.h	/^  type operator--(int) { return type(Iterator--); }$/;"	f	class:IteratorWrapper
operator --	include/revng/Support/RandomAccessIterator.h	/^  Derived &operator--() {$/;"	f	class:RandomAccessIterator
operator --	include/revng/Support/RandomAccessIterator.h	/^  Derived operator--(int) { return clone(Index--); }$/;"	f	class:RandomAccessIterator
operator -=	include/revng/Support/IteratorWrapper.h	/^  type &operator-=(const difference_type &n) {$/;"	f	class:IteratorWrapper
operator -=	include/revng/Support/RandomAccessIterator.h	/^  Derived &operator-=(const difference_type &n) {$/;"	f	class:RandomAccessIterator
operator ->	include/revng/ADT/SmallMap.h	/^  pointer operator->() const { return &**this; }$/;"	f	class:Iteratall
operator ->	include/revng/Support/IteratorWrapper.h	/^  pointer operator->() const { return Iterator.operator->(); }$/;"	f	class:IteratorWrapper
operator ->	include/revng/Support/RandomAccessIterator.h	/^  pointer operator->() const { return &get(Index); }$/;"	f	class:RandomAccessIterator
operator <	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  bool operator<(const MemoryInstruction Other) const { return I < Other.I; }$/;"	f	struct:MemoryInstruction
operator <	include/revng/Support/IteratorWrapper.h	/^  bool operator<(const type &r2) { return Iterator < r2.Iterator; }$/;"	f	class:IteratorWrapper
operator <	include/revng/Support/RandomAccessIterator.h	/^  bool operator<(const type &r2) {$/;"	f	class:RandomAccessIterator
operator <	lib/StackAnalysis/ASSlot.h	/^  bool operator<(const ASID &Other) const { return ID < Other.ID; }$/;"	f	class:StackAnalysis::ASID
operator <	lib/StackAnalysis/ASSlot.h	/^  bool operator<(const ASSlot &Other) const {$/;"	f	class:StackAnalysis::ASSlot
operator <	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  bool operator<(const BasicBlockInstructionPair &Other) const {$/;"	f	class:StackAnalysis::BasicBlockInstructionPair
operator <	tools/revng-lift/BinaryFile.h	/^  bool operator<(const Label &Other) const {$/;"	f	class:Label
operator <<	include/revng/Support/Debug.h	/^  inline Logger &operator<<(const T Other) {$/;"	f	class:Logger
operator <<=	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector &operator<<=(unsigned Amount) {$/;"	f	class:LazySmallBitVector
operator <=	include/revng/Support/IteratorWrapper.h	/^  bool operator<=(const type &r2) { return Iterator <= r2.Iterator; }$/;"	f	class:IteratorWrapper
operator <=	include/revng/Support/RandomAccessIterator.h	/^  bool operator<=(const type &r2) {$/;"	f	class:RandomAccessIterator
operator =	include/revng/ADT/LazySmallBitVector.h	/^    LargeStorage &operator=(const LargeStorage &Other) {$/;"	f	struct:LazySmallBitVector::LargeStorage
operator =	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector &operator=(LazySmallBitVector &&Other) {$/;"	f	class:LazySmallBitVector
operator =	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector &operator=(const LazySmallBitVector &Other) {$/;"	f	class:LazySmallBitVector
operator =	include/revng/Support/ClassSentinel.h	/^  ClassSentinel &operator=(ClassSentinel &&Other) {$/;"	f	class:ClassSentinel
operator =	include/revng/Support/IteratorWrapper.h	/^  type &operator=(const type &r) {$/;"	f	class:IteratorWrapper
operator =	include/revng/Support/RandomAccessIterator.h	/^  Derived &operator=(const type &r) {$/;"	f	class:RandomAccessIterator
operator =	tools/revng-lift/InstructionTranslator.cpp	/^  operator=(const InstructionArgumentsIterator &r) {$/;"	f	class:PTC::InstructionArgumentsIterator
operator =	tools/revng-lift/OSRA.h	/^    BoundedValue &operator=(const BoundedValue &Other) {$/;"	f	class:OSRAPass::BoundedValue
operator ==	include/revng/ADT/LazySmallBitVector.h	/^  bool operator==(const LazySmallBitVector &Other) const {$/;"	f	class:LazySmallBitVector
operator ==	include/revng/ADT/SmallMap.h	/^  bool operator==(const Iteratall &Other) const {$/;"	f	class:Iteratall
operator ==	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  bool operator==(const MemoryInstruction Other) const { return I == Other.I; }$/;"	f	struct:MemoryInstruction
operator ==	include/revng/Support/IteratorWrapper.h	/^  bool operator==(const type &r2) const { return Iterator == r2.Iterator; }$/;"	f	class:IteratorWrapper
operator ==	include/revng/Support/MemoryAccess.h	/^  bool operator==(const MemoryAccess &Other) const {$/;"	f	class:MemoryAccess
operator ==	include/revng/Support/RandomAccessIterator.h	/^  bool operator==(const type &r2) const {$/;"	f	class:RandomAccessIterator
operator ==	lib/StackAnalysis/ASSlot.h	/^  bool operator==(const ASID &Other) const { return ID == Other.ID; }$/;"	f	class:StackAnalysis::ASID
operator ==	lib/StackAnalysis/ASSlot.h	/^  bool operator==(const ASSlot &Other) const {$/;"	f	class:StackAnalysis::ASSlot
operator ==	lib/StackAnalysis/BasicBlockInstructionPair.h	/^  bool operator==(const BasicBlockInstructionPair &Other) const {$/;"	f	class:StackAnalysis::BasicBlockInstructionPair
operator ==	lib/StackAnalysis/Element.h	/^  bool operator==(const AddressSpace &Other) const {$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
operator ==	lib/StackAnalysis/Element.h	/^  bool operator==(const Element &Other) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
operator ==	lib/StackAnalysis/Element.h	/^  bool operator==(const Value &Other) const {$/;"	f	class:StackAnalysis::Intraprocedural::Value
operator ==	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^      bool operator==(const ECSVote &Other) const {$/;"	f	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult::ECSVote
operator ==	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^    bool operator==(const IterationResult &Other) const {$/;"	f	struct:StackAnalysis::ClobberedRegistersAnalysis::IterationResult
operator ==	tools/revng-lift/BinaryFile.h	/^  bool operator==(const Label &Other) const {$/;"	f	class:Label
operator ==	tools/revng-lift/OSRA.h	/^      bool operator==(BoundsIterator &Other) const {$/;"	f	class:OSRAPass::OSR::BoundsIterator
operator ==	tools/revng-lift/OSRA.h	/^    bool operator==(const BoundedValue &Other) const {$/;"	f	class:OSRAPass::BoundedValue
operator ==	tools/revng-lift/OSRA.h	/^    bool operator==(const OSR &Other) const {$/;"	f	class:OSRAPass::OSR
operator >	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  bool operator>(const MemoryInstruction Other) const { return I > Other.I; }$/;"	f	struct:MemoryInstruction
operator >	include/revng/Support/IteratorWrapper.h	/^  bool operator>(const type &r2) { return Iterator > r2.Iterator; }$/;"	f	class:IteratorWrapper
operator >	include/revng/Support/RandomAccessIterator.h	/^  bool operator>(const type &r2) {$/;"	f	class:RandomAccessIterator
operator >=	include/revng/Support/IteratorWrapper.h	/^  bool operator>=(const type &r2) { return Iterator >= r2.Iterator; }$/;"	f	class:IteratorWrapper
operator >=	include/revng/Support/RandomAccessIterator.h	/^  bool operator>=(const type &r2) {$/;"	f	class:RandomAccessIterator
operator >>=	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector &operator>>=(unsigned Amount) {$/;"	f	class:LazySmallBitVector
operator Kind	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  explicit operator Kind() const { return OffsetKind; }$/;"	f	class:CSVOffsets
operator []	include/revng/ADT/LazySmallBitVector.h	/^  bool operator[](unsigned Index) const {$/;"	f	class:LazySmallBitVector
operator []	include/revng/Support/IteratorWrapper.h	/^  reference operator[](const difference_type &n) const { return Iterator[n]; }$/;"	f	class:IteratorWrapper
operator []	include/revng/Support/RandomAccessIterator.h	/^  reference operator[](const difference_type &n) const {$/;"	f	class:RandomAccessIterator
operator []	include/revng/Support/Range.h	/^  reference operator[](const difference_type &n) const { return Begin[n]; }$/;"	f	class:Range
operator []	include/revng/Support/Transform.h	/^  reference operator[](const difference_type &n) const {$/;"	f	class:TransformIterator
operator []	lib/StackAnalysis/FunctionABI.h	/^  V &operator[](const K Key) {$/;"	f	class:StackAnalysis::DefaultMap
operator ^=	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector &operator^=(const LazySmallBitVector &Other) {$/;"	f	class:LazySmallBitVector
operator |=	include/revng/ADT/LazySmallBitVector.h	/^  LazySmallBitVector &operator|=(const LazySmallBitVector &Other) {$/;"	f	class:LazySmallBitVector
osr	tools/revng-lift/OSRA.cpp	/^  const OSR &osr() const { return ReachingOSR; }$/;"	f	class:Reacher
out	scripts/monotone-framework.py	/^out = lambda string: sys.stdout.write(string)$/;"	v
outArgCount	tools/revng-lift/InstructionTranslator.cpp	/^inline unsigned CallInstruction::outArgCount() const {$/;"	f	class:PTC::CallInstruction
outArgCount	tools/revng-lift/InstructionTranslator.cpp	/^inline unsigned Instruction::outArgCount() const {$/;"	f	class:PTC::Instruction
output	scripts/monotone-framework.py	/^        output = max(nonzero(i1) & nonzero(i2),$/;"	v
output	scripts/monotone-framework.py	/^        output = node_by_index(output)$/;"	v
override	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:GeneratedCodeBasicInfo
override	include/revng/Dump/CollectCFG.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:CollectCFG
override	include/revng/Dump/CollectNoreturn.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:CollectNoreturn
override	include/revng/FunctionCallIdentification/FunctionCallIdentification.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:FunctionCallIdentification
override	include/revng/FunctionIsolation/IsolateFunctions.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:IsolateFunctions
override	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  bool runOnModule(llvm::Module &) override;$/;"	m	class:ReachingDefinitionsPass
override	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:ConditionNumberingPass
override	include/revng/ReachingDefinitions/ReachingDefinitionsPass.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:ConditionalReachedLoadsPass
override	include/revng/StackAnalysis/ABIDetectionPass.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:StackAnalysis::ABIDetectionPass
override	include/revng/StackAnalysis/FunctionBoundariesDetectionPass.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:StackAnalysis::FunctionBoundariesDetectionPass
override	include/revng/StackAnalysis/StackAnalysis.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:StackAnalysis::StackAnalysis
override	include/revng/Support/DebugHelper.h	/^                       llvm::formatted_raw_ostream &Output) override;$/;"	m	class:DebugAnnotationWriter
override	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  bool runOnModule(llvm::Module &TheModule) override;$/;"	m	class:CPUStateAccessAnalysisPass
override	tools/revng-lift/CodeGenerator.cpp	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:CpuLoopExitPass	file:
override	tools/revng-lift/CodeGenerator.cpp	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:CpuLoopFunctionPass	file:
override	tools/revng-lift/CodeGenerator.cpp	/^  void getAnalysisUsage(llvm::AnalysisUsage &AU) const override;$/;"	m	class:CpuLoopFunctionPass	file:
override	tools/revng-lift/JumpTargetManager.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:TranslateDirectBranchesPass
override	tools/revng-lift/JumpTargetManager.h	/^  void getAnalysisUsage(llvm::AnalysisUsage &AU) const override;$/;"	m	class:TranslateDirectBranchesPass
override	tools/revng-lift/OSRA.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:OSRAPass
override	tools/revng-lift/OSRA.h	/^  virtual void releaseMemory() override;$/;"	m	class:OSRAPass
override	tools/revng-lift/OSRA.h	/^  ~OSRAPass() override;$/;"	m	class:OSRAPass
override	tools/revng-lift/SET.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:SETPass
override	tools/revng-lift/SET.h	/^  void getAnalysisUsage(llvm::AnalysisUsage &AU) const override;$/;"	m	class:SETPass
override	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  virtual bool evaluate(unsigned Assignments) const override;$/;"	m	class:BinaryTerm	file:
override	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  virtual bool evaluate(unsigned Assignments) const override;$/;"	m	class:VariableTerm	file:
override	tools/revng-lift/SimplifyComparisonsPass.h	/^  bool runOnModule(llvm::Module &M) override;$/;"	m	class:SimplifyComparisonsPass
page_set_flags	runtime/support.c	/^void page_set_flags(target_reg start, target_reg end, int flags) {$/;"	f
parseEHFrame	tools/revng-lift/BinaryFile.cpp	/^void BinaryFile::parseEHFrame(uint64_t EHFrameAddress,$/;"	f	class:BinaryFile
parseELF	tools/revng-lift/BinaryFile.cpp	/^void BinaryFile::parseELF(object::ObjectFile *TheBinary, uint64_t BaseAddress) {$/;"	f	class:BinaryFile
parseIR	tools/revng-lift/CodeGenerator.cpp	/^static std::unique_ptr<Module> parseIR(StringRef Path, LLVMContext &Context) {$/;"	f	file:
parseLSDA	tools/revng-lift/BinaryFile.cpp	/^void BinaryFile::parseLSDA(uint64_t FDEStart, uint64_t LSDAAddress) {$/;"	f	class:BinaryFile
parseRelocation	tools/revng-lift/BinaryFile.cpp	/^Label BinaryFile::parseRelocation(unsigned char RelocationType,$/;"	f	class:BinaryFile
partCFG	tools/revng-lift/JumpTargetManager.h	/^  std::vector<std::tuple<llvm::BasicBlock *, uint64_t, llvm::BasicBlock *,uint64_t>> partCFG;$/;"	m	class:JumpTargetManager
path	runtime/support.c	/^const char *path(const char *name) {$/;"	f
pathSensitiveMerge	tools/revng-lift/OSRA.cpp	/^BoundedValue OSRA::pathSensitiveMerge(LoadInst *Reached) {$/;"	f	class:OSRA
pathToStream	lib/Support/CommandLine.cpp	/^std::ostream &pathToStream(const std::string &Path, std::ofstream &File) {$/;"	f
payBinaryValue	tools/revng-lift/JumpTargetManager.cpp	/^llvm::Value *JumpTargetManager::payBinaryValue(llvm::Value *v){$/;"	f	class:JumpTargetManager
pc	tools/revng-lift/InstructionTranslator.cpp	/^  uint64_t pc() const {$/;"	f	class:PTC::InstructionImpl
pcMContextIndex	include/revng/Support/revng.h	/^  unsigned pcMContextIndex() const { return PCMContextIndex; }$/;"	f	class:Architecture
pcReg	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::GlobalVariable *pcReg() const { return PC; }$/;"	f	class:GeneratedCodeBasicInfo
pcReg	tools/revng-lift/JumpTargetManager.h	/^  llvm::Value *pcReg() const { return PCReg; }$/;"	f	class:JumpTargetManager
pcRegSize	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  unsigned pcRegSize() const { return PCRegSize; }$/;"	f	class:GeneratedCodeBasicInfo
peek	tools/revng-lift/JumpTargetManager.cpp	/^JumpTargetManager::BlockWithAddress JumpTargetManager::peek() {$/;"	f	class:JumpTargetManager
performOp	tools/revng-lift/OSRA.cpp	/^uint64_t BoundedValue::performOp(uint64_t Op1,$/;"	f	class:BoundedValue
pinConstantStore	tools/revng-lift/JumpTargetManager.cpp	/^bool TranslateDirectBranchesPass::pinConstantStore(Function &F) {$/;"	f	class:TranslateDirectBranchesPass
pinJTs	tools/revng-lift/JumpTargetManager.cpp	/^bool TranslateDirectBranchesPass::pinJTs(Function &F) {$/;"	f	class:TranslateDirectBranchesPass
pointerSize	include/revng/Support/revng.h	/^  unsigned pointerSize() const { return PointerSize; }$/;"	f	class:Architecture
pop	include/revng/ADT/Queue.h	/^  T pop() {$/;"	f	class:QueueImpl
pop	include/revng/ADT/UniquedStack.h	/^  T pop() {$/;"	f	class:UniquedStack
pop	include/revng/Support/MonotoneFramework.h	/^  Iterated pop() { return Queue.pop(); }$/;"	f	class:MonotoneFrameworkWorkList
pop	include/revng/Support/MonotoneFramework.h	/^  Iterated pop() {$/;"	f	class:MonotoneFrameworkWorkList
pop	lib/StackAnalysis/InterproceduralAnalysis.h	/^  void pop() {$/;"	f	class:StackAnalysis::InterproceduralAnalysis
pop	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  void pop() {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
pop	tools/revng-lift/JumpTargetManager.cpp	/^  std::pair<BasicBlock *, uint64_t> pop() {$/;"	f	class:BasicBlockVisitor
pop	tools/revng-lift/VariableManager.cpp	/^  std::pair<int64_t, Value *> pop() {$/;"	f	class:OffsetValueStack
popUntil	lib/StackAnalysis/InterproceduralAnalysis.h	/^  void popUntil(const Analysis *WI) {$/;"	f	class:StackAnalysis::InterproceduralAnalysis
populateFunctionDispatcher	lib/FunctionIsolation/IsolateFunctions.cpp	/^void IFI::populateFunctionDispatcher() {$/;"	f	class:IFI
positive	tests/Runtime/calc.c	/^typedef enum { none, positive, negative } literal_status;$/;"	e	enum:__anon7	file:
pred_begin	include/revng/BasicAnalyses/CustomCFG.h	/^  links_const_iterator pred_begin() const { return Predecessors.begin(); }$/;"	f	class:CustomCFGNode
pred_begin	include/revng/BasicAnalyses/CustomCFG.h	/^  links_iterator pred_begin() { return Predecessors.begin(); }$/;"	f	class:CustomCFGNode
pred_end	include/revng/BasicAnalyses/CustomCFG.h	/^  links_const_iterator pred_end() const { return Predecessors.end(); }$/;"	f	class:CustomCFGNode
pred_end	include/revng/BasicAnalyses/CustomCFG.h	/^  links_iterator pred_end() { return Predecessors.end(); }$/;"	f	class:CustomCFGNode
predecessor_size	include/revng/BasicAnalyses/CustomCFG.h	/^  size_t predecessor_size() const { return Predecessors.size(); }$/;"	f	class:CustomCFGNode
predecessor_size	lib/StackAnalysis/ABIIR.h	/^  size_t predecessor_size() const { return Predecessors.size(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
predecessors	include/revng/BasicAnalyses/CustomCFG.h	/^  links_const_range predecessors() const {$/;"	f	class:CustomCFGNode
predecessors	include/revng/BasicAnalyses/CustomCFG.h	/^  links_range predecessors() {$/;"	f	class:CustomCFGNode
predecessors	include/revng/Support/IRHelpers.h	/^predecessors(llvm::Interval *BB) {$/;"	f
predecessors	lib/StackAnalysis/ABIIR.h	/^  links_const_range predecessors() const {$/;"	f	class:StackAnalysis::ABIIRBasicBlock
prepareDescribe	tools/revng-lift/OSRA.cpp	/^  void prepareDescribe() const {$/;"	f	class:BVMap
prepare_stack	runtime/support.c	/^static void *prepare_stack(void *stack, int argc, char **argv) {$/;"	f	file:
preprocess	tools/revng-lift/InstructionTranslator.cpp	/^SmallSet<unsigned, 1> IT::preprocess(PTCInstructionList *InstructionList) {$/;"	f	class:IT
print	include/revng/Support/ClassSentinel.h	/^  void print() const {$/;"	f	class:StackTrace
print	lib/Support/DebugHelper.cpp	/^void DebugHelper::print(std::ostream &Output, bool DebugInfo) {$/;"	f	class:DebugHelper
print_stack_trace	lib/Support/Assert.cpp	/^static void print_stack_trace() {$/;"	f	file:
process	lib/StackAnalysis/IntraproceduralFunctionSummary.h	/^  void process() {$/;"	f	class:StackAnalysis::IntraproceduralFunctionSummary
process_graph	scripts/monotone-framework.py	/^def process_graph(path, call_arcs):$/;"	f
programHeaderSize	tools/revng-lift/BinaryFile.h	/^  unsigned programHeaderSize() const { return ProgramHeaders.Size; }$/;"	f	class:BinaryFile
programHeadersAddress	tools/revng-lift/BinaryFile.h	/^  uint64_t programHeadersAddress() const { return ProgramHeaders.Address; }$/;"	f	class:BinaryFile
programHeadersCount	tools/revng-lift/BinaryFile.h	/^  unsigned programHeadersCount() const { return ProgramHeaders.Count; }$/;"	f	class:BinaryFile
prologue	tests/Analysis/arm/fake-function-without-push.S	/^prologue:$/;"	l
prologue	tests/Analysis/arm/fake-function.S	/^prologue:$/;"	l
propagateConstraints	tools/revng-lift/OSRA.cpp	/^void OSRA::propagateConstraints(Instruction *I,$/;"	f	class:OSRA
ptc	tools/revng-lift/Main.cpp	/^PTCInterface ptc = {}; \/\/\/< The interface with the PTC library.$/;"	v
purge	tools/revng-lift/JumpTargetManager.cpp	/^static void purge(BasicBlock *BB) {$/;"	f	file:
purgeBranch	include/revng/Support/IRHelpers.h	/^inline void purgeBranch(llvm::BasicBlock::iterator I) {$/;"	f
purgeDeadBlocks	tools/revng-lift/CodeGenerator.cpp	/^static void purgeDeadBlocks(Function *F) {$/;"	f	file:
purgeNoReturn	tools/revng-lift/CodeGenerator.cpp	/^static void purgeNoReturn(Function *F) {$/;"	f	file:
purgeTranslation	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::purgeTranslation(BasicBlock *Start) {$/;"	f	class:JumpTargetManager
push	include/revng/Support/Statistics.h	/^  void push(K Key) { Map[Key]++; }$/;"	f	class:CounterMap
push	include/revng/Support/Statistics.h	/^  void push(K Key, T Value) { Map[Key] += Value; }$/;"	f	class:CounterMap
push	include/revng/Support/Statistics.h	/^  void push(double X) {$/;"	f	class:RunningStatistics
push	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^void InterproceduralAnalysis::push(BasicBlock *Entry) {$/;"	f	class:StackAnalysis::InterproceduralAnalysis
push	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  void push(WorkItem &&Item) {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
push	tools/revng-lift/VariableManager.cpp	/^  void push(int64_t Offset, Value *V) {$/;"	f	class:OffsetValueStack
pushIfNew	tools/revng-lift/VariableManager.cpp	/^  void pushIfNew(int64_t Offset, Value *V) {$/;"	f	class:OffsetValueStack
push_pop	tests/Analysis/x86_64/StackAnalysis/push-pop.S	/^push_pop:$/;"	l
pushpartCFGStack	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::pushpartCFGStack(llvm::BasicBlock *dest, $/;"	f	class:JumpTargetManager
qemuName	include/revng/Support/revng.h	/^  llvm::StringRef qemuName() const { return QemuName; }$/;"	f	class:ABIRegister
qemu_host_page_mask	runtime/support.c	/^uintptr_t qemu_host_page_mask = ~((1 << 12) - 1);$/;"	v
qemu_host_page_size	runtime/support.c	/^uintptr_t qemu_host_page_size = 1 << 12;$/;"	v
qemu_real_host_page_mask	runtime/support.c	/^uintptr_t qemu_real_host_page_mask = ~((1 << 12) - 1);$/;"	v
qemu_real_host_page_size	runtime/support.c	/^uintptr_t qemu_real_host_page_size = 1 << 12;$/;"	v
raise_exception_helper	runtime/support.c	/^void raise_exception_helper() {$/;"	f
range	lib/StackAnalysis/FunctionABI.cpp	/^  DirectedLabelRange range(ABIIRBasicBlock *BB) {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis	file:
range	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  DirectedLabelRange range(ABIIRBasicBlock *BB) {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis	file:
range	tools/revng-lift/JumpTargetManager.h	/^  uint32_t range;$/;"	m	class:JumpTargetManager
raofc	tests/Analysis/x86_64/StackAnalysis/raofc.S	/^raofc:$/;"	l
rax_not_my_argument	tests/Analysis/x86_64/StackAnalysis/return-value-to-argument.S	/^rax_not_my_argument:$/;"	l
rbegin	lib/StackAnalysis/ABIIR.h	/^  const_reverse_iterator rbegin() const { return Instructions.rbegin(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
rbegin	lib/StackAnalysis/ABIIR.h	/^  reverse_iterator rbegin() { return Instructions.rbegin(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
read	lib/StackAnalysis/FunctionABI.cpp	/^  void read() { H::transfer(this->Analyses, GeneralTransferFunction::Read); }$/;"	f	class:StackAnalysis::AnalysesWrapper
read	lib/StackAnalysis/FunctionABI.cpp	/^  void read(ASSlot Slot) {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
read	tools/revng-lift/BinaryFile.h	/^  static uint64_t read(const uint8_t *Buf) {$/;"	f	struct:Endianess
readConstantInt	tools/revng-lift/JumpTargetManager.cpp	/^ConstantInt *JumpTargetManager::readConstantInt(Constant *ConstantAddress,$/;"	f	class:JumpTargetManager
readConstantPointer	tools/revng-lift/JumpTargetManager.cpp	/^Constant *JumpTargetManager::readConstantPointer(Constant *Address,$/;"	f	class:JumpTargetManager
readNext	tools/revng-lift/BinaryFile.cpp	/^  T readNext() {$/;"	f	class:DwarfReader
readNextU	tools/revng-lift/BinaryFile.cpp	/^  uint64_t readNextU() {$/;"	f	class:DwarfReader
readNextU16	tools/revng-lift/BinaryFile.cpp	/^  uint16_t readNextU16() { return readNext<uint16_t>(); }$/;"	f	class:DwarfReader
readNextU32	tools/revng-lift/BinaryFile.cpp	/^  uint32_t readNextU32() { return readNext<uint32_t>(); }$/;"	f	class:DwarfReader
readNextU64	tools/revng-lift/BinaryFile.cpp	/^  uint64_t readNextU64() { return readNext<uint64_t>(); }$/;"	f	class:DwarfReader
readNextU8	tools/revng-lift/BinaryFile.cpp	/^  uint8_t readNextU8() { return readNext<uint8_t>(); }$/;"	f	class:DwarfReader
readPointer	tools/revng-lift/BinaryFile.cpp	/^  Pointer readPointer(unsigned Encoding, uint64_t Base = 0) {$/;"	f	class:DwarfReader
readPointer	tools/revng-lift/BinaryFile.h	/^inline uint64_t readPointer<llvm::object::ELF32BE>(const uint8_t *Buf) {$/;"	f
readPointer	tools/revng-lift/BinaryFile.h	/^inline uint64_t readPointer<llvm::object::ELF32LE>(const uint8_t *Buf) {$/;"	f
readPointer	tools/revng-lift/BinaryFile.h	/^inline uint64_t readPointer<llvm::object::ELF64BE>(const uint8_t *Buf) {$/;"	f
readPointer	tools/revng-lift/BinaryFile.h	/^inline uint64_t readPointer<llvm::object::ELF64LE>(const uint8_t *Buf) {$/;"	f
readPointerInternal	tools/revng-lift/BinaryFile.cpp	/^  Pointer readPointerInternal(T Value, unsigned Encoding, uint64_t Base) {$/;"	f	class:DwarfReader	file:
readRange	tools/revng-lift/JumpTargetManager.h	/^  const interval_set &readRange() const { return ReadIntervalSet; }$/;"	f	class:JumpTargetManager
readRawValue	tools/revng-lift/BinaryFile.cpp	/^BinaryFile::readRawValue(uint64_t Address, unsigned Size, Endianess E) const {$/;"	f	class:BinaryFile
readRegisterAsm	include/revng/Support/revng.h	/^  llvm::StringRef readRegisterAsm() const { return ReadRegisterAsm; }$/;"	f	class:Architecture
readSLEB128	tools/revng-lift/BinaryFile.cpp	/^  int64_t readSLEB128() {$/;"	f	class:DwarfReader
readULEB128	tools/revng-lift/BinaryFile.cpp	/^  uint64_t readULEB128() {$/;"	f	class:DwarfReader
readsMemory	tools/revng-lift/SET.cpp	/^  bool readsMemory() const { return LoadsCount > 0; }$/;"	f	class:OperationsStack
rebuildDispatcher	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::rebuildDispatcher() {$/;"	f	class:JumpTargetManager
rebuildLabelsMap	tools/revng-lift/BinaryFile.cpp	/^void BinaryFile::rebuildLabelsMap() {$/;"	f	class:BinaryFile
recompute	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^  recompute(ResultsPool &This, const ClobberedMap &InitialState) {$/;"	f	struct:StackAnalysis::ClobberedRegistersAnalysis
recursive	tests/Analysis/x86_64/StackAnalysis/recursion.S	/^recursive:$/;"	l
registerExtremal	include/revng/Support/MonotoneFramework.h	/^  void registerExtremal(Label L) { Extremals.insert(L); }$/;"	f	class:MonotoneFramework
registerFunction	lib/StackAnalysis/InterproceduralAnalysis.h	/^  void registerFunction(llvm::BasicBlock *Entry,$/;"	f	class:StackAnalysis::ResultsPool
registerFunction	lib/StackAnalysis/InterproceduralAnalysis.h	/^  void registerFunction(llvm::BasicBlock *Function, FunctionType::Values Type) {$/;"	f	class:StackAnalysis::ResultsPool
registerInstruction	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::registerInstruction(uint64_t PC,$/;"	f	class:JumpTargetManager
registerJT	tools/revng-lift/JumpTargetManager.cpp	/^JumpTargetManager::registerJT(uint64_t PC, JTReason::Values Reason) {$/;"	f	class:JumpTargetManager
registerJT	tools/revng-lift/JumpTargetManager.h	/^  void registerJT(llvm::BasicBlock *BB, JTReason::Values Reason) {$/;"	f	class:JumpTargetManager
registerKiller	tools/revng-lift/NoReturnAnalysis.cpp	/^void NoReturnAnalysis::registerKiller(uint64_t StoredValue,$/;"	f	class:NoReturnAnalysis
registerKiller	tools/revng-lift/NoReturnAnalysis.h	/^  void registerKiller(llvm::BasicBlock *BB, KillReason::Values Reason) {$/;"	f	class:NoReturnAnalysis
registerLTR	tools/revng-lift/OSRA.cpp	/^  bool registerLTR(BasicBlock *BB) { return LTR.insert(BB).second; }$/;"	f	class:Reacher
registerLabel	tools/revng-lift/BinaryFile.h	/^  void registerLabel(const Label &NewLabel) {$/;"	f	class:BinaryFile
registerLoadAddresses	tools/revng-lift/SET.cpp	/^  void registerLoadAddresses() const {$/;"	f	class:OperationsStack
registerPCs	tools/revng-lift/SET.cpp	/^  void registerPCs() const {$/;"	f	class:OperationsStack
registerReadRange	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::registerReadRange(uint64_t Address, uint64_t Size) {$/;"	f	class:JumpTargetManager
registerRelocations	tools/revng-lift/BinaryFile.cpp	/^void BinaryFile::registerRelocations(Elf_Rel_Array<T, HasAddend> Relocations,$/;"	f	class:BinaryFile
registerSimpleLiteral	tools/revng-lift/JumpTargetManager.h	/^  void registerSimpleLiteral(uint64_t Address) {$/;"	f	class:JumpTargetManager
registerStackSizeAtCallSite	lib/StackAnalysis/Intraprocedural.h	/^  bool registerStackSizeAtCallSite(FunctionCall TheFunctionCall,$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
registerSyscalls	tools/revng-lift/NoReturnAnalysis.cpp	/^void NoReturnAnalysis::registerSyscalls(llvm::Function *F) {$/;"	f	class:NoReturnAnalysis
registerToVisit	include/revng/Support/MonotoneFramework.h	/^  void registerToVisit(Label L) {$/;"	f	class:MonotoneFramework
releaseMemory	tools/revng-lift/OSRA.cpp	/^void OSRAPass::releaseMemory() {$/;"	f	class:OSRAPass
relocate	tools/revng-lift/BinaryFile.h	/^  uint64_t relocate(uint64_t Address) const { return BaseAddress + Address; }$/;"	f	class:BinaryFile
relocationTypes	include/revng/Support/revng.h	/^  const RelocationTypesMap &relocationTypes() const { return RelocationTypes; }$/;"	f	class:Architecture
removeCurCrossedCallSite	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  bool removeCurCrossedCallSite(const WorkItem &Item) {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
rend	lib/StackAnalysis/ABIIR.h	/^  const_reverse_iterator rend() const { return Instructions.rend(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
rend	lib/StackAnalysis/ABIIR.h	/^  reverse_iterator rend() { return Instructions.rend(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
replace	tools/revng-lift/ExternalJumpsHandler.cpp	/^replace(string &Target, const StringRef Search, const StringRef Replace) {$/;"	f	file:
replaceAll	lib/Support/DebugHelper.cpp	/^replaceAll(std::string &Input, const std::string &From, const std::string &To) {$/;"	f	file:
replaceFunction	tools/revng-lift/CodeGenerator.cpp	/^static BasicBlock *replaceFunction(Function *ToReplace) {$/;"	f	file:
replaceFunctionCall	lib/FunctionIsolation/IsolateFunctions.cpp	/^bool IFI::replaceFunctionCall(BasicBlock *NewBB,$/;"	f	class:IFI
replaceFunctionWithRet	tools/revng-lift/CodeGenerator.cpp	/^static void replaceFunctionWithRet(Function *ToReplace, uint64_t Result) {$/;"	f	file:
report	lib/Support/Assert.cpp	/^report(const char *Type, const char *File, unsigned Line, const char *What) {$/;"	f	file:
requiredBits	include/revng/ADT/LazySmallBitVector.h	/^    unsigned requiredBits() const {$/;"	f	struct:LazySmallBitVector::LargeStorage
requiredBits	include/revng/ADT/LazySmallBitVector.h	/^  unsigned requiredBits() const {$/;"	f	class:LazySmallBitVector
requiredBits	include/revng/ADT/LazySmallBitVector.h	/^inline unsigned requiredBits(T Value) {$/;"	f
requiresInterproceduralHandling	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  bool requiresInterproceduralHandling() {$/;"	f	class:RDA::Interrupt
requiresInterproceduralHandling	lib/StackAnalysis/FunctionABI.cpp	/^  bool requiresInterproceduralHandling() {$/;"	f	class:StackAnalysis::ABIAnalysis::Interrupt
requiresInterproceduralHandling	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  bool requiresInterproceduralHandling() {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Interrupt
requiresInterproceduralHandling	lib/StackAnalysis/Intraprocedural.h	/^  bool requiresInterproceduralHandling() const {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
requiresInterproceduralHandling	lib/Support/ExampleAnalysis.cpp	/^  bool requiresInterproceduralHandling() { revng_abort(); }$/;"	f	class:ExampleAnalysis::Interrupt
reset	lib/StackAnalysis/ABIIR.h	/^  void reset() {$/;"	f	class:StackAnalysis::ABIFunction
reset	tools/revng-lift/InstructionTranslator.h	/^  void reset() { LabeledBasicBlocks.clear(); }$/;"	f	class:InstructionTranslator
reset	tools/revng-lift/SET.cpp	/^  void reset() {$/;"	f	class:OperationsStack
reset	tools/revng-lift/SET.cpp	/^  void reset(StoreInst *Store) {$/;"	f	class:OperationsStack
resetCacheMustHit	lib/StackAnalysis/Intraprocedural.h	/^  void resetCacheMustHit() { CacheMustHit = false; }$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
resetFunctionAnalyses	lib/StackAnalysis/FunctionABI.cpp	/^  void resetFunctionAnalyses(bool IsReturn) {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
resetFunctionCallAnalyses	lib/StackAnalysis/FunctionABI.cpp	/^  void resetFunctionCallAnalyses(FunctionCall TheCall) {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
resetToUnknown	lib/StackAnalysis/FunctionABI.h	/^  void resetToUnknown() {$/;"	f	class:StackAnalysis::CallSiteRegisterState
resetToUnknown	lib/StackAnalysis/FunctionABI.h	/^  void resetToUnknown() {$/;"	f	class:StackAnalysis::RegisterState
resetToUnknown	lib/StackAnalysis/FunctionABI.h	/^  void resetToUnknown(ASSlot Slot) {$/;"	f	class:StackAnalysis::FunctionABI
result	scripts/monotone-framework.py	/^  result = []$/;"	v
result	scripts/monotone-framework.py	/^  result = defaultdict(lambda: [])$/;"	v
ret	tests/Analysis/arm/longjmp.S	/^ret:$/;"	l
ret	tests/Analysis/x86_64/longjmp.S	/^ret:$/;"	l
returnFromCall	lib/StackAnalysis/FunctionABI.cpp	/^  static void returnFromCall(Tuple &, const RegisterState &) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
returnFromCall	lib/StackAnalysis/FunctionABI.cpp	/^  static void returnFromCall(Tuple &This, const RegisterState &Other) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
returnFromCall	lib/StackAnalysis/FunctionABI.cpp	/^  void returnFromCall(const RegisterState &Other) {$/;"	f	class:StackAnalysis::AnalysesWrapper
returnFromCall	lib/StackAnalysis/FunctionABI.cpp	/^returnFromCall(DefaultMap<K, V, N> &This, const DefaultMap<K, Q, N> &Other) {$/;"	f	namespace:StackAnalysis::MapHelpers
returnFromCall	lib/StackAnalysis/FunctionABI.cpp	/^static void returnFromCall(V &This, const Q &Other) {$/;"	f	namespace:StackAnalysis::MapHelpers
return_rax	tests/Analysis/x86_64/StackAnalysis/return-value-to-argument.S	/^return_rax:$/;"	l
return_value_to_argument	tests/Analysis/x86_64/StackAnalysis/return-value-to-argument.S	/^return_value_to_argument:$/;"	l
reverse	include/revng/ADT/UniquedStack.h	/^  void reverse() { std::reverse(Queue.begin(), Queue.end()); }$/;"	f	class:UniquedStack
revng_abort	include/revng/Support/Assert.h	176;"	d
revng_abort_impl	include/revng/Support/Assert.h	95;"	d
revng_assert	include/revng/Support/Assert.h	187;"	d
revng_assert_fail	lib/Support/Assert.cpp	/^void revng_assert_fail(const char *AssertionBody,$/;"	f
revng_assert_impl	include/revng/Support/Assert.h	128;"	d
revng_assert_impl	include/revng/Support/Assert.h	141;"	d
revng_assert_impl_nomsg	include/revng/Support/Assert.h	186;"	d
revng_check	include/revng/Support/Assert.h	194;"	d
revng_check_fail	lib/Support/Assert.cpp	/^void revng_check_fail(const char *CheckBody,$/;"	f
revng_check_impl	include/revng/Support/Assert.h	104;"	d
revng_check_impl_nomsg	include/revng/Support/Assert.h	193;"	d
revng_do_abort	lib/Support/Assert.cpp	/^void revng_do_abort(const char *Message, const char *File, unsigned Line) {$/;"	f
revng_log	include/revng/Support/Debug.h	286;"	d
revng_unreachable	include/revng/Support/Assert.h	181;"	d
revng_unreachable_impl	include/revng/Support/Assert.h	121;"	d
revng_unreachable_impl	include/revng/Support/Assert.h	139;"	d
root	tests/Runtime/calc.c	/^int root(char *buffer, size_t size) {$/;"	f
root	tests/Runtime/floating-point.c	/^int root(char *buffer, size_t size) {$/;"	f
root	tests/Runtime/function-call.c	/^int root(char *buffer, size_t size) {$/;"	f
root	tests/Runtime/global.c	/^int root(char *buffer, size_t size) {$/;"	f
root	tests/Runtime/syscall.c	/^int root(char *buffer, size_t size) {$/;"	f
round	lib/StackAnalysis/Intraprocedural.cpp	/^static std::string round(F Value, int Digits) {$/;"	f	file:
run	include/revng/Support/IRHelpers.h	/^  void run(llvm::Instruction *I) {$/;"	f	struct:BFSVisitorBase
run	include/revng/Support/MonotoneFramework.h	/^  Interrupt run() {$/;"	f	class:MonotoneFramework
run	lib/FunctionIsolation/IsolateFunctions.cpp	/^void IFI::run() {$/;"	f	class:IFI
run	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^  static ClobberedMap run(ResultsPool &This) {$/;"	f	struct:StackAnalysis::ClobberedRegistersAnalysis
run	lib/StackAnalysis/InterproceduralAnalysis.cpp	/^void InterproceduralAnalysis::run(BasicBlock *Entry, ResultsPool &Results) {$/;"	f	class:StackAnalysis::InterproceduralAnalysis
run	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^bool CPUSAOA::run() {$/;"	f	class:CPUSAOA
run	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^bool CPUStateAccessAnalysis::run() {$/;"	f	class:CPUStateAccessAnalysis
run	tools/revng-lift/OSRA.cpp	/^void OSRA::run() {$/;"	f	class:OSRA
run	tools/revng-lift/SET.cpp	/^bool SET::run() {$/;"	f	class:SET
runOnModule	lib/BasicAnalyses/GeneratedCodeBasicInfo.cpp	/^bool GeneratedCodeBasicInfo::runOnModule(llvm::Module &M) {$/;"	f	class:GeneratedCodeBasicInfo
runOnModule	lib/Dump/CollectCFG.cpp	/^bool CollectCFG::runOnModule(Module &M) {$/;"	f	class:CollectCFG
runOnModule	lib/Dump/CollectNoreturn.cpp	/^bool CollectNoreturn::runOnModule(Module &M) {$/;"	f	class:CollectNoreturn
runOnModule	lib/FunctionCallIdentification/FunctionCallIdentification.cpp	/^bool FunctionCallIdentification::runOnModule(llvm::Module &M) {$/;"	f	class:FunctionCallIdentification
runOnModule	lib/FunctionIsolation/IsolateFunctions.cpp	/^bool IF::runOnModule(Module &TheModule) {$/;"	f	class:IF
runOnModule	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^bool ConditionNumberingPass::runOnModule(Module &M) {$/;"	f	class:ConditionNumberingPass
runOnModule	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^bool ConditionalReachedLoadsPass::runOnModule(llvm::Module &M) {$/;"	f	class:ConditionalReachedLoadsPass
runOnModule	lib/ReachingDefinitions/ReachingDefinitionsPass.cpp	/^bool ReachingDefinitionsPass::runOnModule(llvm::Module &M) {$/;"	f	class:ReachingDefinitionsPass
runOnModule	lib/StackAnalysis/ABIDetectionPass.cpp	/^bool ABIDetectionPass::runOnModule(Module &M) {$/;"	f	class:StackAnalysis::ABIDetectionPass
runOnModule	lib/StackAnalysis/FunctionBoundariesDetectionPass.cpp	/^bool FBDP::runOnModule(Module &M) {$/;"	f	class:StackAnalysis::FBDP
runOnModule	lib/StackAnalysis/StackAnalysis.cpp	/^bool StackAnalysis<AnalyzeABI>::runOnModule(Module &M) {$/;"	f	class:StackAnalysis::StackAnalysis
runOnModule	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^bool CPUStateAccessAnalysisPass::runOnModule(Module &Mod) {$/;"	f	class:CPUStateAccessAnalysisPass
runOnModule	tools/revng-lift/CodeGenerator.cpp	/^bool CpuLoopExitPass::runOnModule(llvm::Module &M) {$/;"	f	class:CpuLoopExitPass
runOnModule	tools/revng-lift/CodeGenerator.cpp	/^bool CpuLoopFunctionPass::runOnModule(Module &M) {$/;"	f	class:CpuLoopFunctionPass
runOnModule	tools/revng-lift/JumpTargetManager.cpp	/^bool TranslateDirectBranchesPass::runOnModule(Module &M) {$/;"	f	class:TranslateDirectBranchesPass
runOnModule	tools/revng-lift/OSRA.cpp	/^bool OSRAPass::runOnModule(Module &M) {$/;"	f	class:OSRAPass
runOnModule	tools/revng-lift/SET.cpp	/^bool SETPass::runOnModule(Module &M) {$/;"	f	class:SETPass
runOnModule	tools/revng-lift/SimplifyComparisonsPass.cpp	/^bool SimplifyComparisonsPass::runOnModule(Module &M) {$/;"	f	class:SimplifyComparisonsPass
runTest	tests/Unit/ReachingDefinitionsPass.cpp	/^runTest(const char *Body,$/;"	f	file:
saofc	tests/Analysis/x86_64/StackAnalysis/saofc.S	/^saofc:$/;"	l
saved_argc	runtime/support.c	/^static int saved_argc;$/;"	v	file:
saved_argv	runtime/support.c	/^static char **saved_argv;$/;"	v	file:
saved_registers	runtime/support.c	/^target_reg *saved_registers;$/;"	v
searchpartCFG	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::searchpartCFG(uint64_t srcAddr){$/;"	f	class:JumpTargetManager
segments	tools/revng-lift/BinaryFile.h	/^  const std::vector<SegmentInfo> &segments() const { return Segments; }$/;"	f	class:BinaryFile
segments	tools/revng-lift/BinaryFile.h	/^  std::vector<SegmentInfo> &segments() { return Segments; }$/;"	f	class:BinaryFile
selectNextSource	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  bool selectNextSource(WorkItem &Item) {$/;"	f	class:CPUStateAccessOffsetAnalysis	file:
serialize	include/revng/StackAnalysis/StackAnalysis.h	/^  void serialize(std::ostream &Output) { Output << TextRepresentation; }$/;"	f	class:StackAnalysis::StackAnalysis
serialize	lib/Dump/CollectCFG.cpp	/^void CollectCFG::serialize(std::ostream &Output) {$/;"	f	class:CollectCFG
serialize	lib/Dump/CollectNoreturn.cpp	/^void CollectNoreturn::serialize(std::ostream &Output) {$/;"	f	class:CollectNoreturn
serialize	lib/StackAnalysis/FunctionBoundariesDetectionPass.cpp	/^void FBDP::serialize(std::ostream &Output, Module &M) {$/;"	f	class:StackAnalysis::FBDP
serialize	tools/revng-lift/CodeGenerator.cpp	/^void CodeGenerator::serialize() {$/;"	f	class:CodeGenerator
serializeMetadata	lib/StackAnalysis/StackAnalysis.cpp	/^void StackAnalysis<AnalyzeABI>::serializeMetadata(Function &F) {$/;"	f	class:StackAnalysis::StackAnalysis
set	include/revng/ADT/LazySmallBitVector.h	/^  void set(unsigned Index) {$/;"	f	class:LazySmallBitVector
set	lib/StackAnalysis/Element.h	/^  void set(int32_t Offset, Value V) { ASOContent[Offset] = V; }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
set	lib/StackAnalysis/Intraprocedural.cpp	/^  void set(Instruction *I, Value V) {$/;"	f	class:StackAnalysis::Intraprocedural::BasicBlockState
set	tools/revng-lift/SimplifyComparisonsPass.cpp	/^void TermUse::set(Term *Operand) {$/;"	f	class:TermUse
set2ptr	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::set2ptr(llvm::Instruction *next,$/;"	f	class:JumpTargetManager
setActive	tools/revng-lift/OSRA.cpp	/^  void setActive() { LastActiveHeight = Active; }$/;"	f	class:Reacher
setAddress	tools/revng-lift/BinaryFile.cpp	/^  void setAddress(uint64_t Address) {$/;"	f	class:FilePortion
setApproximate	tools/revng-lift/SET.cpp	/^  void setApproximate() { Approximate = true; }$/;"	f	class:OperationsStack
setBottom	tools/revng-lift/OSRA.h	/^    void setBottom() {$/;"	f	class:OSRAPass::BoundedValue
setBoundedValue	tools/revng-lift/OSRA.h	/^    void setBoundedValue(BoundedValue *NewBV) { BV = NewBV; }$/;"	f	class:OSRAPass::OSR
setCFGForm	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::setCFGForm(CFGForm::Values NewForm) {$/;"	f	class:JumpTargetManager
setCapacity	include/revng/ADT/LazySmallBitVector.h	/^    void setCapacity(size_t Count) { Capacity = Count; }$/;"	f	struct:LazySmallBitVector::LargeStorage
setDataLayout	tools/revng-lift/VariableManager.h	/^  void setDataLayout(const llvm::DataLayout *NewLayout) {$/;"	f	class:VariableManager
setDispatcher	tools/revng-lift/NoReturnAnalysis.h	/^  void setDispatcher(llvm::BasicBlock *BB) { Dispatcher = BB; }$/;"	f	class:NoReturnAnalysis
setInactive	tools/revng-lift/OSRA.cpp	/^  void setInactive(unsigned Height) { LastActiveHeight = Height; }$/;"	f	class:Reacher
setIndentation	include/revng/Support/Debug.h	/^  void setIndentation(unsigned Level) {$/;"	f	class:Logger
setLastMerge	tools/revng-lift/OSRA.cpp	/^  void setLastMerge(unsigned Height) { LastMergeHeight = Height; }$/;"	f	class:Reacher
setLegalValue	tools/revng-lift/JumpTargetManager.cpp	/^uint32_t JumpTargetManager::setLegalValue(uint32_t &userCodeFlag,bool rangeF){$/;"	f	class:JumpTargetManager
setOperand	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  void setOperand(unsigned Index, Term *T) { Operands[Index] = T; }$/;"	f	class:BinaryTerm
setReason	tools/revng-lift/JumpTargetManager.h	/^    void setReason(JTReason::Values Reason) {$/;"	f	class:JumpTargetManager::JumpTarget
setReturn	lib/StackAnalysis/ABIIR.h	/^  void setReturn() { IsReturn = true; }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
setSignedness	tools/revng-lift/OSRA.cpp	/^  void setSignedness(BasicBlock *BB, const Value *V, bool IsSigned) {$/;"	f	class:BVMap
setSignedness	tools/revng-lift/OSRA.cpp	/^void BoundedValue::setSignedness(bool IsSigned) {$/;"	f	class:BoundedValue
setSize	tools/revng-lift/BinaryFile.cpp	/^  void setSize(uint64_t Size) {$/;"	f	class:FilePortion
setSmall	include/revng/ADT/LazySmallBitVector.h	/^  void setSmall(uintptr_t Value) {$/;"	f	class:LazySmallBitVector
setTop	tools/revng-lift/OSRA.h	/^    void setTop() {$/;"	f	class:OSRAPass::BoundedValue
setVirtualSize	tools/revng-lift/BinaryFile.h	/^  void setVirtualSize(uint64_t VirtualSize) {$/;"	f	class:Label
setsSyscallNumber	tools/revng-lift/NoReturnAnalysis.cpp	/^bool NoReturnAnalysis::setsSyscallNumber(llvm::StoreInst *Store) {$/;"	f	class:NoReturnAnalysis
setupLoadInEnv	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void CPUStateAccessAnalysis::setupLoadInEnv(Instruction *LoadToFix,$/;"	f	class:CPUStateAccessAnalysis
setupOutEnvAccess	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^CPUStateAccessAnalysis::setupOutEnvAccess(Instruction *AccessToFix) {$/;"	f	class:CPUStateAccessAnalysis
setupStoreInEnv	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void CPUStateAccessAnalysis::setupStoreInEnv(Instruction *StoreToFix,$/;"	f	class:CPUStateAccessAnalysis
shouldIgnoreSymbol	tools/revng-lift/BinaryFile.cpp	/^static bool shouldIgnoreSymbol(StringRef Name) {$/;"	f	file:
silent_assume	include/revng/Support/Assert.h	51;"	d
size	include/revng/ADT/Queue.h	/^  size_t size() const { return Queue.size(); }$/;"	f	class:QueueImpl
size	include/revng/ADT/SmallMap.h	/^  size_type size() const { return isSmall() ? Size : Map.size(); }$/;"	f	class:SmallMap
size	include/revng/ADT/UniquedStack.h	/^  size_t size() const { return Queue.size(); }$/;"	f	class:UniquedStack
size	include/revng/Support/Debug.h	/^  size_t size() const { return Loggers.size(); }$/;"	f	class:LoggersRegistry
size	include/revng/Support/MonotoneFramework.h	/^  size_t size() const { return Queue.size(); }$/;"	f	class:MonotoneFrameworkWorkList
size	include/revng/Support/MonotoneFramework.h	/^  size_t size() const { return Set.size(); }$/;"	f	class:MonotoneFrameworkSet
size	include/revng/Support/MonotoneFramework.h	/^  size_t size() const { return State.size(); }$/;"	f	class:MonotoneFramework
size	include/revng/Support/MonotoneFramework.h	/^  size_t size() const {$/;"	f	class:MonotoneFrameworkWorkList
size	include/revng/Support/Range.h	/^  difference_type size() const { return End - Begin; }$/;"	f	class:Range
size	include/revng/Support/Statistics.h	/^  int size() const { return N; }$/;"	f	class:RunningStatistics
size	lib/StackAnalysis/ABIIR.h	/^  size_t size() const { return BBMap.size(); }$/;"	f	class:StackAnalysis::ABIFunction
size	lib/StackAnalysis/ABIIR.h	/^  size_t size() const { return Instructions.size(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
size	lib/StackAnalysis/Element.h	/^  size_t size() const { return ASOContent.size(); }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
size	lib/StackAnalysis/FunctionABI.h	/^  size_t size() const { return M.size(); }$/;"	f	class:StackAnalysis::DefaultMap
size	lib/StackAnalysis/Intraprocedural.h	/^  size_t size() const {$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
size	tools/revng-lift/BinaryFile.h	/^  uint64_t size() const { return EndVirtualAddress - StartVirtualAddress; }$/;"	f	struct:SegmentInfo
size	tools/revng-lift/BinaryFile.h	/^  uint64_t size() const { return Size; }$/;"	f	class:Label
size	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  size_type size() const { return Offsets.size(); }$/;"	f	class:CSVOffsets
size	tools/revng-lift/OSRA.h	/^    uint64_t size() const { return BV->size(); }$/;"	f	class:OSRAPass::OSR
size	tools/revng-lift/OSRA.h	/^    uint64_t size() const {$/;"	f	class:OSRAPass::BoundedValue
size	tools/revng-lift/SubGraph.h	/^  static unsigned size(GraphType *G) { return G->Nodes.size(); }$/;"	f	struct:llvm::GraphTraits
skip	tests/Analysis/x86_64/StackAnalysis/recursion.S	/^skip:$/;"	l
skipCasts	include/revng/Support/IRHelpers.h	/^inline const llvm::Value *skipCasts(const llvm::Value *V) {$/;"	f
skipCasts	include/revng/Support/IRHelpers.h	/^inline llvm::Value *skipCasts(llvm::Value *V) {$/;"	f
slot	lib/StackAnalysis/Element.h	/^  ASSlot slot(int32_t Offset) const { return ASSlot::create(ID, Offset); }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
slowCompare	tools/revng-lift/OSRA.cpp	/^bool BoundedValue::slowCompare(const BoundedValue &Other) const {$/;"	f	class:BoundedValue
smallBegin	include/revng/ADT/SmallMap.h	/^  ConstVIterator smallBegin() const {$/;"	f	class:SmallMap
smallBegin	include/revng/ADT/SmallMap.h	/^  VIterator smallBegin() { return reinterpret_cast<VIterator>(Vector.begin()); }$/;"	f	class:SmallMap
solveEquation	tools/revng-lift/OSRA.cpp	/^Constant *OSR::solveEquation(Constant *KnownTerm,$/;"	f	class:OSR
sort	include/revng/ADT/SmallMap.h	/^  void sort() const {$/;"	f	class:SmallMap
sort	lib/StackAnalysis/FunctionABI.h	/^  void sort() const { M.sort(); }$/;"	f	class:StackAnalysis::DefaultMap
sources	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  sources() const {$/;"	f	class:WorkItem
spReg	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::GlobalVariable *spReg() const { return SP; }$/;"	f	class:GeneratedCodeBasicInfo
stackArguments	lib/StackAnalysis/ABIIR.h	/^  const std::set<int32_t> &stackArguments() const {$/;"	f	class:StackAnalysis::ABIIRInstruction
stackArguments	lib/StackAnalysis/Element.h	/^  std::set<int32_t> stackArguments(int32_t CallerStackSize) const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
stackID	lib/StackAnalysis/ASSlot.h	/^  static ASID stackID() { return ASID(LastStackID); }$/;"	f	class:StackAnalysis::ASID
stackPointerRegister	include/revng/Support/revng.h	/^  llvm::StringRef stackPointerRegister() const { return StackPointerRegister; }$/;"	f	class:Architecture
stackSize	lib/StackAnalysis/Intraprocedural.h	/^  llvm::Optional<int32_t> stackSize(Element &Result) const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
standardDeviation	include/revng/Support/Statistics.h	/^  double standardDeviation() const { return sqrt(variance()); }$/;"	f	class:RunningStatistics
startsWith	include/revng/Support/revng.h	/^inline bool startsWith(std::string String, std::string Prefix) {$/;"	f
std	lib/StackAnalysis/ASSlot.h	/^namespace std {$/;"	n
std	lib/StackAnalysis/Element.h	/^namespace std {$/;"	n
store	lib/StackAnalysis/Element.h	/^  void store(Value Address, Value StoredValue) {$/;"	f	class:StackAnalysis::Intraprocedural::Element
storeToCPUStateOffset	tools/revng-lift/VariableManager.cpp	/^bool VariableManager::storeToCPUStateOffset(IRBuilder<> &Builder,$/;"	f	class:VariableManager
storeToEnvOffset	tools/revng-lift/VariableManager.h	/^  bool storeToEnvOffset(llvm::IRBuilder<> &Builder,$/;"	f	class:VariableManager
succ_begin	include/revng/BasicAnalyses/CustomCFG.h	/^  links_const_iterator succ_begin() const { return Successors.begin(); }$/;"	f	class:CustomCFGNode
succ_begin	include/revng/BasicAnalyses/CustomCFG.h	/^  links_iterator succ_begin() { return Successors.begin(); }$/;"	f	class:CustomCFGNode
succ_end	include/revng/BasicAnalyses/CustomCFG.h	/^  links_const_iterator succ_end() const { return Successors.end(); }$/;"	f	class:CustomCFGNode
succ_end	include/revng/BasicAnalyses/CustomCFG.h	/^  links_iterator succ_end() { return Successors.end(); }$/;"	f	class:CustomCFGNode
successor_size	include/revng/BasicAnalyses/CustomCFG.h	/^  size_t successor_size() const { return Successors.size(); }$/;"	f	class:CustomCFGNode
successor_size	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  size_t successor_size(llvm::BasicBlock *BB, Interrupt &I) const {$/;"	f	class:RDA::Analysis
successor_size	include/revng/Support/MonotoneFramework.h	/^  size_t successor_size(Label &L, Interrupt &I) const {$/;"	f	class:MonotoneFramework
successor_size	lib/StackAnalysis/ABIIR.h	/^  size_t successor_size() const { return Successors.size(); }$/;"	f	class:StackAnalysis::ABIIRBasicBlock
successor_size	lib/StackAnalysis/FunctionABI.cpp	/^  size_t successor_size(ABIIRBasicBlock *BB, Interrupt<E> &) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
successor_size	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  size_t successor_size(ABIIRBasicBlock *BB, Interrupt &) const {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
successor_size	lib/StackAnalysis/Intraprocedural.h	/^  size_t successor_size(llvm::BasicBlock *, Interrupt &I) const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
successor_size	lib/Support/ExampleAnalysis.cpp	/^  size_t successor_size(Label *, Interrupt &) const { revng_abort(); }$/;"	f	class:ExampleAnalysis::Analysis
successors	include/revng/BasicAnalyses/CustomCFG.h	/^  links_const_range successors() const {$/;"	f	class:CustomCFGNode
successors	include/revng/BasicAnalyses/CustomCFG.h	/^  links_range successors() {$/;"	f	class:CustomCFGNode
successors	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  SuccessorsList successors(llvm::BasicBlock *BB, Interrupt &) const {$/;"	f	class:RDA::Analysis
successors	include/revng/Support/IRHelpers.h	/^  llvm::iterator_range<llvm::pred_iterator> successors(llvm::BasicBlock *BB) {$/;"	f	struct:BackwardBFSVisitor
successors	include/revng/Support/IRHelpers.h	/^  llvm::iterator_range<llvm::succ_iterator> successors(llvm::BasicBlock *BB) {$/;"	f	struct:ForwardBFSVisitor
successors	include/revng/Support/IRHelpers.h	/^successors(llvm::Interval *BB) {$/;"	f
successors	include/revng/Support/MonotoneFramework.h	/^  SuccessorsRange successors(Label &L, Interrupt &I) const {$/;"	f	class:MonotoneFramework
successors	lib/StackAnalysis/ABIIR.h	/^  links_const_range successors() const {$/;"	f	class:StackAnalysis::ABIIRBasicBlock
successors	lib/StackAnalysis/ABIIR.h	/^  links_range successors() {$/;"	f	class:StackAnalysis::ABIIRBasicBlock
successors	lib/StackAnalysis/FunctionABI.cpp	/^  successors(ABIIRBasicBlock *BB, Interrupt<E> &) const {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
successors	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  successors(ABIIRBasicBlock *BB, Interrupt &) const {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
successors	lib/StackAnalysis/Intraprocedural.h	/^  successors(llvm::BasicBlock *, Interrupt &I) const {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
successors	lib/Support/ExampleAnalysis.cpp	/^  llvm::iterator_range<Label **> successors(Label *, Interrupt &) const {$/;"	f	class:ExampleAnalysis::Analysis
summarize	tools/revng-lift/OSRA.cpp	/^BoundedValue &BVMap::summarize(BasicBlock *Target, MapValue *BVOVector) {$/;"	f	class:BVMap
switchBlock	tools/revng-lift/OSRA.cpp	/^  OSR switchBlock(OSR Base, BasicBlock *BB) const {$/;"	f	class:OSRA
symbolName	tools/revng-lift/BinaryFile.h	/^  llvm::StringRef symbolName() const {$/;"	f	class:Label
symbolName	tools/revng-lift/SET.cpp	/^  StringRef symbolName() const {$/;"	f	class:MaterializedValue
symbolsCount	tools/revng-lift/BinaryFile.cpp	/^uint64_t BinaryFile::symbolsCount(const FilePortion &Relocations) {$/;"	f	class:BinaryFile
syscallHelper	include/revng/Support/revng.h	/^  llvm::StringRef syscallHelper() const { return SyscallHelper; }$/;"	f	class:Architecture
syscallNumberRegister	include/revng/Support/revng.h	/^  llvm::StringRef syscallNumberRegister() const {$/;"	f	class:Architecture
tag	lib/StackAnalysis/Element.h	/^  const ASSlot *tag() const {$/;"	f	class:StackAnalysis::Intraprocedural::Value
tailcall	tests/Analysis/arm/indirect-tail-call.S	/^tailcall:$/;"	l
tailcall	tests/Analysis/x86_64/indirect-tail-call.S	/^tailcall:$/;"	l
take	include/revng/Support/ClassSentinel.h	/^  void take() { Count = backtrace(Buffer, BufferCapacity); }$/;"	f	class:StackTrace
target	lib/StackAnalysis/ABIIR.h	/^  const ASSlot target() const {$/;"	f	class:StackAnalysis::ABIIRInstruction
target_reg	runtime/support.h	/^typedef uint32_t target_reg;$/;"	t
target_reg	runtime/support.h	/^typedef uint64_t target_reg;$/;"	t
tb_invalidate_phys_range	runtime/support.c	/^void tb_invalidate_phys_range(target_reg start, target_reg end) {$/;"	f
terminate	lib/Support/Assert.cpp	/^[[noreturn]] static void terminate(void) {$/;"	f	file:
testFunction	lib/Support/ExampleAnalysis.cpp	/^inline void testFunction() {$/;"	f	namespace:ExampleAnalysis
tf_names	scripts/monotone-framework.py	/^  tf_names = sorted([e.attr["label"] for e in tf_graph.edges_iter()])$/;"	v
tfs	scripts/monotone-framework.py	/^  tfs = [e.attr["label"] for e in tf_graph.edges_iter()]$/;"	v
thisDerived	include/revng/Support/RandomAccessIterator.h	/^  Derived &thisDerived() { return *static_cast<Derived *>(this); }$/;"	f	class:RandomAccessIterator
three	tests/Analysis/arm/switch-ldrls.S	/^three:$/;"	l
three	tests/Analysis/mips/jump-table-base-before-function-call.S	/^three:$/;"	l
three	tests/Analysis/mips/switch-jump-table-stack.S	/^three:$/;"	l
three	tests/Analysis/mips/switch-jump-table.S	/^three:$/;"	l
three	tests/Analysis/x86_64/rda-in-memory.S	/^three:$/;"	l
three	tests/Analysis/x86_64/switch-jump-table.S	/^three:$/;"	l
throwException	lib/FunctionIsolation/IsolateFunctions.cpp	/^void IFI::throwException(Reason Code, BasicBlock *BB, uint64_t AdditionalPC) {$/;"	f	class:IFI
toString	tools/revng-lift/CPUStateAccessAnalysisPass.h	/^  static const char *toString(const Kind K) {$/;"	f	class:CSVOffsets
toVector	include/revng/Support/Range.h	/^  std::vector<typename Iterator::value_type> toVector() const {$/;"	f	class:Range
to_json	scripts/compare-json.py	/^def to_json(obj):$/;"	f
topType	tools/revng-lift/SET.cpp	/^  Type *topType() const {$/;"	f	class:OperationsStack
trace_buffer	runtime/support.c	/^static uint64_t *trace_buffer;$/;"	v	file:
trace_buffer_index	runtime/support.c	/^static size_t trace_buffer_index = 0;$/;"	v	file:
trace_buffer_size	runtime/support.c	/^static size_t trace_buffer_size = 1024 * 1024;$/;"	v	file:
trace_fd	runtime/support.c	/^static int trace_fd = -1;$/;"	v	file:
trackedValues	tools/revng-lift/SET.cpp	/^  std::vector<uint64_t> trackedValues() const {$/;"	f	class:OperationsStack
transfer	include/revng/ReachingDefinitions/ReachingDefinitionsAnalysisImpl.h	/^  Interrupt transfer(llvm::BasicBlock *BB) {$/;"	f	class:RDA::Analysis
transfer	include/revng/Support/MonotoneFramework.h	/^  Interrupt transfer(Label L) { return derived().transfer(L); }$/;"	f	class:MonotoneFramework
transfer	lib/StackAnalysis/FunctionABI.cpp	/^  Interrupt<E> transfer(ABIIRBasicBlock *BB) {$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
transfer	lib/StackAnalysis/FunctionABI.cpp	/^  static void transfer(Tuple &, GeneralTransferFunction) {}$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
transfer	lib/StackAnalysis/FunctionABI.cpp	/^  static void transfer(Tuple &This, GeneralTransferFunction TF) {$/;"	f	struct:StackAnalysis::AnalysesWrapperHelpers
transfer	lib/StackAnalysis/FunctionABI.cpp	/^  void transfer(GeneralTransferFunction T) {$/;"	f	class:StackAnalysis::Inhibitor
transfer	lib/StackAnalysis/FunctionABI.cpp	/^  void transfer(typename S::TransferFunction T) {$/;"	f	class:StackAnalysis::Inhibitor
transfer	lib/StackAnalysis/IncoherentCallsAnalysis.cpp	/^  Interrupt transfer(ABIIRBasicBlock *BB) {$/;"	f	class:StackAnalysis::IncoherentCallsAnalysis::Analysis
transfer	lib/StackAnalysis/Intraprocedural.cpp	/^Interrupt Analysis::transfer(BasicBlock *BB) {$/;"	f	class:StackAnalysis::Intraprocedural::Analysis
transfer	lib/Support/ExampleAnalysis.cpp	/^  Interrupt transfer(Label *) { revng_abort(); }$/;"	f	class:ExampleAnalysis::Analysis
transform	include/revng/Support/Transform.h	/^  Range<TransformIterator<R, I>> transform(Range<I> Input) {$/;"	f	class:adaptors::Transform
translate	tools/revng-lift/CodeGenerator.cpp	/^void CodeGenerator::translate(uint64_t VirtualAddress) {$/;"	f	class:CodeGenerator
translate	tools/revng-lift/InstructionTranslator.cpp	/^IT::translate(PTCInstruction *Instr, uint64_t PC, uint64_t NextPC) {$/;"	f	class:IT
translateCall	tools/revng-lift/InstructionTranslator.cpp	/^IT::TranslationResult IT::translateCall(PTCInstruction *Instr) {$/;"	f	class:IT
translateIndirectJumps	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::translateIndirectJumps() {$/;"	f	class:JumpTargetManager
translateOpcode	tools/revng-lift/InstructionTranslator.cpp	/^IT::translateOpcode(PTCOpcode Opcode,$/;"	f	class:IT
tuple	include/revng/Support/IRHelpers.h	/^  llvm::MDTuple *tuple(const char *String) { return tuple(get(String)); }$/;"	f	class:QuickMetadata
tuple	include/revng/Support/IRHelpers.h	/^  llvm::MDTuple *tuple(llvm::ArrayRef<llvm::Metadata *> MDs) {$/;"	f	class:QuickMetadata
tuple	include/revng/Support/IRHelpers.h	/^  llvm::MDTuple *tuple(llvm::StringRef String) { return tuple(get(String)); }$/;"	f	class:QuickMetadata
tuple	include/revng/Support/IRHelpers.h	/^  llvm::MDTuple *tuple(uint32_t Integer) { return tuple(get(Integer)); }$/;"	f	class:QuickMetadata
tuple	include/revng/Support/IRHelpers.h	/^  llvm::MDTuple *tuple(uint64_t Integer) { return tuple(get(Integer)); }$/;"	f	class:QuickMetadata
two	tests/Analysis/arm/switch-ldrls.S	/^two:$/;"	l
two	tests/Analysis/mips/jump-table-base-before-function-call.S	/^two:$/;"	l
two	tests/Analysis/mips/switch-jump-table-stack.S	/^two:$/;"	l
two	tests/Analysis/mips/switch-jump-table.S	/^two:$/;"	l
two	tests/Analysis/x86_64/rda-in-memory.S	/^two:$/;"	l
two	tests/Analysis/x86_64/switch-jump-table.S	/^two:$/;"	l
type	include/revng/Support/revng.h	/^  llvm::Triple::ArchType type() const { return Type; }$/;"	f	class:Architecture
type	lib/StackAnalysis/Intraprocedural.h	/^  BranchType::Values type() const { return Type; }$/;"	f	class:StackAnalysis::Intraprocedural::Interrupt
type	tools/revng-lift/BinaryFile.h	/^  LabelType::Values type() const { return Type; }$/;"	f	class:Label
unexpectedPC	include/revng/BasicAnalyses/GeneratedCodeBasicInfo.h	/^  llvm::BasicBlock *unexpectedPC() { return UnexpectedPC; }$/;"	f	class:GeneratedCodeBasicInfo
unexpectedPC	tools/revng-lift/JumpTargetManager.h	/^  llvm::BasicBlock *unexpectedPC() const { return UnexpectedPC; }$/;"	f	class:JumpTargetManager
unindent	include/revng/Support/Debug.h	/^  void unindent(unsigned Level = 1) {$/;"	f	class:Logger
unknownFunctionCall	lib/StackAnalysis/FunctionABI.cpp	/^  void unknownFunctionCall() {$/;"	f	class:StackAnalysis::AnalysesWrapper
unknownFunctionCall	lib/StackAnalysis/FunctionABI.cpp	/^void unknownFunctionCall(DefaultMap<K, T1, N> &This) {$/;"	f	namespace:StackAnalysis::MapHelpers
unknownPC	runtime/support.c	/^void unknownPC() {$/;"	f
unset	include/revng/ADT/LazySmallBitVector.h	/^  void unset(unsigned Index) {$/;"	f	class:LazySmallBitVector
unvisit	tools/revng-lift/JumpTargetManager.cpp	/^void JumpTargetManager::unvisit(BasicBlock *BB) {$/;"	f	class:JumpTargetManager
update	lib/StackAnalysis/Cache.cpp	/^bool Cache::update(BasicBlock *Function,$/;"	f	class:StackAnalysis::Cache
update	tools/revng-lift/OSRA.cpp	/^BVMap::update(BasicBlock *Target, BasicBlock *Origin, BoundedValue NewBV) {$/;"	f	class:BVMap
updateLoadReacher	tools/revng-lift/OSRA.cpp	/^bool OSRA::updateLoadReacher(LoadInst *Load, Instruction *I, OSR NewOSR) {$/;"	f	class:OSRA
upperExtreme	tools/revng-lift/OSRA.h	/^    uint64_t upperExtreme() const {$/;"	f	class:OSRAPass::BoundedValue
uraof	tests/Analysis/x86_64/StackAnalysis/uraof.S	/^uraof:$/;"	l
urvof	tests/Analysis/x86_64/StackAnalysis/urvof.S	/^urvof:$/;"	l
urvofc	tests/Analysis/x86_64/StackAnalysis/urvofc.S	/^urvofc:$/;"	l
usaof	tests/Analysis/x86_64/StackAnalysis/usaof.S	/^usaof:$/;"	l
use	tests/Analysis/x86_64/StackAnalysis/dead-on-one-path.S	/^use:$/;"	l
value	include/revng/StackAnalysis/FunctionsSummary.h	/^  Values value() const { return Value; }$/;"	f	class:StackAnalysis::FunctionCallReturnValue
value	include/revng/StackAnalysis/FunctionsSummary.h	/^  Values value() const { return Value; }$/;"	f	class:StackAnalysis::FunctionReturnValue
value	include/revng/StackAnalysis/FunctionsSummary.h	/^  Values value() const { return Value; }$/;"	f	class:StackAnalysis::RegisterArgument
value	tools/revng-lift/BinaryFile.h	/^  uint64_t value() const { return Value; }$/;"	f	class:Pointer
value	tools/revng-lift/BinaryFile.h	/^  uint64_t value() const {$/;"	f	class:Label
value	tools/revng-lift/JumpTargetManager.h	/^  std::vector<llvm::Value *> value;$/;"	m	class:legalValue
value	tools/revng-lift/OSRA.h	/^    const llvm::Value *value() const { return Value; }$/;"	f	class:OSRAPass::BoundedValue
value	tools/revng-lift/SET.cpp	/^  uint64_t value() const {$/;"	f	class:MaterializedValue
valueName	include/revng/StackAnalysis/FunctionsSummary.h	/^  const char *valueName() const {$/;"	f	class:StackAnalysis::FunctionCallReturnValue
valueName	include/revng/StackAnalysis/FunctionsSummary.h	/^  const char *valueName() const {$/;"	f	class:StackAnalysis::FunctionReturnValue
valueName	include/revng/StackAnalysis/FunctionsSummary.h	/^  const char *valueName() const {$/;"	f	class:StackAnalysis::RegisterArgument
value_t	tests/Runtime/calc.c	/^typedef int value_t;$/;"	t	file:
value_type	include/revng/ADT/LazySmallBitVector.h	/^  typedef bool value_type;$/;"	t	class:LazySmallBitVector
values	scripts/monotone-framework.py	/^  values = sorted([v.name for v in lattice.nodes_iter()])$/;"	v
variance	include/revng/Support/Statistics.h	/^  double variance() const { return ((N > 1) ? NewS \/ (N - 1) : 0.0); }$/;"	f	class:RunningStatistics
verify	include/revng/Support/MonotoneFramework.h	/^  bool verify() const {$/;"	f	class:MonotoneFrameworkWorkList
verify	lib/StackAnalysis/ABIIR.cpp	/^bool ABIFunction::verify() const {$/;"	f	class:StackAnalysis::ABIFunction
verify	lib/StackAnalysis/Element.h	/^  bool verify() const {$/;"	f	class:StackAnalysis::Intraprocedural::Element
verify	lib/StackAnalysis/Element.h	/^  bool verify(ASID StateID) const { return StateID == ID; }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
vfind	include/revng/ADT/SmallMap.h	/^  ConstVIterator vfind(const K &Key) const {$/;"	f	class:SmallMap
vfind	include/revng/ADT/SmallMap.h	/^  VIterator vfind(const K &Key) {$/;"	f	class:SmallMap
visited	include/revng/ADT/Queue.h	/^  std::set<T> visited() {$/;"	f	class:QueueImpl
visitedBlocks	lib/StackAnalysis/InterproceduralAnalysis.h	/^  std::set<llvm::BasicBlock *> visitedBlocks() const {$/;"	f	class:StackAnalysis::ResultsPool
visitsCount	lib/StackAnalysis/FunctionABI.cpp	/^  unsigned visitsCount() const { return VisitsCount; }$/;"	f	class:StackAnalysis::ABIAnalysis::Analysis
vlog	scripts/compare-json.py	/^  def vlog(message, *args):$/;"	f	function:compare
wordCount	include/revng/ADT/LazySmallBitVector.h	/^    unsigned wordCount() const { return Capacity \/ BitsPerPointer; }$/;"	f	struct:LazySmallBitVector::LargeStorage
wrapper	tests/Analysis/x86_64/StackAnalysis/recursion.S	/^wrapper:$/;"	l
write	lib/StackAnalysis/FunctionABI.cpp	/^  void write() { H::transfer(this->Analyses, GeneralTransferFunction::Write); }$/;"	f	class:StackAnalysis::AnalysesWrapper
write	lib/StackAnalysis/FunctionABI.cpp	/^  void write(ASSlot Slot) {$/;"	f	class:StackAnalysis::ABIAnalysis::Element
writeMetadataIfNew	lib/Support/DebugHelper.cpp	/^static void writeMetadataIfNew(const Instruction *TheInstruction,$/;"	f	file:
writeRegisterAsm	include/revng/Support/revng.h	/^  llvm::StringRef writeRegisterAsm() const { return WriteRegisterAsm; }$/;"	f	class:Architecture
writeToLog	include/revng/Support/Debug.h	/^inline void writeToLog(Logger<X> &This, const LogTerminator, int) {$/;"	f
writeToLog	include/revng/Support/Debug.h	/^inline void writeToLog(Logger<X> &This, const T Other, LowPrio) {$/;"	f
writeToLog	include/revng/Support/IRHelpers.h	/^inline void writeToLog(Logger<true> &This, T *I, int) {$/;"	f
writeToLog	lib/StackAnalysis/BasicBlockInstructionPair.h	/^inline void writeToLog(Logger<true> &This, const CallSite &Other, int) {$/;"	f	namespace:StackAnalysis
writeToLog	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^  friend inline void writeToLog(Logger<true> &L, const WorkItem &I, int) {$/;"	f	class:WorkItem
writeToLog	tools/revng-lift/CPUStateAccessAnalysisPass.cpp	/^void writeToLog(Logger<true> &L, const CSVOffsets &O, int \/*Ignore*\/) {$/;"	f
writtenRegisters	lib/StackAnalysis/ABIIR.cpp	/^std::set<int32_t> ABIFunction::writtenRegisters() const {$/;"	f	class:StackAnalysis::ABIFunction
yes1	tests/Analysis/arm/switch-disjoint-ranges.S	/^yes1:$/;"	l
yes2	tests/Analysis/arm/switch-disjoint-ranges.S	/^yes2:$/;"	l
zero	include/revng/ADT/LazySmallBitVector.h	/^    void zero() { zero(0); }$/;"	f	struct:LazySmallBitVector::LargeStorage
zero	include/revng/ADT/LazySmallBitVector.h	/^    void zero(size_t From) { zero(From, wordCount()); }$/;"	f	struct:LazySmallBitVector::LargeStorage
zero	include/revng/ADT/LazySmallBitVector.h	/^    void zero(size_t From, size_t Count) {$/;"	f	struct:LazySmallBitVector::LargeStorage
zero	include/revng/ADT/LazySmallBitVector.h	/^  void zero() { zero(0); }$/;"	f	class:LazySmallBitVector
zero	include/revng/ADT/LazySmallBitVector.h	/^  void zero(size_t From) { zero(From, capacity() - From); }$/;"	f	class:LazySmallBitVector
zero	include/revng/ADT/LazySmallBitVector.h	/^  void zero(size_t From, size_t Count) {$/;"	f	class:LazySmallBitVector
~AddressSpace	lib/StackAnalysis/Element.h	/^  ~AddressSpace() { AddressSpaceSizeStats.push(ASOContent.size()); }$/;"	f	class:StackAnalysis::Intraprocedural::AddressSpace
~Callgrind	include/revng/Support/Callgrind.h	/^  ~Callgrind() {$/;"	f	class:Callgrind
~ClassSentinel	include/revng/Support/ClassSentinel.h	/^  ~ClassSentinel() {$/;"	f	class:ClassSentinel
~CounterMap	include/revng/Support/Statistics.h	/^  virtual ~CounterMap() {}$/;"	f	class:CounterMap
~FunctionABI	lib/StackAnalysis/FunctionABI.h	/^  ~FunctionABI() { ABIRegistersCountStats.push(RegisterAnalyses.size()); }$/;"	f	class:StackAnalysis::FunctionABI
~LazySmallBitVector	include/revng/ADT/LazySmallBitVector.h	/^  ~LazySmallBitVector() {$/;"	f	class:LazySmallBitVector
~LogOnReturn	include/revng/Support/Debug.h	/^  ~LogOnReturn() { L.emit(); }$/;"	f	class:LogOnReturn
~LoggerIndent	include/revng/Support/Debug.h	/^  ~LoggerIndent() { L.unindent(); }$/;"	f	class:LoggerIndent
~OSRAPass	tools/revng-lift/OSRA.cpp	/^OSRAPass::~OSRAPass() {$/;"	f	class:OSRAPass
~OnQuitInteraface	lib/Support/Statistics.cpp	/^OnQuitInteraface::~OnQuitInteraface() {$/;"	f	class:OnQuitInteraface
~OperationsStack	tools/revng-lift/SET.cpp	/^  ~OperationsStack() { reset(); }$/;"	f	class:OperationsStack
~RunningStatistics	include/revng/Support/Statistics.h	/^  virtual ~RunningStatistics() {}$/;"	f	class:RunningStatistics
~ScopedDebugFeature	include/revng/Support/Debug.h	/^  ~ScopedDebugFeature() {$/;"	f	class:ScopedDebugFeature
~StreamWrapperBase	include/revng/Support/Debug.h	/^  virtual ~StreamWrapperBase() {}$/;"	f	class:StreamWrapperBase
~Term	tools/revng-lift/SimplifyComparisonsPass.cpp	/^  virtual ~Term() {}$/;"	f	class:Term
